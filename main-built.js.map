{
  "version": 3,
  "file": "generated.js",
  "sources": [
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/Actor.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/Animation.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/AssetManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/Group.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/Module.js",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/Scene.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/SpriteActor.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/Text.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/TileSheet.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/Tween.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/TweenManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/cg.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/data/UserDataManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/extras/LoadingScreen.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/extras/SplashScreen.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/extras/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/implementations/web/Detector.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/implementations/web/LocalStorageUserDataManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/implementations/web/WebAssetManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/implementations/web/WebInputManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/implementations/web/WebMusic.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/implementations/web/WebSound.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/implementations/web/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/input/Axis.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/input/ControlMap.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/input/InputManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/input/MultiTrigger.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/input/Touch.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/input/Trigger.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/math/Random.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/math/Vector2.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/math/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/menus/Menu.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/menus/MenuItem.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/menus/TextMenuItem.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/menus/VerticalMenu.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/menus/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/physics/Body.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/physics/Intersection.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/physics/Physical.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/physics/Physics.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/physics/PhysicsManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/physics/shapes/AABB.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/physics/shapes/Shape.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/ui/Interactive.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/ui/UI.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/plugins/ui/UIManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/CustomRenderable.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/DisplayObject.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/DisplayObjectContainer.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/Graphics.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/Sprite.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/Stage.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/Strip.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/TilingSprite.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/core/Circle.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/core/Ellipse.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/core/Matrix.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/core/Point.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/core/Polygon.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/core/Rectangle.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/core/RenderTypes.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/core/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/filters/FilterBlock.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/renderers/canvas/CanvasGraphics.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/renderers/canvas/CanvasRenderer.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/renderers/webgl/GLESGraphics.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/renderers/webgl/GLESRenderer.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/renderers/webgl/GLESShaders.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/renderers/webgl/WebGLBatch.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/renderers/webgl/WebGLRenderer.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/textures/BaseTexture.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/textures/RenderTexture.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/textures/Texture.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/rendering/utils/PolyK.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/sound/Music.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/sound/Sound.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/sound/SoundManager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/text/BitmapFont.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/text/BitmapText.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/text/PixiText.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/text/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/tile/BitwiseTileMap.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/tile/Hotspot.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/tile/TileMap.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/tile/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/DeferredProxy.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/HasPlugins.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/HasPooling.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/HasSignals.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/Promises.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/Signal.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/SignalBinding.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/async.js",
    "/home/lyla/Documents/Programming/ComboGame1/node_modules/combo/src/combo/util/index.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/src/ComboGame.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/src/Fire.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/src/Trogdor.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/src/Villager.coffee",
    "/home/lyla/Documents/Programming/ComboGame1/src/main.coffee"
  ],
  "names": [],
  "mappings": "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,CAAA;;AAgGA;AAAA;;;KAhGA;;AAAA,0BAoGA,QAAA,GAAU,SAAA,GAAA;AACR,IAAA,MAAA,CAAA,IAAQ,CAAA,OAAR,CAAA;AAAA,IACA,MAAA,CAAA,IAAQ,CAAA,SADR,CAAA;WAEA,MAAA,CAAA,IAAQ,CAAA,QAHA;EAAA,CApGV,CAAA;;AAyGA;AAAA;;KAzGA;;AAAA,0BA4GA,QAAA,GAAU,SAAA,GAAA;WACR,wBAAA,GAA2B,IAAC,CAAA,OAA5B,GAAsC,YAAtC,GAAqD,IAAC,CAAA,OAAD,CAAA,CAArD,GAAkE,WAAlE,GAAgF,IAAC,CAAA,MAAjF,GAA0F,IADlF;EAAA,CA5GV,CAAA;;uBAAA;;IAxBF,CAAA;;AAAA,MAuIM,CAAC,OAAP,GAAiB,aAvIjB,CAAA;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACl9BA,IAAA,uGAAA;EAAA,6BAAA;;AAAA,aAAA,GAAgB,OAAA,CAAQ,oBAAR,CAAhB,CAAA;;AAAA,UACA,GAAa,OAAA,CAAQ,iBAAR,CADb,CAAA;;AAAA,UAEA,GAAa,OAAA,CAAQ,iBAAR,CAFb,CAAA;;AAAA,QAGA,GAAW,OAAA,CAAQ,eAAR,CAHX,CAAA;;AAAA,MAIA,GAAS,OAAA,CAAQ,aAAR,CAJT,CAAA;;AAAA,aAKA,GAAgB,OAAA,CAAQ,oBAAR,CALhB,CAAA;;AAAA,IAOA,GACE;AAAA,EAAA,MAAA,EAAQ,SAAC,GAAD,GAAA;AACN,QAAA,OAAA;AAAA,IAAA,CAAA,GAAI,CAAJ,CAAA;AACA,SAAA,QAAA;;iBAAA;AACE,MAAA,EAAA,CAAA,CADF;AAAA,KADA;WAGA,EAJM;EAAA,CAAR;AAAA,EAMA,OAAA,EAAS,SAAC,GAAD,GAAA;WACP,MAAM,CAAA,SAAE,CAAA,QAAQ,CAAC,IAAjB,CAAsB,GAAtB,CAAA,KAA8B,iBADvB;EAAA,CANT;AAAA,EASA,WAAA,EAAa,SAAC,GAAD,EAAM,IAAN,EAAY,EAAZ,GAAA;AACX,QAAA,IAAA;AAAA,IAAA,IAAA,GAAO,GAAG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",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n",
    "cg = require 'cg'\nDisplayObjectContainer = require 'rendering/DisplayObjectContainer'\nTween = require 'Tween'\nHasSignals = require 'util/HasSignals'\nHasPlugins = require 'util/HasPlugins'\n\nclass Repeater\n\n###*\nAn `Actor` is an active entity within your `App`.\n\n@class cg.Actor\n@extends cg.rendering.DisplayObjectContainer\n@uses cg.util.HasSignals\n\n@constructor\n@param [properties] {Object}\nA set of name/value pairs that will be copied into the resulting `Actor` object.\n\n@param [properties.controls] {ControlMap|String}\nWhen a `String` is provided, it is converted to `cg.input.controls[properties.controls]` for convenience.\n###\nclass Actor extends DisplayObjectContainer\n  @mixin HasSignals\n  @mixin HasPlugins\n\n  onMixin: ->\n    Actor.__defineProperties.call @\n\n  __applyProperties: (properties={}) ->\n    @__classes ?= []\n\n    for own k,v of properties\n      @[k] = v\n\n    @className ?= ''\n\n  constructor: (properties={}) ->\n    @__defineProperties()\n\n    @__plugins_preInit()\n    # Internally used, unique ID:\n    @defineProperty '__internalID', value: cg.getNextID()\n\n    super\n\n    @__applyProperties properties\n\n    @__plugins_postInit()\n\n  valueOf: -> @__internalID\n\n  ###*\n  Set the value of a property on this actor.\n\n  @method set\n  @param [property, value] {String, <Any>} Two arguments: property name and value you wish to change.\n  @param [values] {Object} One argument: key-value hash of all properties you wish to set.\n  @chainable\n  ###\n  set: (args...) ->\n    if args.length is 1\n      values = args[0]\n    else\n      values = {}\n      values[args[0]] = args[1]\n\n    for own key, val of values\n      @[key] = val\n    return @\n\n  ###*\n  Reset a potentially-destroyed actor, optionally re-initializing some properties.\n\n  Often used in conjunction with [`Pool::spawn`](cg.util.HasPooling.Pool.html#method_spawn).\n\n  @method reset\n  @param [properties] {Object} A set of properties/values to be applied to the actor.\n  @chainable\n  ###\n  reset: (properties={}) ->\n    @__plugins_preReset()\n    \n    @_destroyed = false\n    @__applyProperties properties\n\n    @__plugins_postReset()\n    return @\n\n  # Setup properties that need to be unique per-instance:\n\n  __getId: -> @__id\n  __setId: (val) ->\n    cg._setActorByID @, val\n    @__id = val\n    \n  __getControls: -> @__controls\n  __setControls: (val) ->\n    @__controls?.removeListener? @\n    @__controls = val\n    @__controls?.addListener? @\n\n  __getClassName: -> @__classes?.join(' ') ? ''\n  __setClassName: (val) ->\n    @__classes ?= []\n    val ?= ''\n    __classes = val.split ' '\n\n    for className in @__classes by -1\n      continue  if className in __classes\n      @removeClass className\n\n    for className in __classes\n      continue  if className in @__classes\n      @addClass className\n\n  __getPaused: -> !!@__paused\n  __setPaused: (value) ->\n    return  if @__paused is value\n    if value\n      @broadcast 'pause'\n    else\n      @broadcast 'resume'\n    @__paused = value\n\n  __defineProperties: ->\n    ###*\n    A unique identifier for this actor; this can later be used to retrieve\n    the actor with [`cg('#<id>')`](Game.html#method_default).\n\n    @property id\n    @type {String}\n    @example\n        actor.id = 'player'\n        console.assert(actor === cg('#player')); // true\n    ###\n    _id = @id\n    @defineProperty 'id',\n      get: @__getId\n      set: @__setId\n    @id = _id  if _id?\n\n    ###*\n    A set of input controls that this actor shall listen to.\n\n    Changing this property to a valid `ControlMap` will automatically register\n    this actor with [`this.controls.addListener(this)`](cg.input.ControlMap.html#method_addListener), meaning that any\n    action events that occur in the `ControlMap` will be redirected to this actor so\n    that they may be captured with [`on`](#method_on).\n\n    @example\n        this.controls = new ControlMap({jump: 'space'}); // Spacebar triggers the jump event\n        this.on('jump', this.jump);\n    @property controls\n    @type {ControlMap}\n    ###\n    _controls = @controls\n    @defineProperty 'controls',\n      get: @__getControls\n      set: @__setControls\n    @controls = _controls  if _controls?\n\n    # TODO: Make it so most of these can be set on the prototype, instead.\n    ###*\n    A string that represents what class(es) this actor belongs to, if any.\n\n    This string may represent more than one class by separating classes with spaces.\n\n    Updating this property automatically adds and removes this actor from\n    the appropriate class groups in `cg.classes` for convenient access.\n\n    See also:\n\n      - [`addClass`](#method_addClass)\n      - [`removeClass`](#method_removeClass)\n      - [`hasClass`](#method_hasClass)\n\n    @example\n        this.className = 'fruit produce';\n\n        if (cg.classes.fruit.contains(this)) {\n          cg.log('Delicious fruit!');\n        }\n\n        if (cg.classes.produce.contains(this)) {\n          cg.log('Fresh produce!');\n        }\n\n        // Result:\n        // > Delicious fruit!\n        // > Fresh produce!\n\n    @property className\n    @type {String}\n    ###\n    _className = @className\n    @defineProperty 'className',\n      get: @__getClassName\n      set: @__setClassName\n    @className = _className  if _className?\n\n    ###*\n    If `true`, [`update`](#method_update) will not be exected during the game loop.\n\n    Furthermore, any event listeners added to this actor with [`on`](#method_on) will be\n    suppressed whenever `paused` is set to `true`.\n\n    See also:\n\n      * [`pause`](#method_pause)\n      * [`resume`](#method_resume)\n      * [`event:pause`](#event_pause)\n      * [`event:resume`](#event_resume)\n    @property paused {Boolean}\n    ###\n    _paused = @paused\n    @defineProperty 'paused',\n      get: @__getPaused\n      set: @__setPaused\n    @paused = _paused  if _paused?\n\n  # Setup properties that need *not* be unique per-instance:\n  @__defineProperties: ->\n    ###*\n    The horizontal position relative to `this.parent`.\n\n    @property x\n    @type {Number}\n    ###\n \n    ###*\n    The vertical position relative to `this.parent`.\n\n    @property y\n    @type {Number}\n    ###\n\n    ###*\n    Like [`paused`](#property_paused) but recursively factors in parent's paused status as well.\n\n    `paused` could still be true, but if the parent is paused, this actor will not `update()`.\n\n    @property worldPaused\n    @type {Boolean}\n    @readonly\n    ###\n    @defineProperty 'worldPaused',\n      get: -> (@paused or !!@parent?.paused)\n\n    ###*\n    Shorthand for `this.controls.actions`.\n\n    @property actions\n    @type {Object}\n    @readonly\n    ###\n    @defineProperty 'actions',\n      get: -> @controls?.actions\n\n  @__defineProperties()\n\n  ###*\n  Associate a new class name with this actor.\n\n  Whitespace is removed. To add multiple classes, make multiple calls to [`addClass`](#method_addClass),\n   or set [`className`](#property_className) directly.\n\n  Empty class names are ignored.\n\n  `this` will be added to the appropriate class group of `cg.classes`.\n\n  [`className`](#property_className) will automatically be updated to reflect the addition of this class.\n\n  @example\n      this.addClass('fruit');\n      this.addClass('produce');\n\n      if (cg.classes.fruit.contains(this)) {\n        cg.log('Delicious fruit!');\n      }\n\n      if (cg.classes.produce.contains(this)) {\n        cg.log('Fresh produce!');\n      }\n\n      cg.log('this.className: \"' + this.className + '\"');\n\n      // Result:\n      // > Delicious fruit!\n      // > Fresh produce!\n      // > this.className = \"fruit produce\" // NOTE: Order of names may vary.\n\n  @method addClass\n  @param newClass {String} The name of the class to associate with this actor.\n  @chainable\n  ###\n  addClass: (newClass) ->\n    newClass = newClass.replace(/\\s/g, '').replace(/#/g,'')\n    return @  if newClass.length is 0\n    @__classes.push newClass\n    cg._addActorToClassGroup @, newClass\n    return @\n\n  ###*\n  Remove association of a class name from this actor.\n\n  Empty class names are ignored.\n\n  `this` will be removed from the appropriate class group of `cg.classes`.\n\n  [`className`](#property_className) will automatically be updated to reflect the removal of this class.\n\n  @example\n      this.className = 'fruit produce';\n      this.removeClass('fruit');\n      this.removeClass('produce');\n\n      if (cg.classes.fruit.contains(this)) {\n        cg.log('Delicious fruit!');\n      } else {\n        cg.log('Not fruit!');\n      }\n\n      if (cg.classes.produce.contains(this)) {\n        cg.log('Fresh produce!');\n      } else {\n        cg.log('Not produce!');\n      }\n\n      cg.log('this.className: \"' + this.className + '\"');\n\n      // Result:\n      // > Not fruit!\n      // > Not produce!\n      // > this.className: \"\"\n\n  @method removeClass\n  @param className {String} The name of the class to no longer associate with this actor.\n  @chainable\n  ###\n  removeClass: (className) ->\n    idx = @__classes.indexOf className\n    return @  if idx < 0\n    @__classes.splice idx, 1\n    cg._removeActorFromClassGroup @, className\n    return @\n\n  ###*\n  Query whether this actor is associated with a given class name.\n\n  @method hasClass\n  @param className {String} The name of the class to query.\n  @return {Boolean} `true` if this actor is associated with `className`; `false` otherwise.\n  ###\n  hasClass: (className) ->\n    return @__classes.indexOf(className) >= 0\n\n  ###*\n  Call a function for each class name associated with this actor.\n\n  The only argument passed to the function is a `String` of each class name.\n\n  The value of `this` in the body of the function will be set to this `Actor` instance.\n\n  **NOTE:** The order of the iteration is not specified, and may differ with each call to `forEachClass`.\n\n  @example\n      this.forEachClass(function(className) {\n        cg.log('I am a member of the \"' + className + '\" class.');\n      });\n\n  @method forEachClass\n  @param func {Function} The function to execute for each class.\n  @chainable\n  ###\n  forEachClass: (func) ->\n    for className in @__classes by -1\n      func.call @, className\n    return @\n\n  __hideOrShow: (arg, params, cb, cbx) ->\n    params.duration = 0\n\n    if typeof arg is 'number'\n      params.duration = arg\n    else if typeof arg is 'object'\n      for own k,v of arg\n        params[k] = v\n\n    params.immediate = false\n\n    @__hideShowTween?.stop()\n    @__hideShowTween = new Tween @, params\n    @__hideShowTween.start().then(cb).then(cbx)\n    return @__hideShowTween\n\n  __hide: ->\n    @visible = false\n    @pause()\n\n  ###*\n  Hide this actor, with an optional \"fade out\" animation.\n\n  @example\n      // Immediately hide the actor.\n      this.hide();\n\n  @example\n      // Fade the actor out for 500 ms and then hide it.\n      this.hide(500);\n\n  @example\n      // After the actor is hidden, execute a function.\n      this.hide(500).then(function() {\n        cg.log('I have finished fading out!');\n      });\n\n  @example\n      // Hide the actor using a custom tween animation.\n      var tweenParams = {\n        values: {\n          scaleX: 0 // \"Squeeze\" the actor horizontally\n        },\n        duration: 250\n      };\n\n      this.hide(tweenParams);\n\n  @method hide\n  @param [duration|params] {Number(milliseconds)|Object}\n  One of the following:\n\n    1. `duration`: The number of milliseconds for the \"fade out\" animation to take before hiding the actor.\n    2. `params`: An object whose properties will be used to create a `Tween` that will execute before finally hiding this actor.\n  @param [callback] {Function} A callback to execute once the \"fade out\" animation completes.\n\n  See also:\n\n    * [`show`](#method_show)\n    * [`tween`](#method_tween)\n\n  @return {Promise} A promise that will be resolved once this actor is completely hidden.\n  ###\n  hide: (arg, cb) ->\n    params =\n      values: alpha: 0\n\n    return @__hideOrShow arg, params, @__hide, cb\n\n  __show: ->\n    @resume()\n\n  ###*\n  Show (unhide) this actor, with an optional \"fade in\" animation.\n\n  @example\n      // Immediately show the actor.\n      this.show();\n\n  @example\n      // Show the actor, then fade it in for 500 ms.\n      this.show(500);\n\n  @example\n      // After the actor fades in, execute a function.\n      this.show(500).then(function() {\n        cg.log('I have finished fading in!');\n      });\n\n  @example\n      // Show the actor using a custom tween animation.\n      var tweenParams = {\n        values: {\n          scaleX: 1 // \"Open\" the actor horizontally\n        },\n        duration: 250\n      };\n\n      this.scaleX = 0;\n      this.show(tweenParams);\n\n  @method show\n  @param [duration|params] {Number(milliseconds)|Object}\n  One of the following:\n  1. `duration`: The number of milliseconds for the \"fade in\" animation to take after showing the actor.\n  2. `params`: An object whose properties will be used to create a `Tween` that will execute after showing this actor.\n\n  @return {Promise} A promise that will be resolved once the \"fade in\" animation completes.\n\n  See also:\n\n    * [`hide`](#method_hide)\n    * [`tween`](#method_tween)\n  ###\n  show: (arg, cb) ->\n    @visible = true\n    params =\n      values: alpha: 1\n    return @__hideOrShow arg, params, @__show, cb\n\n  ###*\n  Prevent [`update`](#method_update) from being called.\n\n  Also suppresses any event listeners that bound with [`on`](#method_on).\n\n  @method pause\n  @chainable\n  ###\n  ###*\n  Fired *immediately* when [`pause`](#method_pause) is called.\n\n  @event pause\n  ###\n  pause: ->\n    @paused = true\n    return @\n\n  ###*\n  Allow [`update`](#method_update) to be called.\n\n  @method resume\n  @chainable\n  ###\n  ###*\n  Fired *immediately* when [`resume`](#method_resume) is called.\n\n  @event resume\n  ###\n  resume: ->\n    @paused = false\n    return @\n\n  ###*\n  Remove this actor from the app.\n\n  `update()` will never be executed after `destroy()` is called.\n\n  This `Actor` is finally removed from the app's display list at the end of the app's `update` cycle.\n  @method destroy\n  @chainable\n  ###\n  ###*\n  Fired *immediately* when `this.destroy()` is called.\n\n  @event destroy\n  ###\n  destroy: ->\n    @__plugins_preDispose()\n    @emit 'destroy', @\n    @broadcast '__destroy__', @\n    @_destroyed = true\n    @visible = false\n    cg._dispose @\n\n    @className = ''\n\n    if @__tweens?\n      for t in @__tweens by -1\n        t.stop()\n\n    return @\n\n  _dispose: ->\n    @_disposeListeners()\n    @controls?.removeListener? @\n    @parent?.removeChild?(@)\n    @__plugins_postDispose()\n\n  ###*\n  Called once every update-cycle of the app, unless the [`paused`](#property_paused) is `true`.\n\n  Any [`children`](#property_children) that aren't paused get updated here, therefore it is essential\n  to call `super` in any `update` methods that are inherited from this one.\n\n  **Important Note**: Since paused children are not updated, neither are any of *their* children, whether\n  the children themselves are paused or not.\n  @method update\n  ###\n  ###*\n  Fired *immediately* before `update` is called.\n  @event update\n  ###\n  update: ->\n    @__plugins_preUpdate()\n    \n    for c in @children\n      continue  if c.paused or c._destroyed\n      c.emit? 'update'\n      c.update?()\n    \n    @__plugins_postUpdate()\n    return\n  \n  __registerTween: (tween) ->\n    @__tweens ?= []\n    @__tweens.push tween\n    @on tween, 'removed', -> @__tweens.splice @__tweens.indexOf(tween), 1\n\n  ###*\n  \"Ease\" this actor's numeric property (or number of properties) from one value to another.\n\n  @method tween\n  @param [params] {Object} Parameters that define how the `Tween` should behave (see below).\n  @param [params.values] {Object} A key-value pair of the final values to be applied to this actor.\n  @param [params.duration=500] {Number(milliseconds)} The span of time over which this actor's `value`s should be tweened.\n  @param [params.easeFunc=`Tween.Quadratic.InOut`] {Function}\n  @param [params.delay=0] {Number(milliseconds)} The amount of time after `start` is called before the tween should begin.\n  @param [params.relative=false] {Boolean} Whether `values` should represent a delta to be added to this actor's current values, rather than the absolute final values.\n  @param [params.tweener=this.scene.tweener] {TweenManager} The `TweenManager` to be used to drive this `Tween`.\n  @param [params.immediate=true] {Boolean} If true, `start()` will be called immediately on the resulting `Tween`.\n  @return {Promise} A promise that will be resolved when this tween completes, or rejected when `stop()` is called.\n  ###\n  tween: (object..., property, value, duration, easeFunc, delay) ->\n    if object.length is 0\n      obj = @\n    else\n      obj = object[0]\n\n    if typeof property is 'object'\n      params = property\n    else\n      values = {}\n      values[property] = value\n      params =\n        values: values\n        duration: duration\n        easeFunc: easeFunc\n        delay: delay\n\n    if @scene?\n      params.tweener ?= @scene.tweener\n\n    t = new Tween obj, params\n    @__registerTween t\n    return t\n\n  __blinkOn: ->\n    @visible = true\n    @__blinkDelay?.stop()\n    @__blinkDelay = @delay @__blinkOnDuration, @__blinkOff\n\n  __blinkOff: ->\n    @visible = false\n    @__blinkDelay?.stop()\n    @__blinkDelay = @delay @__blinkOffDuration, @__blinkOn\n  \n  __blinkStop: ->\n    @__blinkDelay?.stop()\n    @visible = true\n\n  ###*\n  Cause this actor to blink on and off by periodically toggling `this.visible`.\n\n  To cancel blinking, pass a \"falsy\" value (i.e. `false`, `0`).\n\n  @method blink\n  @param [onDuration=500] {Number(milliseconds)} The duration to blink \"on\"\n  @param [offDuration=onDuration] {Number(milliseconds)} The duration to blink \"off\"\n  ###\n  blink: (@__blinkOnDuration=500, @__blinkOffDuration=@__blinkOnDuration, lifetime) ->\n    if not @__blinkOnDuration\n      @__blinkStop()\n      return @\n\n    if @visible\n      @__blinkOff()\n    else\n      @__blinkOn()\n    \n    if typeof lifetime is 'number'\n      @delay lifetime, @__blinkStop\n\n    return @\n\n  __animateStop: ->\n    @__animateTween?.stop()\n    delete @__animateTweens\n\n  ###*\n  TODOC\n\n  @method animate\n  @example\n      # Pulse on and off...\n      this.animate(\n        ['alpha', 0],\n        ['alpha', 1]\n      )\n  ###\n  animate: (argLists...) ->\n    if arguments[0] is false\n      @__animateStop()\n      return @\n\n    previousTween = null\n    \n    @__animateTweens = []\n\n    # Build a sequence of tweens from each argList\n    for argList in argLists by -1\n      if not cb? and (typeof argList is 'function')\n        cb = argList\n        continue\n\n      if not count? and (typeof argList is 'number')\n        count = argList\n        continue\n\n      if cg.util.isArray argList\n        tween = new Tween @, argList...\n      else\n        tween = new Tween @, argList\n      \n      tween.stop()\n      @__animateTweens.unshift tween\n      do (previousTween) ->\n        tween.on 'complete', ->\n          @__animateTween = previousTween.start()  if previousTween?\n      previousTween = tween\n\n    @__animateTweens[@__animateTweens.length-1].on 'complete', ->\n      cb?.call @\n      if ((not count?) or --count > 0)\n        @__animateTween = tween.start()\n\n    @__animateTween = tween?.start()\n\n    return @\n\n  ###*\n  Invoke a function on this actor after a specified duration.\n\n  The delay is synchronized with this actor's [scene](#property_scene).\n\n  To cancel the callback function, call `stop()` on the returned `Tween` object.\n\n  @example\n      t = this.delay(1000, function() {\n        cg.log(\"One second has passed!\");\n      }).then(function() {\n        cg.log(\"Two\")\n      });\n\n      t.stop(); // This will cancel the delay.\n  @method delay\n  @param time {Number(milliseconds)} The time to wait before invoking `func`.\n  @param func {Function} The function to call; the value of `this` inside the body of the function will be this `Actor` instance.\n  @return {cg.Tween} The `Tween` object that controls this delay.\n  ###\n  ###\n  TODO: make it easy to chain tweens and delays and other self-functions\n  eg:\n\n      this.delay(100).tween({\n        values: { alpha: 0 },\n        duration: 100\n      }).delay(100).then(function() {\n        cg.log('all done!'); // Called after 300ms (delay(100), tween(100), delay(100))\n      });\n  ###\n  delay: (time, func) ->\n    # TODO: It's kind of a hack that we're using `Tween` -- maybe there should be a more generic Timer system.\n    if @tweener?\n      tweener = @tweener\n    else if @scene?\n      tweener = @scene.tweener\n    else\n      tweener = cg.tweener\n\n    t = new Tween @,\n      duration: time\n      immediate: false\n      tweener: tweener\n    @__registerTween t\n    t.start().then func\n    return t\n\n  ###*\n  Repeatedly invoke a function on this actor at a fixed interval.\n  \n  @method repeat\n  @param time {Number(milliseconds)} The period between each invocation of `func`.\n  @param func {Function} The function to call; the value of `this` inside the body of the function will be this `Actor` instance.\n  @param [count] {Number} If specified, the number of times for `func` to be invoked.\n  @return {Repeater} A reference to the repeater; pass to [`cancelRepeat`](#method_cancelRepeat) to stop repeating.\n  ###\n  repeat: (time, count..., func, ref) ->\n    count = count[0]\n\n    if not ref?\n      ref = new Repeater \n\n    ref.hook = @delay time, ->\n      if (func.call(@) isnt false) and ((not count?) or count-- > 0)\n        @repeat time, count, func, ref\n\n    return ref\n\n  cancelRepeat: (ref) ->\n    ref?.hook?.stop?()\n    return\n\n  ###*\n  Calculate a vector going from this actor to some other point.\n\n  @method vecTo\n  @param other {Object} something that has `x` and `y` properties, like an actor or a vector.\n  ###\n  vecTo: (other) ->\n    cg.math.Vector2::sub.call other, @\n\n  ###*\n  Shorthand for `this.vecTo(cg.input.mouse)`.\n  \n  @method vecToMouse\n  ###\n  vecToMouse: ->\n    @vecTo cg.input.mouse\n\nmodule.exports = Actor\n",
    "cg = require 'cg'\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\n\n###*\nA series of textures that can be displayed one frame at a time.\n\n@class cg.Animation\n@extends cg.Module\n@uses cg.util.HasSignals\n\n@constructor\n@param frames {Array(String|Texture|Array[2](String|Texture,Number))}\nAn array of frames.\n\nEach frame can be represented either by a single `Texture`, or by a two-element array containing a `Texture`\nand a number representing how long the frame's duration is, respectively.\n\n`String` values will be interpretted as asset names -- i.e., the string `'bullet'` becomes `cg.assets.textures.bullet`.\n\nIf no explicit duration is specified for a frame, it is shown for the default specified `frameLength`.\n@param [frameLength=10] {Number(milliseconds)} Default duration for each frame.\n@param [looping=true] {Boolean} Whether the animation should repeat endlessly.\n\n@example\n    // Create a 5-frame, looping animation with 30ms between each frame.\n    // 'f0' is shorthand for cg.assets.textures.f0\n    var anim = new Animation(['f0', 'f1', 'f2', 'f3', 'f4'], 30);\n\n@example\n    // Create a non-looping animation with a mixture of custom and default frame lengths:\n    var anim = new Animation([\n      ['f0', 60], // Display for 60ms (override)\n      'f1',       // Display for 30ms (supplied default)\n      'f2',       // Display for 30ms (supplied default)\n      'f3',       // Display for 30ms (supplied default)\n      ['f4', 100] // Display for 100ms (override)\n    ], 30, false);\n###\nclass Animation extends Module\n  @mixin HasSignals\n\n  Object.defineProperty @::, 'looping',\n    get: -> @__looping\n    set: (val) ->\n      @__looping = val\n      if val\n        @update = @__looping_update\n      else\n        @update = @__oneshot_update\n\n  constructor: (@frames, @frameLength=10, @looping=true) ->\n    for frame,i in @frames\n      if typeof frame is 'string'\n        @frames[i] = cg.assets.textures[frame]\n      else if cg.util.isArray frame\n        if typeof frame[0] is 'string'\n          frame[0] = cg.assets.textures[frame[0]]\n      else if not frame instanceof cg.Texture\n        throw new Error 'Animation: Invalid frame type for frame #' + i\n    @rewind()\n\n  ###*\n  Retrieve the `Texture` associated with a given frame index.\n\n  @method getFrame\n  @param index {Number} The index into this animation's frame list.\n  @return {cg.Texture} The texture for the frame at the specified frame number.\n\n  `null` is returned when `index` is out of range.\n  ###\n  getFrame: (index) ->\n    return null  if index >= @frames.length\n\n    @frames[index][0] or @frames[index]\n\n  ###*\n  Reset the animation's current frame to the beginning.\n\n  This will set the current frame back to 0, but will not resume\n  playing if it is paused.\n\n  Calling this method will always trigger a [`newFrame`](#event_newFrame) event.\n\n  @method rewind\n  @chainable\n  ###\n  rewind: ->\n    @done = false\n    @frameNum = 0\n    @nextFrame = @frames[@frameNum][1] or @frameLength\n    @texture = @frames[@frameNum][0] or @frames[@frameNum]\n    @emit 'newFrame', @texture\n    return @\n\n  ###*\n  Halt the playback of this `Animation`.\n\n  @method pause\n  @chainable\n  ###\n  pause: ->\n    @paused = true\n    return @\n\n  ###*\n  Continue the playback of this `Animation`.\n\n  This will not reset the animation to the beginning if it has completed; use `rewind` instead.\n  @method resume\n  @chainable\n  ###\n  resume: ->\n    @paused = false\n    return @\n\n  ###*\n  Fired *immediately after* this `Animation`'s frame number goes from the last back to `0`.\n  @event end\n  ###\n\n  ###*\n  Fired whenever this `Animation`'s current frame number changes (even if the previous frame is identical).\n  @event newFrame\n  @param texture {Texture} The new current texture of this animation.\n  ###\n\n  ###*\n  Tick the timer of this `Animation` forward.\n\n  If paused, or completed and not looping, this does nothing.\n  Otherwise, it will advance the internal timer of the animation by `cg.dt`.\n\n  This is used internally by [`SpriteActor`s with the `anim`](cg.SpriteActor.html#property_anim) property set.\n\n  @method update\n  @protected\n  ###\n  __looping_update: ->\n    return  if @paused\n\n    @nextFrame -= cg.dt\n\n    return  if @nextFrame > 0\n\n    @frameNum = (@frameNum + 1) % @frames.length\n    @texture = @frames[@frameNum][0] or @frames[@frameNum]\n    @nextFrame += @frames[@frameNum][1] or @frameLength\n\n    @emit 'newFrame', @texture\n\n    if @frameNum is 0\n      @emit 'end'\n\n  __oneshot_update: ->\n    return  if @done or @paused\n\n    @nextFrame -= cg.dt\n\n    return  if @nextFrame > 0\n\n    @frameNum = (@frameNum + 1)\n    if @frameNum >= @frames.length\n      @done = true\n      @emit 'end'\n    else\n      @texture = @frames[@frameNum][0] or @frames[@frameNum]\n      @nextFrame += @frames[@frameNum][1] or @frameLength\n\n      @emit 'newFrame', @texture\n\nmodule.exports = Animation\n",
    "async = require 'util/async'\ncg = require 'cg'\nModule = require 'Module'\nScene = require 'Scene'\nPromises = require 'util/Promises'\nTexture = require 'rendering/textures/Texture'\nSound = require 'sound/Sound'\nMusic = require 'sound/Music'\nTileSheet = require 'TileSheet'\nBitmapFont = require 'text/BitmapFont'\n\nDeferred = Promises.Deferred\n__NOOP__ = ->\n\n###*\nA central place to load assets (textures, sounds, music, JSON, etc.)\n\n@class cg.AssetManager\n@extends cg.Module\n###\nclass AssetManager extends Module\n  @textureTypes: ['jpeg', 'jpg', 'png', 'gif']    \n  @_textureCache: {}\n  constructor: ->\n    @music = {}\n    @sounds = {}\n    @textures = {}\n    @sheets = {}\n    @json = {}\n    @text = {}\n    @fonts = {}\n\n  ###*\n  Load a `Texture` from an image file.\n\n  @method loadTexture\n  @param path {String} The path (URL) of the texture file to load.\n  @return {Promise} A promise that will resolve a `Texture` once it finishes loading, or reject if it fails to load.\n  @example\n      cg.assets.loadTexture('assets/bacon.png').then(function (texture) {\n        cg.log('Delicious bacon!');\n        cg.log('Bacon width: ' + texture.width);\n        cg.log('Bacon height: ' + texture.height);\n      }, function () {\n        cg.error('Failed to load delicious bacon.');\n      });\n  ###\n  loadTexture: (path) ->\n    throw new Error 'Unimplemented AssetManager::loadTexture was called; this method must be overridden in your AssetManager implementation.'\n\n\n  ###*\n  Load and parse JSON from a file.\n\n  @method loadJSON\n  @param path {String} The path (URL) of the json file to load.\n  @return {Promise} A promise that will resolve a parsed object literal once the file finishes loading, or reject if it fails to load.\n  @example\n      cg.assets.loadJSON('assets/preferences.json').then(function (preferences) {\n        cg.backgroundColor = preferences.backgroundColor;\n      }, function () {\n        cg.error('Failed to load preferences file!');\n      });\n  ###\n  loadJSON: (path) ->\n    throw new Error 'Unimplemented AssetManager::loadJSON was called; this method must be overridden in your AssetManager implementation.'\n\n\n  ###*\n  Load a `Texture` and chop it up into a fixed-size `TileSheet`\n  *or* [Texture Packer](http://www.codeandweb.com/texturepacker) atlas in JSON format.\n\n  @method loadSpritesheet\n  @param path {String} Tye path (URL) of either an image file, or texture atlas file.\n\n  If `tileW` and `tileH` are specified, this value will be assumed to be an image, otherwise\n  it is assumed to be a texture atlas file.\n\n  @param [tileW] {Number}\n  @param [tileH] {Number}\n  @return {Promise} A promise that resolves one of two things:\n    1. If only `path` is specified, a plain javascript object that maps texture file paths to `Texture` objects (eg. `textures['assets/bacon.jpg']`)\n    2. If `tileW` and `tileH` are specified, a `TileSheet` made of a `Texture` loaded from `path`, with tiles of size `tileW`x`tileH`\n  ###\n  loadSpritesheet: (path, tileW, tileH) ->\n    deferred = new Deferred @\n    textures = {}\n\n    if (typeof tileW is 'number') and (typeof tileH is 'number')\n      @loadTexture(path).then (texture) =>\n        deferred.resolve TileSheet.create texture, tileW, tileH\n      , (error) =>\n        deferred.reject error\n    else\n      @loadJSON(path).then (json) =>\n        texturePath = json.meta.image\n        @loadTexture(texturePath).then (baseTexture) =>\n          frameData = json.frames\n          for name of frameData\n            rect = frameData[name].frame\n            continue  if not rect\n            frame =\n              x: rect.x\n              y: rect.y\n              width: rect.w\n              height: rect.h\n            textures[name] = AssetManager._textureCache[name] = new Texture baseTexture, frame\n            continue  unless frameData[name].trimmed\n            # TODO: It doesn't look like this is actually supported anywhere within pixi:\n            textures[name].realSize = frameData[name].spriteSourceSize\n            textures[name].trim.x = 0 # (realSize.x / rect.w)\n          deferred.resolve textures\n      , (error) =>\n        deferred.reject error\n    return deferred.promise\n\n  ###*\n  Load a `BitmapFont` from a texture path.\n\n  @method loadBitmapFont\n  @param path {String} The path (URL) of the font's texture file.\n  @param [spacing] {Number} Passed to the [`BitmapFont`](BitmapFont.html) constructor.\n  @param [lineHeight] {Number} Passed to the [`BitmapFont`](BitmapFont.html) constructor.\n  ###\n  loadBitmapFont: (path, spacing, lineHeight) ->\n    deferred = new Deferred @\n\n    @loadTexture(path).then (texture) =>\n      deferred.resolve new BitmapFont texture, spacing, lineHeight\n    , (error) =>\n      deferred.reject error\n\n    return deferred.promise\n\n  ###*\n  Load a `Sound` file.\n\n  @method loadSound\n  @param paths {String|Array<String>} The path(s) (URL[s]) to attempt to load the sound from.\n\n  The paths will be attempted to load in the order of the array, if an array is specified.\n\n  @param numChannels {Number} The value to set the sound's [`numChannels`](cg.sound.Sound.html#property_numChannels) property to.\n  ###\n  loadSound: (paths, numChannels) ->\n    throw new Error 'Unimplemented AssetManager::loadSound was called; this method must be overridden in your AssetManager implementation.'\n\n  ###*\n  Load a `Music` file.\n\n  @method loadSound\n  @param paths {String|Array<String>} The path(s) (URL[s]) to attempt to load the sound from.\n\n  The paths will be attempted to load in the order of the array, if an array is specified.\n  ###\n  loadMusic: (paths) ->\n    throw new Error 'Unimplemented AssetManager::loadMusic was called; this method must be overridden in your AssetManager implementation.'\n\n  ###*\n  Pre-load all assets (textures, sounds, music, text, etc) from a pack of assets.\n\n  @method preload\n  @param pack {Object} Container of asset definitions.\n\n  @param [pack.textures] {Object}\n  Example:\n      textures: {\n        bullet: 'assets/bullet.png',\n        ship: 'assets/ship.png'\n      }\n\n  @param [pack.sheets] {Object}\n  Example:\n      sheets: {\n        tileset: ['assets/tileset.png', 20, 20],\n        packedTextures: 'assets/packedTextures.json'\n      }\n\n  @param [pack.sounds] {Object}\n  Example:\n      sounds: {\n        shoot: ['assets/pew.ogg', 'assets/pew.mp3', 'assets/pew.m4a'],\n        boom: ['assets/boom.ogg', 'assets/boom.mp3', 'assets/boom.m4a']\n      }\n\n  @param [pack.music] {Object}\n  Example:\n      music: {\n        menu: ['assets/menu.ogg', 'assets/menu.mp3', 'assets/menu.m4a'],\n        battle: ['assets/battle.ogg', 'assets/battle.mp3', 'assets/battle.m4a']\n      }\n\n  @param handlers {Object}\n  @param handlers.error {Function}\n  Callback that excutes if an asset fails to load.\n\n  Callback Arguments:\n\n  - `src` (`String`) -- the path of the asset that failed to load.\n\n  Example:\n      var errorCallback = function (src) {\n        cg.error(src + ' failed to load!');\n      };\n\n  @param handlers.progress {Function}\n  Callback that executes whenever a single asset from the pack is loaded.\n\n  Callback Arguments:\n\n  - `src` (`String`) -- the path of the asset that failed to load.\n  - `asset` (`Texture|Sound|Music|String`) -- the final loaded version of the asset.\n  - `loaded` (`Number`) -- the number of assets that have been loaded, including the one that triggered this callback.\n  - `count` (`Number`) -- the total number of assets in the pack.\n\n  Example:\n      var progressCallback = function (src, asset, loaded, asset_count) {\n        cg.log('Loaded asset \"' + src + '\"');\n        cg.log('Loaded ' + loaded + ' out of ' + count + ' assets.');\n      };\n\n  @param handlers.complete {Function}\n  Callback that executes whenever a single asset from the pack is loaded.\n\n  Callback Arguments:\n\n  None.\n\n  Example:\n      var completeCallback = function () {\n        cg.log('Preloading complete!');\n      };\n\n  @param [concurrency=1] {Number} The number of files to load simultaneously.\n\n  @example\n      var assets = {\n        textures: {\n          bullet: 'assets/bullet.png',\n          ship: 'assets/ship.png'\n        },\n        sounds: {\n          shoot: ['assets/pew.ogg', 'assets/pew.mp3', 'assets/pew.m4a'],\n          boom: ['assets/boom.ogg', 'assets/boom.mp3', 'assets/boom.m4a']\n        },\n        music: {\n          menu: ['assets/menu.ogg', 'assets/menu.mp3', 'assets/menu.m4a'],\n          battle: ['assets/battle.ogg', 'assets/battle.mp3', 'assets/battle.m4a']\n        },\n        json: {\n          level1: 'assets/level1.json',\n          level2: 'assets/level2.json',\n          enemyTypes: 'assets/enemyTypes.json'\n        },\n        sheets: {\n          tileset: ['assets/tileset.png', 20, 20]\n        }\n      };\n\n      var callbacks = {\n        error: function (src) {\n          cg.error('Failed to load ' + src);\n        },\n        progress: function (src, asset, loaded, asset_count) {\n          cg.log('Loaded asset \"' + src + '\"');\n          cg.log('Loaded ' + loaded + ' out of ' + count + ' assets.');\n        },\n        complete: function () {\n          cg.log('Preloading complete!');\n        }\n      };\n\n      cg.assets.preload(assets, callbacks);\n  ###\n  preload: (pack, handlers, concurrency=1) ->\n    music_count = cg.util.sizeOf(pack.music)\n    sound_count = cg.util.sizeOf(pack.sounds)\n    sheet_count = cg.util.sizeOf(pack.sheets)\n    texture_count = cg.util.sizeOf(pack.textures)\n    font_count = cg.util.sizeOf(pack.fonts)\n    text_count = cg.util.sizeOf(pack.text)\n    json_count = cg.util.sizeOf(pack.json)\n    asset_count = texture_count + sound_count + music_count + sheet_count\n\n    loaded = 0\n\n    cg.log 'Pre-loading assets...'\n\n    assets = []\n\n    getSoundData = (asset) =>\n      data = {}\n\n      switch typeof asset.data\n        when 'string'\n          data.paths = asset.data\n        when 'object'\n          if asset.data.paths?\n            data.paths = asset.data.paths\n          else # array\n            data.paths = asset.data\n\n      if typeof data.paths is 'string'\n        data.paths = data.paths\n\n      if typeof asset.data.numChannels is 'number'\n        data.numChannels = asset.data.numChannels\n\n      if typeof asset.data.volume is 'number'\n        data.volume = asset.data.volume\n      else\n        data.volume = 1\n\n      return data\n\n    assets.push ({name:name, data:data, type:'music'} for own name,data of pack.music)...\n    loadMusic = (asset, cb) =>\n      done = (music) =>\n        @music[asset.name] = music\n        ++loaded\n        handlers.progress music.path, music, loaded, asset_count\n        cb()\n\n      data = getSoundData asset\n\n      @loadMusic(data.paths, data.volume).then (music) =>\n        done music\n      , (err) =>\n        music = {}\n        music.play = __NOOP__ # Dummy play function\n        music.stop = __NOOP__ # Dummy stop function\n        music.path = 'DUMMY('+data.paths+')'\n        handlers.error data.paths\n        done music\n\n    assets.push ({name:name, data:data, type:'sound'} for own name,data of pack.sounds)...\n    loadSfx = (asset, cb) =>\n      done = (sound) =>\n        @sounds[asset.name] = sound\n        ++loaded\n        handlers.progress sound.path, sound, loaded, asset_count\n        cb()\n\n      data = getSoundData asset\n\n      @loadSound(data.paths, data.volume, data.numChannels).then (sound) =>\n        done sound\n      , (err) =>\n        sound = {}\n        sound.play = __NOOP__ # Dummy play function\n        sound.stop = __NOOP__ # Dummy stop function\n        sound.path = 'DUMMY('+data.paths+')'\n        handlers.error data.paths\n        done sound\n\n    # collect Spritesheets:\n    assets.push ({name:name, data:data, type:'sheet'} for own name,data of pack.sheets)...\n    loadSpritesheet = (asset, cb) =>\n      done = (sheet) =>\n        @sheets[asset.name] = sheet\n        ++loaded\n        handlers.progress asset.data, sheet, loaded, asset_count\n        cb()\n\n      if cg.util.isArray asset.data\n        [path, tileW, tileH] = asset.data\n      else\n        path = asset.data\n\n      @loadSpritesheet(path, tileW, tileH).then (sheet) =>\n        done sheet\n      , (sheet) =>\n        handlers.error path\n        cb sheet\n\n    # collect GFX:\n    assets.push ({name:name, path:path, type:'texture'} for own name,path of pack.textures)...\n    loadGfx = (asset, cb) =>\n      done = (texture) =>\n        @textures[asset.name] = texture\n        ++loaded\n        handlers.progress texture.path, texture, loaded, asset_count\n        cb()\n\n      @loadTexture(asset.path).then (texture) =>\n        done texture\n      , (texture) =>\n        handlers.error asset.path\n        cb texture\n\n    # collect Fonts:\n    assets.push ({name:name, path:path, type:'font'} for own name,path of pack.fonts)...\n    loadFont = (asset, cb) =>\n      done = (font) =>\n        @fonts[asset.name] = font\n        ++loaded\n        handlers.progress font.path, font, loaded, asset_count\n        cb()\n\n      @loadBitmapFont(asset.path).then (font) =>\n        done font\n      , (font) =>\n        handlers.error asset.path\n        cb font\n\n    # collect Text:\n    assets.push ({name:name, path:path, type:'text'} for own name,path of pack.text)...\n    loadText = (asset, cb) =>\n      done = (text) =>\n        @text[asset.name] = text\n        ++loaded\n        handlers.progress asset.path, text, loaded, asset_count\n        cb()\n\n      @loadText(asset.path).then (text) =>\n        done text\n      , (text) =>\n        handlers.error asset.path\n        cb text\n\n    # collect Text:\n    assets.push ({name:name, path:path, type:'json'} for own name,path of pack.json)...\n    loadJSON = (asset, cb) =>\n      done = (json) =>\n        @json[asset.name] = json\n        ++loaded\n        handlers.progress asset.path, json, loaded, asset_count\n        cb()\n\n      @loadJSON(asset.path).then (json) =>\n        done json\n      , (json) =>\n        handlers.error asset.path\n        cb json\n\n    # TODO: Remove async dependency; it's huge for just using this one feature:\n    async.eachLimit assets, concurrency, (asset, cb) =>\n      cg.log \"loading #{asset.type} #{asset.path ? asset.data?.paths ? asset.data}\"\n      switch asset.type\n        when 'sheet'\n          loadSpritesheet asset, cb\n        when 'texture'\n          loadGfx asset, cb\n        when 'text'\n          loadText asset, cb\n        when 'json'\n          loadJSON asset, cb\n        when 'font'\n          loadFont asset, cb\n        when 'sound'\n          loadSfx asset, cb\n        when 'music'\n          loadMusic asset, cb\n        else\n          cb 'AssetManager: Unexpected asset type: ' + asset.type\n    , (asset) =>\n      if asset\n        handlers.error asset.path\n      else\n        handlers.complete @\n\nmodule.exports = AssetManager\n",
    "cg = require 'cg'\nModule = require 'Module'\nTween = require 'Tween'\nHasSignals = require 'util/HasSignals'\nActor = require 'Actor'\n\n###*\nTODOC\n\n@class cg.Group\n###\n\n# TODO: Maybe use Lazy.js (http://danieltao.com/lazy.js/).\n\nchainableMethodNames = [\n  'pause'\n  'resume'\n  'destroy'\n  'on'\n  'once'\n  'off'\n  'emit'\n  'halt'\n]\n\nmakeChainable = (name) ->\n  return ->\n    # Iterate backwards to prevent issues when items are removed.\n    idx = @length\n    while idx--\n      @[idx][name] arguments...\n    return @\n\nchainables = {}\n\nfor name in chainableMethodNames\n  chainables[name] = makeChainable name\n\n###*\n@method each\n###\neach = (func, args...) ->\n  if typeof func is 'string'\n    for obj,i in @ by -1\n      obj[func] args...\n  else\n    for obj,i in @ by -1\n      func.call obj, i, obj\n  return @\n\n###*\n@method map\n###\nmap = (func, args...) ->\n  if typeof func is 'string'\n    return (obj[func](args...) for obj in @ by -1)\n  else\n    return (func.call(obj, i, obj) for obj in @ by -1)\n\n###*\n@method tween\n###\ntween = (props) ->\n  return new Tween @, props\n\n###*\n@method delay\n###\ndelay = (time, func) ->\n  t = new Tween @,\n    duration: time\n    immediate: false\n  t.start().then func\n  return t\n\n###*\n@method hide\n###\nhide = (arg, cb) ->\n  params =\n    values: alpha: 0\n\n  return Actor::__hideOrShow.call @, arg, params, ->\n    @set 'visible', false\n  , cb\n\n###*\n@method show\n###\nshow = (arg, cb) ->\n  @set 'visible', true\n  params =\n    values: alpha: 1\n  return Actor::__hideOrShow.call @, arg, params, null, cb\n\n__add = (group, subgroup, actor) ->\n  group.add actor\n\n__remove = (group, subgroup, actor) ->\n  # Only remove actor if none of our subgroups contain it\n  for sg in group.__subGroups when sg isnt subgroup\n    return  if actor in subgroup\n  group.remove actor\n\ngroupMethods =\n  ###*\n  @method set\n  ###\n  set: (args...) ->\n    if args.length is 1\n      values = args[0]\n    else\n      values = {}\n      values[args[0]] = args[1]\n\n    for actor, i in @\n      for own key, val of values\n        if typeof val is 'function'\n          actor[key] = val.call actor, i, actor\n        else\n          actor[key] = val\n    return @\n\n  ###*\n  @method add\n  ###\n  add: (val) ->\n    tail = @length-1\n    while tail >= 0\n      tval = @[tail]\n      break  if val > tval\n      return @  if val is tval\n      --tail\n    @splice tail+1, 0, val\n\n    @_groupSignals.emit 'add', @, val\n    return @\n\n  ###*\n  @method addAll\n  ###\n  addAll: (array) ->\n    for actor in array\n      @add actor\n    return @\n\n  ###*\n  @method addGroup\n  ###\n  addGroup: (group) ->\n    return  if group in @__subGroups\n    @__subGroups.push group\n    # Array::push.apply @, group\n    @addAll group\n    @_groupSignals.on group._groupSignals, 'add', @__add\n    @_groupSignals.on group._groupSignals, 'remove', @__remove\n\n    @_groupSignals.emit 'addGroup', group\n    return @\n\n  ###*\n  @method remove\n  ###\n  remove: (actor) ->\n    position = @indexOf actor\n    return @  if position < 0\n\n    @splice position, 1\n\n    @_groupSignals.emit 'remove', @, actor\n    return @\n\n  ###*\n  @method removeGroup\n  ###\n  removeGroup: (group) ->\n    groupIdx = @__subGroups.indexOf group\n    return  if groupIdx < 0\n\n    @__subGroups.splice groupIdx, 1\n\n    for actor in group\n      @remove actor\n\n    @_groupSignals.off group._groupSignals, 'add', @__add\n    @_groupSignals.off group._groupSignals, 'remove', @__remove\n    @_groupSignals.emit 'removeGroup', group\n    return @\n\n  ###*\n  @method contains\n  ###\n  contains: (actor) -> @indexOf(actor) >= 0\n\n  ###*\n  Create a new group containing only members that belong to both groups.\n  @method intersect\n  ###\n  intersect: (other) ->\n    g = Group.create()\n\n    for actor in other\n      g.add actor  if @contains actor\n\n    return g\n\n  ###*\n  @method dispose\n  ###\n  dispose: ->\n    # Remove all links associated with this group.\n\n    # Clear out any associated groups' actors:\n    for actor in @\n      @_groupSignals.emit 'remove', @, actor\n    \n    @_groupSignals.emit '__destroy__'\n    @length = 0\n\n# A group is actually an array with special properties.\nGroup =\n  # intersect: (groups...) ->\n  #   if groups.length is 0\n  #     return Group.empty\n\n  #   g = Group.create()\n  #   for group,i in groups[0...groups.length-1]\n  #     for otherGroup in groups[(i+1)..]\n  #       for actor in otherGroup\n\n  #       g.add actor\n\n  create: (args...) ->\n    g = []\n    g._groupSignals = Object.create HasSignals\n    g._isGroup = true\n    g.__subGroups = []\n\n    g.each = each\n    g.map = map\n    g.tween = tween\n    # g.delay = delay\n    g.hide = hide\n    g.show = show\n    g.__add = __add.bind g, g\n    g.__remove = __remove.bind g, g\n    for own name, method of chainables\n      g[name] = method\n\n    for own name, method of groupMethods\n      g[name] = method\n\n    for arg in args\n      if not cg.util.isArray arg\n        g.add arg # We assume non-array, non-group arguments are single actors.\n      else\n        if arg._isGroup\n          g.addGroup arg\n        else\n          g.addAll arg\n\n    return g\n\nGroup.empty = Group.create()\n\nmodule.exports = Group\n",
    "var Module,\n    moduleKeywords,\n    inherit;\n\ninherit = function inherit(child, parent) {\n  for (var key in parent) {\n    if (Object.hasOwnProperty.call(parent, key)) child[key] = parent[key];\n  }\n\n  function ctor() {\n    this.constructor = child;\n  }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  child.__super__ = parent.prototype;\n  return child;\n};\n\nmoduleKeywords = ['onMixinStatic', 'onMixin', 'constructor'];\n\n/**\n* TODOC\n*\n* @class cg.Module\n*/\nModule = (function() {\n\n  function Module() {}\n\n  Module.__mixinStatic = function(obj) {\n    var key;\n\n    for (key in obj) {\n      if (moduleKeywords.indexOf(key) >= 0) continue;\n      this[key] = obj[key];\n    }\n\n    if (obj.onMixinStatic != null) {\n      obj.onMixinStatic.call(this);\n    }\n    return this;\n  };\n\n  Module.mixinStatic = function () {\n    var i;\n    for (i=0; i<arguments.length; ++i) {\n      this.__mixinStatic(arguments[i]);\n    }\n  }\n\n  Module.__mixin = function(obj) {\n    var key;\n\n    for (key in obj) {\n      if (moduleKeywords.indexOf(key) >= 0) continue;\n      this.prototype[key] = obj[key];\n    }\n\n    if (obj.onMixin != null) {\n      obj.onMixin.call(this);\n    }\n    return this;\n  };\n\n  Module.mixin = function () {\n    var i;\n    for (i=0; i<arguments.length; ++i) {\n      this.__mixin(arguments[i]);\n    }\n  }\n\n  Module.prototype.__mixin = function(obj) {\n    var key;\n\n    for (key in obj) {\n      if (moduleKeywords.indexOf(key) >= 0) continue;\n      this[key] = obj[key];\n    }\n\n    if (obj.onMixin != null) {\n      obj.onMixin.call(this);\n    }\n    return this;\n  };\n\n  Module.prototype.mixin = function () {\n    var i;\n    for (i=0; i<arguments.length; ++i) {\n      this.__mixin(arguments[i]);\n    }\n  }\n\n  Module.defineProperty = function () {\n    var args = [],\n        i;\n\n    args.push(this.prototype);\n    args.push.apply(args, arguments);\n\n    Object.defineProperty.apply(Object, args);\n  }\n\n  Module.prototype.defineProperty = function () {\n    var args = [],\n        i;\n\n    args.push(this);\n    args.push.apply(args, arguments);\n\n    Object.defineProperty.apply(Object, args);\n  }\n\n  Module.extend = function(name, props) {\n    var child, key, parent, val, __wrapped__;\n    parent = this;\n    __wrapped__ = function(superFunc, func) {\n      return function() {\n        var ret, prevSuper;\n        prevSuper = this._super;\n        this._super = superFunc;\n        ret = func.apply(this, arguments);\n        this._super = prevSuper;\n        return ret;\n      };\n    };\n\n    // Sometimes, you just gotta get your hands dirty:\n    if (!props.hasOwnProperty('constructor')) {\n      child = (new Function('inherit', 'parent',\n        \"var \"+name+\" = function \"+name+\" () {\\n\" +\n        \"  var ref = \"+name+\".__super__.constructor.apply(this, arguments);\\n\" +\n        \"  return ref;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"inherit(\"+name+\", parent);\\n\" +\n        \"return \"+name+\";\"\n      ))(inherit, parent);\n    } else {\n      child = (new Function('inherit', 'parent', 'ctor',\n        \"var \"+name+\" = function \"+name+\" () {\\n\" +\n        \"  this._super = \"+name+\".__super__.constructor;\\n\" +\n        \"  var ref = ctor.apply(this, arguments);\\n\" +\n        \"  delete this._super;\\n\" +\n        \"  return ref;\\n\" +\n        \"};\\n\" +\n        \"\\n\" +\n        \"inherit(\"+name+\", parent);\\n\" +\n        \"return \"+name+\";\"\n      ))(inherit, parent, props.constructor);\n    }\n\n    for (key in props) {\n      if (!props.hasOwnProperty(key)) continue;\n      val = props[key];\n      if ((typeof val === 'function') && (typeof parent.prototype[key] === 'function')) {\n        child.prototype[key] = __wrapped__(parent.prototype[key], val);\n      } else {\n        child.prototype[key] = val;\n      }\n    }\n    return child;\n  };\n\n  return Module;\n})();\n\nmodule.exports = Module;\n",
    "cg = require 'cg'\nActor = require 'Actor'\nTweenManager = require 'TweenManager'\n\n# TODO: Automatic scene asset unloading\n\n###*\nTODOC\n\nA scene is meant to be a stand-alone interactivity zone of a game.\nAll Apps extend Scene, and therefore scenes can have children scenes.\nA scene has its own independent tween system to allow for\n independent sets of controls for different menus/minigames/etc.\n\n@class cg.Scene\n###\nclass Scene extends Actor\n  Object.defineProperty @::, 'isScene',\n    value: true\n    writable: false\n\n  constructor: ->\n    super\n\n    @tweener ?= new TweenManager\n    @paused ?= false\n\n    @currentTime = 0\n  __preload: (assets) ->\n    if not @assets?\n      @preloaded = true\n      @preloadComplete()\n      return\n\n    @preloaded = false\n    @pause()\n    cg.assets.preload @assets,\n      error: => @preloadError arguments...\n      progress: => @preloadProgress arguments...\n      complete: =>\n        @preloaded = true\n        @resume()\n        @preloadComplete()\n\n  preload: ->\n    if typeof @assets isnt 'string'\n      @__preload(@assets)\n    else\n      cg.assets.loadJSON(@assets).then (assets) =>\n        @assets = assets\n        @__preload(@assets)\n      , (err) =>\n        throw new Error 'Failed to load asset pack JSON: \"' + @assets + '\": ' + err.message\n\n  preloadError: (src) ->\n    cg.error 'Failed to load asset ' + src\n  preloadProgress: (src, data, loaded, count) ->\n    cg.log 'Loaded ' + src\n  preloadComplete: ->\n\n  update: ->\n    @tweener.update()\n\n    super\n\n    # TODO: Can we do independent timeScales per-scene but maintain determinism?\n    @currentTime += cg.dt\n\nmodule.exports = Scene\n",
    "cg = require 'cg'\nSprite = require 'rendering/Sprite'\nActor = require 'Actor'\nHasSignals = require 'util/HasSignals'\nHasPlugins = require 'util/HasPlugins'\n\n###*\nA `Sprite` with all of `Actor` mixed in.\n\nIn other words, an `Actor` with a `Texture`.\n\n@class cg.SpriteActor\n@extends cg.rendering.Sprite\n@uses cg.Actor\n\n@constructor\n@param [properties.texture] {String|Texture}\n(see [`texture`](#property_texture) property)\n\nIf [`anim`](#property_anim) is set, this will get overwritten by the texture of the current frame of `anim`.\n@param [properties.anim] {Animation}\n(see [`anim`](#property_anim) property)\n###\n\n###*\nThe animation this `Sprite` uses, if any.\n\nWhenever the animation's frame changes, this `Sprite`s texture is updated automatically.\n@property anim {Animation}\n###\nclass SpriteActor extends Sprite\n  @mixin Actor::\n  @mixin HasPlugins\n  constructor: (properties={}) ->\n    Actor::__defineProperties.call @\n    \n    @__plugins_preInit()\n    # Internally used, unique ID:\n    Object.defineProperty @, '__internalID', value: cg.getNextID()\n\n    tex = properties.texture or @texture\n\n    super tex\n\n    delete properties.texture\n    @__applyProperties properties\n\n    if @anim and @texture != @anim.texture\n      @texture = @anim.texture\n    @__plugins_postInit()\n\n  update: ->\n    Actor::update.call @\n\n    if @anim\n      @anim.update()\n      if @texture != @anim.texture\n        @texture = @anim.texture\n\n    return\n\n  # HACK: Mixing in Actor overrides __updateTransform (and any other methods)\n  __updateTransform: Sprite::__updateTransform\n\nmodule.exports = SpriteActor\n",
    "cg = require 'cg'\nActor = require 'Actor'\n\nexample = ->\n  text = @addChild new cg.Text 'Hello, world!',\n    font: 'chunky'\n    align: 'center'\n    x: cg.width/2\n    y: cg.height/2\n\n###*\nTODOC\n\n@class cg.Text\n@extends cg.Actor\n###\nclass Text extends Actor\n  @defaults:\n    font: '10pt sans-serif'\n    color: 'white'\n    align: 'left'\n  \n  @defineProperty 'string',\n    get: -> @__string\n    set: (val) ->\n      return  unless val isnt @__string\n      @__string = val?.toString() ? ''\n      if @__textItem instanceof cg.text.BitmapText\n        @__textItem.string = @__string\n      else\n        @__textItem.text = @__string\n\n      @__textItem.updateText()\n  \n  @defineProperty 'font',\n    get: -> @__font\n    set: (val) ->\n      if not (typeof val is 'string')\n        # We assume it's a loaded font.\n        if not val instanceof cg.text.BitmapFont\n          throw new Error 'Expected cg.text.BitmapFont or String for font.'\n        @__font = val\n      else\n        font = cg.assets.fonts[val]\n        if not font?\n          # We assume it's a PixiText style.font string.\n          @__font = val\n        else\n          @__font = font\n\n  @defineProperty 'align',\n    get: -> @__align\n    set: (val) ->\n      return  unless val isnt @__align\n      @__align = val\n      @__updateAlignment()\n\n  @defineProperty 'color',\n    get: -> return @__color\n    set: (val) ->\n      @__color = val\n      return  unless @__textItem? \n      return  if @__textItem instanceof cg.text.BitmapText\n      @__textItem.style.fill = @__color\n      @__textItem.updateText()\n\n  @defineProperty 'width',\n    get: -> @__width ? @__textItem.width\n    set: (val) ->\n      @__width = val\n      if @__textItem instanceof cg.text.BitmapText\n        # TODO WORD WRAP FOR BITMAPTEXT\n      else\n        @__textItem.style.wordWrap = @__width?\n        @__textItem.style.wordWrapWidth = @__width\n        @__textItem.updateText()\n\n  @defineProperty 'height',\n    get: -> @__textItem.height\n\n  @defineProperty 'left',\n    get: -> @x + @__textItem.left\n    set: (val) -> @x = val - @__textItem.left\n\n  @defineProperty 'right',\n    get: -> @x + @__textItem.right\n    set: (val) -> @x = val - @__textItem.right\n  \n  @defineProperty 'top',\n    get: -> @y + @__textItem.top\n    set: (val) -> @y = val - @__textItem.top\n  \n  @defineProperty 'bottom',\n    get: -> @y + @__textItem.bottom\n    set: (val) -> @y = val - @__textItem.bottom\n\n  __buildTextItem: ->\n    string = @string ? ''\n\n    @removeChild @__textItem__  if @__textItem__?\n    \n    if @font instanceof cg.text.BitmapFont\n      @__textItem__ = @addChild new cg.text.BitmapText @font, string\n    else\n      @__textItem__ = @addChild new cg.text.PixiText string,\n        font: @font ? Text.defaults.font\n        fill: @color ? Text.defaults.color\n    @__updateAlignment()\n\n  @defineProperty '__textItem',\n    get: ->\n      @__buildTextItem()  if not @__textItem__\n      return @__textItem__\n\n  __updateAlignment: ->\n    return  unless @__textItem?\n    \n    if @__textItem instanceof cg.text.BitmapText\n      @__textItem.alignment = @align\n      @__textItem.updateText()\n    else\n      switch @align\n        when 'center'\n          @__textItem.anchorX = 0.5\n        when 'right'\n          @__textItem.anchorX = 1\n        else\n          @__textItem.anchorX = 0\n\n  constructor: (string, params={}) ->\n    for own k,v of Text.defaults\n      params[k] ?= v\n\n    super params\n\n    @string = string\n\nmodule.exports = Text",
    "cg = require 'cg'\nTexture = require 'rendering/textures/Texture'\nRectangle = require 'rendering/core/Rectangle'\nAnimation = require 'Animation'\n\n###*\nArray of `Texture`s created from a single `Texture`, split up into fixed-sized pieces\n\nYou **must** use [`cg.TileSheet.create`](#method_create) to create a new `TileSheet`; \ncalling `new TileSheet` will throw an exception.\n\n@class cg.TileSheet\n###\nclass TileSheet\n  constructor: ->\n    throw new Error 'Use cg.TileSheet.create(...) to create a new TileSheet.'\n\n  ###*\n  Create a new `TileSheet` array.\n\n  @static\n  @method create\n  @param texture {cg.Texture} The texture to chop up into smaller texture tiles.\n  @param tileW {Number} The width of a single texture tile.\n  @param tileH {Number} The height of a single texture tile.\n  @return {cg.TileSheet}\n  ###\n  @create: (texture, tileW, tileH) ->\n    if not (tileW > 0 and tileH > 0)\n      throw new Error 'TileSheet tile width and height must be positive, non-zero values'\n\n    if typeof texture is 'string'\n      texture = cg.assets.textures[texture]\n\n    if not texture.baseTexture\n      throw new Error 'Invalid Texture passed to TileSheet.create'\n    \n    textures = []\n    ox = 0\n    fx = texture.frame.x\n    fy = texture.frame.y\n    fw = texture.frame.width\n    fh = texture.frame.height\n    bt = texture.baseTexture\n    oy = 0\n    loop\n      break if oy >= fh\n      ox = 0\n      loop\n        break if ox >= fw\n        textures.push new Texture bt, new Rectangle fx+ox, fy+oy, tileW, tileH\n        ox += tileW\n\n      oy += tileH\n\n    ###*\n    Create an [`Animation`](cg.Animation.html) from a sequence of tile numbers.\n\n    @method anim\n    @param frameIndexes {Number|Array(Number|Array[2](Number))}\n    An array of frames, represented by integer indexes of this `TileSheet`.\n    \n    The format of this parameter is identical to the first parameter to the [`Animation` constructor](cg.Animation.html),\n    except any integer values are treated as index values into this `TileSheet` array.\n\n    For instance, the sequence `[0, 1, 2]` will become `[sheet[0], sheet[1], sheet[2]]`, where `sheet` is the `TileSheet`\n    that `anim` was called on.\n    \n    Any non-integer frame values will be passed as-is to the [`Animation` constructor](cg.Animation.html), allowing\n    you to mix explicit texture names or `Texture` values as frames along with integer values.\n\n    @param [frameLength=32] {Number(milliseconds)} Default duration for each frame.\n    @param [looping=true] {Boolean} Whether the animation should repeat endlessly.\n\n    @return {cg.Animation} The desired `Animation` sequence.\n    ###\n    textures.anim = (frameIndexes, frameLength=32, looping=true) ->\n      if typeof frameIndexes is 'number'\n        frameIndexes = [frameIndexes]\n      \n      frames = []\n      for frame in frameIndexes\n        if (typeof frame) is 'number'\n          frames.push textures[frame]\n        else if (typeof frames[1]) is 'number'\n          frames.push [textures[frame[0]], frame[1]]\n        else\n          frames.push frame\n\n      return new Animation frames, frameLength, looping\n      \n    Object.defineProperty textures, 'isTileSheet',\n      value: true\n      writable: false\n      configurable: true\n        \n    return textures\n\nmodule.exports = TileSheet",
    "cg = require 'cg'\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\nPromises = require 'util/Promises'\n\n###*\n\"Ease\" an object's numeric property (or number of properties) from one value to another.\n@class cg.Tween\n@extends cg.Module\n@uses cg.util.HasSignals\n@uses Promise\n\n@constructor\n@param object {Object|Array} The object(s) whose properties will be tweened.\n@param [params] {Object} Parameters that define how the `Tween` should behave (see below).\n@param [params.values] {Object}\nA key-value pair of the final values to be applied to `object`.\n\nAny `object[key]` that is anything but a number or function will be ignored.\n\nProperties can either be simple numeric values, or accessor functions in the following style:\n\n```javascript\nobj.value(100); // set value to 100\nobj.value();    // returns 100\n```\n\nAny property may also be assigned a function instead of a numerical value:\n\n```javascript\n// Tween object1.x to 50, object2.x to 100, and object3.x to 150\nnew Tween([object1, object2, object3], {\n  values: {\n    x: function (index, object) {\n      // This function is called once for each object this Tween affects\n      //  as soon as `start()` is called. Subsequent calls to `start()`\n      //  *will* call this function again for each object.\n\n      // The value of `this` is the current object being iterated over.\n\n      // The first argument passed is the index into the array corresponding to the object.\n      // The second argument is the object.\n\n      // If only a single object was passed, index is always 0.\n\n      // Your function *must* return a numerical value:\n      return index * 50;\n    }\n  }\n});\n```\n@param [params.duration=`Tween.defaults.duration=500`] {Number(milliseconds)|Function} The span of time over which `object`'s `value`s should be tweened.\n@param [params.easeFunc=`Tween.defaults.easeFunc='quad.inout'`] {String|Function} TODOC\n@param [params.delay=0] {Number(milliseconds)|Function} The amount of time after `start` is called before the tween should begin.\n@param [params.relative=false] {Boolean} Whether `values` should represent a delta to be added to `object`'s current values, rather than the absolute final values.\n@param [params.tweener=cg.tweener] {TweenManager} The `TweenManager` to be used to drive this `Tween`.\n@param [params.immediate=true] {Boolean} If true, `this.start()` will be called immediately.\n@param [params.context] {Object} If specified, this will be the value of `this` inside the body of promises returned by calling [`then`](#method_then).\n###\nclass Tween extends Module\n  @mixin HasSignals\n  @__easeFuncs: {}\n  @defaults:\n    duration: 500\n    easeFunc: 'quad.inout'\n\n  ###*\n  Globally add a custom ease function that can be utilized by referring to a name (string) when\n  setting the `easeFunc` parameter to the `Tween` constructor.\n\n  @static\n  @method addEaseFunc\n  @param name {String}\n  @param func {Function}\n  ###\n  @addEaseFunc: (name, func) ->\n    if @__easeFuncs[name]?\n      cg.warn 'Tween.addEaseFunc: overwriting existing \"' + name + '\" function.'\n    @__easeFuncs[name] = func\n\n  constructor: (@_objects, property, value, duration, easeFunc, delay) ->\n    @_eventObjects = @_objects\n    if not cg.util.isArray @_objects\n      @_objects = [@_objects]\n\n    if typeof property is 'object'\n      params = property\n    else\n      values = {}\n      values[property] = value\n      params =\n        values: values\n        duration: duration\n        easeFunc: easeFunc\n        delay: delay\n    \n    @setParams params\n\n  __clearParams: ->\n    for paramName in ['values', 'duration', 'easeFunc', 'delay', 'relative', 'tweener', 'immediate']\n      delete @[paramName]\n\n  setParams: (params) ->\n    @__clearParams()\n\n    {@values, @duration, @easeFunc, @delay, @relative, @tweener, @immediate} = params\n\n    @values ?= {}\n    @duration ?= Tween.defaults.duration\n    @easeFunc ?= Tween.defaults.easeFunc\n    if typeof @easeFunc is 'string'\n      easeFuncName = @easeFunc\n      @easeFunc = Tween.__easeFuncs[easeFuncName]\n      if not @easeFunc?\n        @easeFunc = Tween.Quad.InOut\n        cg.warn 'Tween: unknown ease function: ' + easeFuncName '; available ease function names are:'\n        cg.warn ('  ' + name for own name,f of Tween.__easeFuncs).join '\\n'\n\n    @delay ?= 0\n    @relative ?= false\n    @tweener ?= cg.tweener\n    @immediate ?= true\n    @active = false\n\n    @start()  if @immediate\n\n  ###*\n  Begin tweening `object`'s `values`.\n\n  @method start\n  @chainable\n  ###\n  ###*\n  Fired *immediately* when `this.start()` is called.\n  @event start(object)\n  @param object {Object} `object` before its values have started tweening\n  ###\n  start: ->\n    # HACKish: quack like a promise\n    @_deferred = new Promises.Deferred @_eventObjects\n\n    ###*\n    TODOC\n    @method then\n    ###\n    # @then = =>\n    #   proxy = cg.util.DeferredProxy.create @_eventObjects, @_deferred.promise\n    #   return proxy.then arguments...\n\n    @then = @_deferred.promise.then\n\n    @emit 'start', @_eventObjects\n\n    @active = true\n\n    @removed = false\n\n    @tweener.add @\n\n    @time = 0\n\n    @_initialValues = []\n    @_finalValues = []\n    @_done = []\n    @_durations = []\n    @_totalDone = 0\n\n    if typeof @delay is 'function'\n      @_delays = (@delay.call(obj,i,obj) for obj,i in @_objects)\n\n    if typeof @duration is 'function'\n      @_durations = (@duration.call(obj,i,obj) for obj,i in @_objects)\n\n    for obj,i in @_objects\n      continue  if not obj?\n\n      @_initialValues[i] = {}\n      @_finalValues[i] = {}\n      @_done[i] = false\n\n      for own name,value of @values\n        if not (typeof obj[name] in ['number','function'])\n          cg.warn \"Tween: Property named \\\"#{name}\\\" of #{obj} is of an unsupported type: \\\"#{typeof obj[name]}\\\"; ignoring it!\"\n          cg.warn \"typeof obj: \" + (typeof obj)\n          continue\n        \n        if typeof value is 'function'\n          value = value.call obj, i, obj\n\n        if typeof value is 'string'\n          value = value.trim()\n          relative = true\n          value = parseFloat value\n\n        if typeof obj[name] is 'function'\n          @_initialValues[i][name] = obj[name]()\n        else\n          @_initialValues[i][name] = obj[name]\n\n        if relative or @relative\n          @_finalValues[i][name] = @_initialValues[i][name] + value\n        else\n          @_finalValues[i][name] = value\n\n    return @\n\n  ###*\n  Stop tweening `object`'s `values`.\n  @method stop\n  @chainable\n  ###\n  stop: ->\n    @emit 'removed'\n    @removed = true\n    @active = false\n    return @\n\n  ###*\n  Called by this `Tween`'s associated `TweenManager` each tick.\n\n  @method update\n  @protected\n  @return `true` if this tween has completed\n  ###\n  ###*\n  Fired each tick *immediately after* `object`'s `values` have been updated.\n\n  @event update(object)\n  @param object {Object} `object` after having its values updated for one tick\n  ###\n  update: ->\n    return true  if @removed\n\n    # TODO: We can do better. There should instead be a `timer` object passed in, which can easily be paused/scaled.\n    @time += cg.dt\n\n    for obj,i in @_objects\n      continue  if @_done[i]\n      if not obj?\n        @_done[i] = true\n        ++@_totalDone\n        continue\n\n      delay = @_delays?[i] ? @delay\n      duration = @_durations?[i] ? @duration\n\n      continue  if @time < delay\n\n      delta = cg.math.clamp (@time-delay)/duration, 0, 1\n      amount = @easeFunc delta\n\n      if delta >= 1\n        @_done[i] = true\n        ++@_totalDone\n\n      for own name,initial of @_initialValues[i]\n        target = @_finalValues[i][name]\n        val = initial + (target - initial) * amount\n        if typeof obj[name] is 'function'\n          obj[name] val\n        else\n          obj[name] = val\n\n    @emit 'update', @_eventObjects\n\n    if @_totalDone >= @_objects.length\n      @active = false\n      return true\n\n    return false\n\n  _complete: ->\n    return  if @removed\n    @emit 'complete', @_eventObjects\n    @_deferred.resolve @_eventObjects\n    @stop()\n\n  ###*\n  Linear `easeFunc`.\n\n  @static\n  @property Linear\n  ###\n  @Linear: (k) -> k\n\n  @Quake: \n    In: (k) ->\n      return 1  if k is 1\n      return k + cg.rand.normal() * k\n\n    Out: (k) ->\n      return 1  if k is 1\n      return k + cg.rand.normal() * (1-k)\n\n    InOut: (k) ->\n      if k < 0.5\n        Tween.Quake.In(k * 2) * 0.5\n      else\n        Tween.Quake.Out(k * 2 - 1) * 0.5 + 0.5\n\n  @Elastic:\n    ###*\n    [Elastic-In](http://easings.net/#easeInElastic) `easeFunc`\n\n    @static\n    @property Elastic.In\n    ###\n    In: (k) ->\n      s = undefined\n      a = 0.1\n      p = 0.4\n      return 0  if k is 0\n      return 1  if k is 1\n      if not a or a < 1\n        a = 1\n        s = p / 4\n      else\n        s = p * Math.asin(1 / a) / (2 * Math.PI)\n      -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p))\n\n    ###*\n    [Elastic-Out](http://easings.net/#easeOutElastic) `easeFunc`\n\n    @static\n    @property Elastic.Out\n    ###\n    Out: (k) ->\n      s = undefined\n      a = 0.1\n      p = 0.4\n      return 0  if k is 0\n      return 1  if k is 1\n      if not a or a < 1\n        a = 1\n        s = p / 4\n      else\n        s = p * Math.asin(1 / a) / (2 * Math.PI)\n      a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1\n\n    ###*\n    [Elastic-In-Out](http://easings.net/#easeInOutElastic) `easeFunc`\n\n    @static\n    @property Elastic.InOut\n    ###\n    InOut: (k) ->\n      s = undefined\n      a = 0.1\n      p = 0.4\n      return 0  if k is 0\n      return 1  if k is 1\n      if not a or a < 1\n        a = 1\n        s = p / 4\n      else\n        s = p * Math.asin(1 / a) / (2 * Math.PI)\n      return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p))  if (k *= 2) < 1\n      a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1\n\n  @Quad:\n    ###*\n    [Quad-In](http://easings.net/#easeInQuad) `easeFunc`\n\n    @static\n    @property Quad.In\n    ###\n    In: (k) ->\n      k * k\n\n    ###*\n    [Quad-Out](http://easings.net/#easeOutQuad) `easeFunc`\n\n    @static\n    @property Quad.Out\n    ###\n    Out: (k) ->\n      k * (2 - k)\n\n    ###*\n    [Quad-InOut](http://easings.net/#easeInOutQuad) `easeFunc`\n\n    @static\n    @property Quad.InOut\n    ###\n    InOut: (k) ->\n      return 0.5 * k * k  if (k *= 2) < 1\n      -0.5 * (--k * (k - 2) - 1)\n\n  @Back:\n    ###*\n    [Back-In](http://easings.net/#easeInBack) `easeFunc`\n\n    @static\n    @property Back.In\n    ###\n    In: (k) ->\n      s = 1.70158\n      return k * k * ((s + 1) * k - s)\n\n    ###*\n    [Back-Out](http://easings.net/#easeOutBack) `easeFunc`\n\n    @static\n    @property Back.Out\n    ###\n    Out: (k) ->\n      s = 1.70158\n      return --k * k * ((s + 1) * k + s) + 1\n\n    ###*\n    [Back-InOut](http://easings.net/#easeInOutBack) `easeFunc`\n\n    @static\n    @property Back.InOut\n    ###\n    InOut: (k) ->\n      s = 1.70158 * 1.525\n      if ((k *= 2) < 1)\n        return 0.5 * (k * k * ((s + 1) * k - s))\n      return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2)\n\n  @Bounce:\n    ###*\n    [Bounce-In](http://easings.net/#easeInBounce) `easeFunc`\n\n    @static\n    @property Bounce.In\n    ###\n    In: (k) ->\n       1 - Tween.Bounce.Out(1 - k)\n\n    ###*\n    [Bounce-Out](http://easings.net/#easeOutBounce) `easeFunc`\n\n    @static\n    @property Bounce.Out\n    ###\n    Out: (k) ->\n      if (k < (1 / 2.75))\n        7.5625 * k * k\n      else if (k < (2 / 2.75))\n        7.5625 * (k -= (1.5 / 2.75)) * k + 0.75\n      else if (k < (2.5 / 2.75))\n        7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375\n      else\n        7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375\n\n    ###*\n    [Bounce-InOut](http://easings.net/#easeInOutBounce) `easeFunc`\n\n    @static\n    @property Bounce.InOut\n    ###\n    InOut: (k) ->\n      if (k < 0.5)\n        Tween.Bounce.In(k * 2) * 0.5\n      else\n        Tween.Bounce.Out(k * 2 - 1) * 0.5 + 0.5\n\nTween.addEaseFunc 'linear', Tween.Linear\nTween.addEaseFunc 'quake', Tween.Quake.InOut\nTween.addEaseFunc 'quake.in', Tween.Quake.In\nTween.addEaseFunc 'quake.out', Tween.Quake.Out\nTween.addEaseFunc 'quake.inout', Tween.Quake.InOut\nTween.addEaseFunc 'back.in', Tween.Back.In\nTween.addEaseFunc 'back.out', Tween.Back.Out\nTween.addEaseFunc 'back.inout', Tween.Back.InOut\nTween.addEaseFunc 'bounce.in', Tween.Bounce.In\nTween.addEaseFunc 'bounce.out', Tween.Bounce.Out\nTween.addEaseFunc 'bounce.inout', Tween.Bounce.InOut\nTween.addEaseFunc 'elastic.in', Tween.Elastic.In\nTween.addEaseFunc 'elastic.out', Tween.Elastic.Out\nTween.addEaseFunc 'elastic.inout', Tween.Elastic.Out\nTween.addEaseFunc 'quad.in', Tween.Quad.In\nTween.addEaseFunc 'quad.out', Tween.Quad.Out\nTween.addEaseFunc 'quad.inout', Tween.Quad.InOut\n\nmodule.exports = Tween\n",
    "cg = require 'cg'\n\n# TODO: Maybe a better way for tweens to be controlled is by a more generic Timer? This way groups of tweens\n#  can be controlled by the same timer as well as delays and other time-oriented things.\n\n###*\nTracks, updates, and cleans up active `Tween` instances.\n\n@class cg.TweenManager\n\n@constructor\n###\nclass TweenManager\n  constructor: ->\n    @tweens = []\n    @completedTweens = []\n\n  ###*\n  Add a `Tween` to begin tweening.\n\n  @private\n  @method add\n  ###\n  add: (tween) ->\n    if not (tween in @tweens)\n      @tweens.push tween\n\n  ###*\n  Remove a `Tween` to stop it from tweening.\n  @private\n  @method remove\n  ###\n  remove: (tween) ->\n    tween.stop()\n\n  ###*\n  Update all active tweens associated with this manager.\n  @private\n  @method update\n  ###\n  update: ->\n    for tween in @completedTweens\n      idx = @tweens.indexOf(tween)\n      @tweens.splice(idx, 1)  if idx >= 0\n      tween._complete()\n\n    @completedTweens = []\n\n    for tween in @tweens\n      if tween.update()\n        @completedTweens.push tween\n    \n    return\n\nmodule.exports = TweenManager",
    "Module = require 'Module'\nutil = require 'util/index'\nHasSignals = require 'util/HasSignals'\nHasPlugins = require 'util/HasPlugins'\n\n# TODO: This could do with some nice cleanup...\n\n###*\nReference to this game's [`cg.AssetManager`](cg.AssetManager.html) instance.\n\n@class cg.assets\n###\n\n###*\nReference to this game's [`cg.ui.UIManager`](cg.ui.UIManager.html) instance.\n\n@class cg.ui\n###\n\nNOOP = ->\n\n###*\nThe global `cg.Core` instance.\n\n@class cg.Core\n###\nclass Core extends Module\n  Module: Module\n  Core: Core\n\n  @mixin HasSignals\n  @mixin HasPlugins\n\n  util: util\n  setLogLevel: (lvl) ->\n    levels = [\n      'info'\n      'debug'\n      'warn'\n      'error'\n    ]\n\n    if lvl is 'verbose'\n      i = 0\n    else\n      i = levels.indexOf lvl\n\n    n = 0\n    while n < i\n      name = levels[i]\n      name = 'log'  if name is 'debug'\n      cg[name] = NOOP\n      ++n\n\n    while i < levels.length\n      name = levels[i]\n      name = 'log'  if name is 'debug'\n      cg[name] = console[name].bind(console)\n      ++i\n\n  __defineProperties: ->\n    ###*\n    Hex-formatted RGB value (eg 0xFF0000 is red); setting this will automatically change\n    the color used to clear the screen after each frame rendered.\n\n    @property backgroundColor\n    @type Number\n    ###\n    Object.defineProperty @, 'backgroundColor',\n      get: -> @__backgroundColor\n      set: (val) ->\n        return  if val is @__backgroundColor\n        @stageRoot?.setBackgroundColor val\n        @__backgroundColor = val\n\n    ###*\n    A hint about how the display region of the game should behave, as well as how textures should be filtered.\n\n    There are five valid values:\n\n    * `'aspect'` - compute [`scale`](#property_scale) to fit inside the display area while maintaining an aspect ratio of [`width`](#property_width):[`height`](#property_height).\n    * `'pixel'` - like `'aspect'`, but use a framebuffer of [`width`](#property_width)x[`height`](#property_height) if [`scale`](#property_scale) is not `1`.\n    * `'pixelPerfect'` - like `'pixel'`, but when scaling the framebuffer, use the largest whole-digit scale factor that fits (eg. 1x, 2x, 3x...).\n    * `'fill'` - fill the entire display area ([`width`](#property_width) and [`height`](#property_height) are computed based on [the dimensions of the display container](#method_getDeviceWidth()), and [`scale`](#property_scale)).\n    * `'fillPixel'` - like `'fill'`, but use a framebuffer if [`scale`](#property_scale) is not `1`.\n\n    If `'pixel'`, `'pixelPerfect'`, or `'fillPixel'` is specified, [`textureFilter`](#property_textureFilter)\n    and [`resizeFilter`](#property_resizeFilter) will be set to `'nearest'`, unless explicitly specified.\n\n    @property displayMode\n    @type String\n    @default 'aspect'\n    ###\n    Object.defineProperty @, 'displayMode',\n      get: -> @__displayMode\n      set: (val) ->\n        return  if @__displayMode is val\n        @__displayMode = val\n\n        if val in ['pixel', 'pixelPerfect', 'fillPixel']\n          @__defaultFilter = 'nearest'\n        else\n          @__defaultFilter = 'linear'\n\n        @__needsTriggerResize = true\n\n    ###*\n    The default way textures should be rendered when scaled, stretched, or rotated.\n\n    One of two valid values:\n\n    * `'linear'` - Smooth out textures.\n    * `'nearest'` - Preserve \"pixellyness\" of textures.\n\n    Any textures that don't explicitly set a [`filterMode`](cg.Texture.html#property_filterMode) will inherit this value.\n\n    Changing this value will automatically update all applicable textures before the next frame is rendered.\n\n    **Default**: `'nearest'` if [`displayMode`](#property_displayMode) is `'pixel'`, `'pixelPerfect'`, or `'fillPixel'`; `'linear'` otherwise\n\n    @property textureFilter\n    @type String\n    ###\n    Object.defineProperty @, 'textureFilter',\n      get: -> @__textureFilter ? @__defaultFilter\n      set: (val) ->\n        return  if @__textureFilter is val\n        @__textureFilter = val\n        @__needsTriggerResize = true\n\n    ###*\n    The [`filterMode`](cg.BaseTexture.html#property_filterMode) used on the framebuffer; ignored unless [`displayMode`](#property_displayMode) is `'pixel'` or `'pixelPerfect'`.\n\n    One of two valid values:\n\n    * `'linear'` - Smooth out the stretched framebuffer\n    * `'nearest'` - Preserve \"pixellyness\" of the framebuffer\n\n    @property resizeFilter\n    @type String\n    @default 'nearest'\n    ###\n    Object.defineProperty @, 'resizeFilter',\n      get: -> @__resizeFilter ? 'nearest'\n      set: (val) ->\n        return  if @__resizeFilter is val\n        @__resizeFilter = val\n        @__needsTriggerResize = true\n\n    ###*\n    The virtual width of this game's display area, in game-units (or pixels at 1x scale).\n\n    @property width\n    @type number\n    @default 400\n    ###\n    Object.defineProperty @, 'width',\n      get: -> @__width\n      set: (val) ->\n        return  if @__width is val\n        @__width = val\n        @__needsTriggerResize = true\n\n    ###*\n    The virtual height of this game's display area, in game-units (or pixels at 1x scale).\n\n    @property height\n    @type number\n    @default 240\n    ###\n    Object.defineProperty @, 'height',\n      get: -> @__height\n      set: (val) ->\n        return  if @__height is val\n        @__height = val\n        @__needsTriggerResize = true\n\n    ###*\n    The ratio of the display's actual size in pixels to its virtual size.\n\n    @property scale\n    @type number\n    ###\n    Object.defineProperty @, 'scale',\n      get: -> @__scale\n      set: (val) ->\n        return  if @__scale is val\n        @__scale = val\n        @__needsTriggerResize = true\n\n    ###*\n    Shorthand for `cg.assets.music`\n    @property music\n    ###\n    Object.defineProperty @, 'music',\n      get: -> @assets.music\n\n    ###*\n    Shorthand for `cg.assets.sounds`\n    @property sounds\n    ###\n    Object.defineProperty @, 'sounds',\n      get: -> @assets.sounds\n\n    ###*\n    Shorthand for `cg.assets.textures`\n    @property textures\n    ###\n    Object.defineProperty @, 'textures',\n      get: -> @assets.textures\n\n    ###*\n    Shorthand for `cg.assets.sheets`\n    @property sheets\n    ###\n    Object.defineProperty @, 'sheets',\n      get: -> @assets.sheets\n\n    ###*\n    Shorthand for `cg.assets.json`\n    @property json\n    ###\n    Object.defineProperty @, 'json',\n      get: -> @assets.json\n\n  _newRenderer: -> throw new Error '_newRenderer: unimplemented!'\n\n  constructor: ->\n    @classes = {}\n    @__byID = {}\n\n    @__nextID = 1\n\n  @create: ->\n    instance = new @ arguments...\n    ret = instance.default.bind instance\n\n    for k,v of instance\n      ret[k] = v\n\n    instance.__defineProperties.apply ret\n\n    return ret\n\n  default: (query='') ->\n    query = query.trim()\n\n    if query[0] is '#'\n      return @getActorByID query.substr(1)\n\n    groups = []\n    for className in query.split(' ')\n      className = className.trim()\n      continue  if className.length is 0\n      classGroup = @classes[className]\n      groups.push classGroup  if classGroup?\n\n    if groups.length is 1\n      return groups[0]\n\n    final = cg.Group.create()\n    for group in groups\n      final.addAll group\n    return final\n\n  _setActorByID: (actor, id) ->\n    cg.warn 'Actor with id ' + id + ' already exists; ignoring.'  if @__byID[id]\n    @__byID[id] = actor\n\n  getActorByID: (id) ->\n    @__byID[id]\n\n  getNextID: -> @__nextID++\n\n  init: (params={}) ->\n    @__plugins_preInit()\n\n    ###*\n    Emitted when the user attempts to close the game.\n\n    TODOC\n    @event quitAttempt\n    ###\n    @on 'quitAttempt', => @quit()\n\n    ###*\n    Emitted when the game gains input focus.\n    @event focus\n    ###\n    @on 'focus', =>\n      @__lastCall = Date.now()\n      @_focused = true\n      return\n\n    ###*\n    Emitted when the game loses input focus.\n    @event blur\n    ###\n    @on 'blur', =>\n      @__lastCall = Date.now()\n      @_focused = false\n      return\n\n    ###*\n    Emitted when the game's visibility changes.\n\n    TODOC (What exactly does this mean in various circumstances?)\n    @event\n    ###\n    @on 'visibilityChange', (visible) =>\n      @__lastCall = Date.now()\n      @_visible = visible\n\n    for own k,v of params\n      @[k] = v\n\n    @rand = cg.math.Random.create()\n\n    @stageRoot = new cg.rendering.Stage\n\n    # HACK: make sure backgroundColor is set just in case it was set on prototype:\n    @stageRoot.setBackgroundColor @backgroundColor\n\n    @stage = @stageRoot.addChild new cg.Actor\n\n    @backgroundColor ?= 0x000000\n\n    @_disposed = []\n\n    @displayMode ?= 'aspect'\n\n    for filterProp in ['textureFilter', 'resizeFilter']\n      if not @[filterProp] in ['linear', 'nearest']\n        cg.warn 'Unexpected filter mode: ' + @[filterProp] + '. Defaulting to \"linear\"'\n        @[filterProp] = 'linear'\n\n\n    @fps ?= 60\n    @timeScale ?= 1\n\n    @dt = 1000/@fps\n    @dt_seconds = @dt/1000\n\n    @tweener = new cg.TweenManager\n\n    @_focused = true\n    @_visible = true\n\n    @currentTime = 0\n    @__accum = @dt\n\n    @assets = new cg.AssetManager\n\n    @renderer = @_newRenderer @width, @height, @textureFilter\n    @_triggerResize true\n\n    # Create a default texture for actors that don't specify one:\n    dtex = cg.rendering.Sprite::__defaultTexture = new cg.RenderTexture 10, 10\n    gfx = new cg.rendering.Graphics\n    stg = new cg.rendering.Stage 0xFF00FF\n    stg.addChild gfx\n    gfx.clear()\n    gfx.beginFill 0xFF00FF\n    gfx.drawRect 0,0, 10,10\n    gfx.endFill()\n    dtex.render stg\n\n    @__plugins_postInit()\n\n  mainLoop: ->\n    dw = @getDeviceWidth()\n    dh = @getDeviceHeight()\n    if (dw != @_dwCache) or (dh != @_dhCache) or @__needsTriggerResize\n      @_dwCache = dw\n      @_dhCache = dh\n      @_triggerResize()\n      @resized = true\n    else\n      @resized = false\n\n    return  unless @_focused\n\n    now = Date.now()\n    @__lastCall ?= now\n    delta = now - @__lastCall\n    count = 0\n\n    @__lastCall = now\n    start = Date.now()\n    @__accum += delta\n    console.profile('update')  if @profiling\n    while (@__accum >= @dt/@timeScale) and count < 20\n      ++count\n      @tweener.update()\n      @emit 'beforeUpdate', @\n      @update()\n      @emit 'afterUpdate', @\n      @__accum -= @dt/@timeScale\n    console.profileEnd()  if @profiling\n\n    # TODO A better way to expose control over focus/visibility behavior.\n    return  unless @_visible\n\n    console.profile('draw')  if @profiling\n    @emit 'beforeDraw', @\n    @draw (1 - @__accum / @dt/@timeScale) / 1000\n    @emit 'afterDraw', @\n    console.profileEnd()  if @profiling\n\n    stop = Date.now()\n    d = stop-start\n    # if d > @dt\n    #   cg.warn \"tick: #{d} ms\"\n\n  _triggerResize: (forceResize=true) ->\n    @__needsTriggerResize = false\n\n    prevScale = @scale\n    prevWidth = @width\n    prevHeight = @height\n\n    switch @displayMode\n      when 'fill', 'fillPixel'\n        @scale ?= 1\n        @width = Math.floor @getDeviceWidth() / @scale\n        @height = Math.floor @getDeviceHeight() / @scale\n      else # We must maintain aspect ratio.\n        # Default game resolution is WQVGA\n        @width ?= 400\n        @height ?= 240\n        # Determine optimal scale factor\n        dw = @getDeviceWidth()\n        dh = @getDeviceHeight()\n        displayAR = dw/dh\n        gameAR = @width/@height\n        if gameAR > displayAR\n          # Game is \"wider\" so determine scale based on ratio of widths\n          @scale = dw/@width\n        else\n          # Game is \"taller\" so determine scale based on ratio of heights\n          @scale = dh/@height\n\n        if @displayMode is 'pixelPerfect'\n          @scale = Math.max 1, Math.floor @scale\n\n    if not ((@displayMode in ['pixel', 'pixelPerfect', 'fillPixel']) and @scale != 1)\n      if @frameBufferStage?\n        @frameBufferStage.clearChildren()\n        delete @frameBufferStage\n        @stageRoot.addChild @stage\n      @stage.scaleX = @stage.scaleY = @scale\n      @__render = =>\n        @renderer.render @stageRoot\n    else\n      # A framebuffer is required to achieve proper full-screen nearest-neighbor filtering.\n      @stage.scaleX = @stage.scaleY = 1\n      frameBuffer = new cg.RenderTexture @width, @height, @textureFilter, @resizeFilter\n      frameBufferSprite = new cg.rendering.Sprite frameBuffer\n      @frameBufferStage = new cg.rendering.Stage\n      @frameBufferStage.addChild frameBufferSprite\n      frameBufferSprite.width = @width\n      frameBufferSprite.height = @height\n      frameBufferSprite.scaleX = @scale\n      if not @renderer.gl?\n        # We don't need to flip if we're in the canvas renderer.\n        frameBufferSprite.scaleY = @scale\n        frameBufferSprite.y = 0\n      else\n        frameBufferSprite.scaleY = -1 * @scale\n        frameBufferSprite.y = @height * @scale\n      @__render = =>\n        if @frameBufferStage.backgroundColor != @stageRoot.backgroundColor\n          @frameBufferStage.setBackgroundColor @stageRoot.backgroundColor\n        frameBuffer.render @stage, {x:0, y:0}, true\n        @renderer.render @frameBufferStage\n\n    if !@_needsResize\n      @_needsResize = prevScale != @scale or prevWidth != @width or prevHeight != @height\n\n    if @renderer? and @_needsResize or forceResize\n      @renderer.resize @getRendererWidth(), @getRendererHeight(),\n                       @getViewportWidth(), @getViewportHeight(),\n                       @getViewportOffsetX(), @getViewportOffsetY()\n      @_needsResize = false\n      @emit 'afterResize', @\n\n    @renderer._updateAllTextures @textureFilter\n\n  draw: (t) ->\n    start = Date.now()\n\n    @__render()\n    stop = Date.now()\n    d = stop-start\n    # if d > 17\n    #   cg.warn \"draw: #{d} ms\"\n\n  getDeviceWidth: ->\n    throw new Error 'Called unimplemented version of getDeviceWidth'\n\n  getDeviceHeight: ->\n    throw new Error 'Called unimplemented version of getDeviceHeight'\n\n  maximizeWindow: ->\n    cg.warn 'maximizeWindow not available on this device'\n\n  minimizeWindow: ->\n    cg.warn 'minimizeWindow not available on this device'\n\n  restoreWindow: ->\n    cg.warn 'restoreWindow not available on this device'\n\n  resizeWindow: (width, height) ->\n    cg.warn 'resizeWindow not available on this device'\n\n  quit: -> # Default `quit` does nothing\n\n  _dispose: (obj) ->\n    @_disposed.push obj\n\n  _addActorToClassGroup: (actor, cls) ->\n    return  if actor._destroyed\n    @classes[cls] ?= cg.Group.create()\n    @classes[cls].add actor\n\n  _removeActorFromClassGroup: (actor, cls) ->\n    return  unless @classes[cls]\n    @classes[cls].remove actor\n    delete @classes[cls]  if @classes[cls].length is 0\n\n  ###*\n  Emitted *immediately after* [`update`](#method_update) executes inside [`mainLoop`](#method_mainLoop).\n  @event afterUpdate\n  ###\n  ###*\n  Emitted *immediately before* [`update`](#method_update) executes inside [`mainLoop`](#method_mainLoop).\n  @event beforeUpdate\n  ###\n  ###*\n  Recursively updates all non-paused children.\n\n  After updating, disposes any children that have been [`destroy`](cg.Actor.html#method_destroy)ed.\n\n  @method update\n  ###\n  update: ->\n    @__plugins_preUpdate()\n\n    @currentTime += cg.dt\n    @stage.update()\n    for obj in @_disposed\n      obj._dispose()\n      if obj.id?\n        delete @__byID[obj.id]\n\n    @_disposed = []\n\n    @__plugins_postUpdate()\n    return\n\n  ###*\n  Convenience method; equivalent to calling [`new Tween(obj, params)`](cg.Tween.html).\n\n  @method tween\n  @return {cg.Tween} The newly-created tween.\n  ###\n  tween: (args...) -> new cg.Tween(args...)\n\n  ###*\n  TODOC\n\n  @method delay\n  @return {cg.Tween} The newly-created tween.\n  ###\n  delay: (time, func) ->\n    t = new Tween @,\n      duration: time\n      immediate: false\n    t.start().then func\n    return t\n\ncg = Core.create()\n\nif global?\n  global.cg = cg\n\nif window?\n  window.cg = cg\n\ncg.setLogLevel 'verbose'\n\nmodule.exports = cg\n",
    "Module = require 'Module'\n\n###*\nStore and retrieve data (eg. save game info, preferences, etc).\n\n@class cg.data.UserDataManager\n@constructor\n@param namespace {String}\nA unique name for data associated with this `UserDataManager`.\n###\nclass UserDataManager extends Module\n  constructor: (@namespace) ->\n    unless @namespace?\n      throw new Error 'Namespace parameter is required for creating a new UserDataManager'\n\n  ###*\n  Retrieve data associated with a given key. The type of the data is preserved from when it was set.\n\n  @method get\n  @param key {String}\n  The identifier for the data you wish to retrieve.\n  @return {Promise}\n  A Promise that resolves with the value associated with the given key.\n  If the value doesn't exist, `undefined` is resolved successfully; the promise\n  is only rejected with an error if there is some internal problem accessing\n  user data.\n\n  @example\n  data.get('color', function (err, color) {\n    cg.log('Color: ' + color);\n  });\n\n  @example\n  data.get('preferences', function (err, prefs) {\n    if (err) {\n      cg.error('Unexpected error when loading preferences: ' + err);\n      return;\n    }\n    cg.log(prefs.difficulty);                    // \"Hurt Me Plenty!\"\n    cg.log('Hello, ' + prefs.player_name + '.'); // \"Hello, Clarice.\"\n  });\n  ###\n  get: (key, cb) -> throw new Error 'You must be override UserDataManager::get; do not call `super` within your implementation.'\n\n  ###*\n  Store some data with a given key name.\n\n  @method set\n  @param key {String}\n  A unique identifier with which you will later retrieve the data.\n\n  @param value {Number|String|Object}\n  The data to associate with the specified key.\n  **NOTE**: If specifying an `Object`, it will be serialized as JSON before storage; it must therefore not contain any circular references.\n\n  @example\n  data.set('color', 'red');\n\n  @example\n  var prefs = {\n    difficulty: 'Hurt Me Plenty!',\n    player_name: 'Clarice'\n  };\n\n  data.set('preferences', prefs, function (err) {\n    if (err) {\n      cg.error('Unexpected error when saving preferences: ' + err);\n    }\n  });\n  ###\n  set: (key, value, cb) -> throw new Error 'You must be override UserDataManager::set; do not call `super` within your implementation.'\n\nmodule.exports = UserDataManager",
    "cg = require 'cg'\nScene = require 'Scene'\n\n###*\n@class cg.extras.LoadingScreen\n@constructor\n@param [properties]\nA set of name/value pairs that will be copied into the resulting `LoadingScreen` object, as with [`cg.Actor`](cg.Actor.html)\n\n@param [properties.barHeight=20]\nHeight in virtual pixels of the loading bar.\n\n@param [properties.padding=4]\nAmount of padding inside the loading bar's container; this essentially forms a border around the progress bar.\n\n@param [properties.bgColor=0x000000]\nThe color of the loading bar's background.\n\n@param [properties.bgColor=0xFFF]\nThe color of the loading bar's progress bar.\n###\nclass LoadingScreen extends Scene\n  constructor: ->\n    super\n    @bar = @addChild new cg.rendering.Graphics\n    @alpha ?= 1\n    @barHeight ?= 20\n    @padding ?= 4\n    @bgColor ?= 0x000000\n    @fgColor ?= 0xFFFFFF\n    @reset()\n\n  ###*\n  Set the progress bar back to zero.\n\n  @method reset\n  ###\n  reset: ->\n    @progress = 0\n    @alpha = 1\n  \n  ###*\n  Start the loading animation.\n\n  @method begin\n  ###\n  begin: ->\n    @reset()\n\n  ###*\n  Animate the progress of this loading screen to a given percentage.\n\n  @method setProgress\n  @param val\n  A number between 0 and 1 that represents the percentage of loading that has been completed.\n  ###\n  setProgress: (val) ->\n    return  if @progress > val\n    @_progressTween?.stop()\n    @_progressTween = @tween\n      duration: 2000\n      easeFunc: 'linear'\n      values:\n        progress: Math.min val, 1.0\n\n  ###*\n  Finish the loading animation.\n\n  @method complete\n  @return {Promise}\n  A promise that resolves itself once the completion animation has finished.\n  \n  @example\n      loadingScreen.complete().then(function () {\n        loadingScreen.destroy();\n        titleScreen.show();\n      });\n  ###\n  complete: ->\n    @_progressTween?.stop()\n    @tween\n      duration: 100\n      easeFunc: 'linear'\n      values:\n        progress: 1\n    .then ->\n      @hide(100).then -> @emit 'complete'\n\n  update: ->\n    super\n\n    @bar.clear()\n    @bar.beginFill @bgColor\n    @bar.drawRect @padding, cg.height/2-@barHeight/2-@padding/2, cg.width-2*@padding, @barHeight+@padding\n    @bar.endFill()\n\n    @bar.beginFill @fgColor\n    @bar.drawRect @padding*1.5, cg.height/2-@barHeight/2, @progress*(cg.width-2*@padding*1.5), @barHeight\n    @bar.endFill()\n    @bar.alpha = @alpha\n\nmodule.exports = LoadingScreen",
    "cg = require 'cg'\nScene = require 'Scene'\n\nclass SplashScreen extends Scene\n  constructor: ->\n    super\n    @hide()\n    @displayTime ?= 2000\n\n  splashIn: ->\n    @show()\n    @once cg.input, 'any', @splashOut\n    @_hideDelay = @delay @displayTime, @splashOut\n\n  splashOut: ->\n    @_hideDelay?.stop()\n    @_hideTween?.stop()\n    @_hideTween = @hide 250, -> @emit 'done'\n\nclass SplashScreen.Simple extends SplashScreen\n  constructor: (@logoTexture) ->\n    super\n    @logo = @addChild new cg.SpriteActor\n      texture: @logoTexture\n      anchorX: 0.5\n      anchorY: 0.5\n\n    @hide()\n\n  splashIn: ->\n    super\n\n    # Ensure logo is centered:\n    @logo.x = cg.width/2\n    @logo.y = cg.height/2\n\n    # Cancel any previous tweens:\n    @widthTween?.stop()\n    @heightTween?.stop()\n\n    {width, height} = @logo\n    gameAR = cg.width/cg.height\n    ar = width/height\n    if ar > gameAR\n      scale = cg.width/width\n    else\n      scale = cg.height/height\n\n    @logo.width = @logo.height = 0\n\n    @widthTween = @logo.tween\n      values: width: width*scale\n      easeFunc: 'elastic.out'\n\n    @heightTween = @logo.tween\n      delay: 50\n      values: height: height*scale\n      easeFunc: 'elastic.out'\n\nmodule.exports = SplashScreen\n",
    "SplashScreen = require 'extras/SplashScreen'\nLoadingScreen = require 'extras/LoadingScreen'\n\nmodule.exports = {\n  SplashScreen: SplashScreen\n  LoadingScreen: LoadingScreen\n}\n",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nWebGLRenderer = require 'rendering/renderers/webgl/WebGLRenderer'\nCanvasRenderer = require 'rendering/renderers/canvas/CanvasRenderer'\nBaseTexture = require 'rendering/textures/BaseTexture'\n\nDetector = {}\n\n###\nThis helper function will automatically detect which renderer you should be using.\nWebGL is the preferred renderer as it is a lot fastest. If webGL is not supported by the browser then this function will return a canvas renderer\n@method autoDetectRenderer\n@static\n@param width {Number} the width of the renderers view\n@param height {Number} the height of the renderers view\n@param view {Canvas} the canvas to use as a view, optional\n@param transparent {Boolean} the transparency of the render view, default false\n@default false\n###\nDetector.autoDetectRenderer = (width, height, view, transparent, textureFilter='linear', resizeFilter='linear') ->\n  # BORROWED from Mr Doob (mrdoob.com)\n  webgl = (->\n    try\n      canvas = document.createElement 'canvas'\n      return !!window.WebGLRenderingContext and !!(canvas.getContext('webgl') or canvas.getContext('experimental-webgl'))\n\n    catch e\n      return false\n  )()\n  \n  if webgl\n    return new WebGLRenderer(width, height, view, transparent, textureFilter, resizeFilter)\n  return new CanvasRenderer(width, height, view, transparent, textureFilter, resizeFilter)\n\nmodule.exports = Detector",
    "UserDataManager = require 'data/UserDataManager'\nPromises = require 'util/Promises'\n\nclass LocalStorageUserDataManager extends UserDataManager\n  get: (key, cb) ->\n    deferred = new Promises.Deferred\n    \n    if typeof cb is 'function'\n      deferred.promise.then cb.bind(null, undefined), cb\n\n    try\n      deferred.resolve JSON.parse localStorage.getItem @namespace + '$' + key\n    catch e\n      deferred.reject e\n\n    return deferred.promise\n\n  set: (key, value, cb) ->\n    deferred = new Promises.Deferred\n\n    if typeof cb is 'function'\n      deferred.promise.then cb.bind(null, undefined), cb\n    \n    try\n      localStorage.setItem @namespace + '$' + key, JSON.stringify(value)\n      deferred.resolve value\n    catch e\n      deferred.reject e\n\n    return deferred.promise\n\nmodule.exports = LocalStorageUserDataManager",
    "cg = require 'cg'\nAssetManager = require 'AssetManager'\nTexture = require 'rendering/textures/Texture'\nWebSound = require 'implementations/web/WebSound'\nWebMusic = require 'implementations/web/WebMusic'\nPromises = require 'util/Promises'\n\nDeferred = Promises.Deferred\n\nclass WebAssetManager extends AssetManager\n  loadJSON: (path) ->\n    deferred = new Deferred @\n\n    ajaxRequest = new XMLHttpRequest\n    ajaxRequest.onreadystatechange = ->\n      if ajaxRequest.readyState is 4\n        if not (ajaxRequest.status is 200 or window.location.href.indexOf('http') is -1)\n          deferred.reject \"Failed to load file #{path}\"\n        else\n          try\n            json = JSON.parse ajaxRequest.responseText\n            deferred.resolve json\n          catch e\n            deferred.reject \"Failed to parse file #{path}:\\n#{e.name}: #{e.message}\"\n    ajaxRequest.open 'GET', path, true\n    ajaxRequest.overrideMimeType 'application/json'  if ajaxRequest.overrideMimeType\n    ajaxRequest.send null\n\n    return deferred.promise\n  loadTexture: (path) ->\n    deferred = new Deferred @\n    fileType = path.split(\".\").pop().split('?')[0].toLowerCase()\n    if path of AssetManager._textureCache\n      deferred.resolve AssetManager._textureCache[path]\n\n    if fileType in AssetManager.textureTypes\n      texture = Texture.fromImage path\n      texture.path = path\n      if texture.baseTexture.hasLoaded\n        deferred.resolve texture\n      else\n        texture.baseTexture.on 'loaded', (event) =>\n          deferred.resolve texture\n        texture.baseTexture.on 'error', (event) =>\n          texture.error = event\n          deferred.reject texture\n      return deferred.promise\n    texture ?= {}\n\n    cg.error texture.error = path + ' is an unsupported file type.'\n    deferred.reject texture\n    return deferred.promise\n\n  loadSound: (paths, volume, numChannels) ->\n    snd = new WebSound paths, volume, numChannels\n    snd.load() # Returns promise\n\n  loadMusic: (paths, volume) ->\n    snd = new WebMusic paths, volume\n    snd.load() # Returns promise\n\nmodule.exports = WebAssetManager",
    "###\ncombo.js - Copyright 2012-2013 Louis Acresti - All Rights Reserved\n###\n\ncg = require 'cg'\nInputManager = require 'input/InputManager'\n\nsetupKeys = ->\n  # SET UP KEYS:\n  cg.__keys =\n    'backspace': 8\n    'tab': 9\n    'enter': 13\n    'return': 13\n    'shift': 16\n    'lshift': 16\n    'rshift': 16\n    'ctrl': 17\n    'lctrl': 17\n    'rctrl': 17\n    'alt': 18\n    'lalt': 18\n    'altr': 18\n    'pause': 19\n    'capslock': 20\n    'esc': 27\n    'space': 32\n    'pageup': 33\n    'pagedown': 34\n    'end': 35\n    'home': 36\n    'left': 37\n    'up': 38\n    'right': 39\n    'down': 40\n    'insert': 45\n    'delete': 46\n    '0': 48\n    '1': 49\n    '2': 50\n    '3': 51\n    '4': 52\n    '5': 53\n    '6': 54\n    '7': 55\n    '8': 56\n    '9': 57\n    'a': 65\n    'b': 66\n    'c': 67\n    'd': 68\n    'e': 69\n    'f': 70\n    'g': 71\n    'h': 72\n    'i': 73\n    'j': 74\n    'k': 75\n    'l': 76\n    'm': 77\n    'n': 78\n    'o': 79\n    'p': 80\n    'q': 81\n    'r': 82\n    's': 83\n    't': 84\n    'u': 85\n    'v': 86\n    'w': 87\n    'x': 88\n    'y': 89\n    'z': 90\n    'kp_0': 96\n    'kp_1': 97\n    'kp_2': 98\n    'kp_3': 99\n    'kp_4': 100\n    'kp_5': 101\n    'kp_6': 102\n    'kp_7': 103\n    'kp_8': 104\n    'kp_9': 105\n    'kp_multiply': 106\n    'kp_plus': 107\n    'kp_minus': 109\n    'kp_decimal': 110\n    'kp_divide': 111\n    'f1': 112\n    'f2': 113\n    'f3': 114\n    'f4': 115\n    'f5': 116\n    'f6': 117\n    'f7': 118\n    'f8': 119\n    'f9': 120\n    'f10': 121\n    'f11': 122\n    'f12': 123\n    'equal': 187\n    '=': 187\n    'comma': 188\n    ',': 188\n    'minus': 189\n    '-': 189\n    'period': 190\n    '.': 190\n  InputManager._generateKeyNameMap()\n\n# Adapted from jquery-mousewheel\n# Copyright (c) 2013 Brandon Aaron (http://brandonaaron.net)\n# Licensed under the MIT License (LICENSE.txt).\n#\n# Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.\n# Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.\n# Thanks to: Seamus Leahy for adding deltaX and deltaY\n#\n# Version: 3.1.3\n#\n# Requires: 1.2.2+\naddMouseWheelHandler = do ->\n  return (element, callback) ->\n    handler = (event) ->\n      event ?= window.event\n      args = [].slice.call(arguments, 1)\n      delta = 0\n      deltaX = 0\n      deltaY = 0\n      absDelta = 0\n      absDeltaXY = 0\n      fn = undefined\n      \n      # Old school scrollwheel delta\n      delta = event.wheelDelta  if event.wheelDelta\n      delta = event.detail * -1  if event.detail\n      \n      # New school wheel delta (wheel event)\n      if event.deltaY\n        deltaY = event.deltaY * -1\n        delta = deltaY\n      if event.deltaX\n        deltaX = event.deltaX\n        delta = deltaX * -1\n      \n      # Webkit\n      deltaY = event.wheelDeltaY  if event.wheelDeltaY isnt `undefined`\n      deltaX = event.wheelDeltaX * -1  if event.wheelDeltaX isnt `undefined`\n      \n      # Look for lowest delta to normalize the delta values\n      absDelta = Math.abs(delta)\n      lowestDelta = absDelta  if not lowestDelta or absDelta < lowestDelta\n      absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX))\n      lowestDeltaXY = absDeltaXY  if not lowestDeltaXY or absDeltaXY < lowestDeltaXY\n      \n      # Get a whole value for the deltas\n      fn = (if delta > 0 then 'floor' else 'ceil')\n      delta = Math[fn](delta / lowestDelta)\n      deltaX = Math[fn](deltaX / lowestDeltaXY)\n      deltaY = Math[fn](deltaY / lowestDeltaXY)\n      \n      # Add event and delta to the front of the arguments\n      args.unshift event, delta, deltaX, deltaY\n      callback args...\n\n    toBind = (if 'onwheel' of document or document.documentMode >= 9 then ['wheel'] else ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'])\n    lowestDelta = undefined\n    lowestDeltaXY = undefined\n\n    for binding in toBind by -1\n      element.addEventListener binding, handler, false\n\ngetNumericStyleProperty = (element, prop) ->\n  style = getComputedStyle element, null\n  parseInt style.getPropertyValue(prop), 10\n\n# From http://stackoverflow.com/a/5776220/742156\nelementPosition = (e) ->\n  x = 0\n  y = 0\n  inner = true\n  loop\n    x += e.offsetLeft\n    y += e.offsetTop\n    borderTop = getNumericStyleProperty(e, 'border-top-width')\n    borderLeft = getNumericStyleProperty(e, 'border-left-width')\n    y += borderTop\n    x += borderLeft\n    if inner\n      paddingTop = getNumericStyleProperty(e, 'padding-top')\n      paddingLeft = getNumericStyleProperty(e, 'padding-left')\n      y += paddingTop\n      x += paddingLeft\n    inner = false\n    break unless e = e.offsetParent\n  x: x\n  y: y\n\n\nclass WebInputManager extends InputManager\n  @__initialized: false\n  @__initialize: ->\n    return  if @__initialized\n\n    @__initialized = true\n    \n    setupKeys()\n    \n    preventDefaultKeys = [\n      cg.__keys['tab']\n      cg.__keys['backspace']\n    ]\n\n    container = cg.container\n\n    window.addEventListener 'keydown', (e) ->\n      return if document.activeElement.tagName in ['INPUT']\n      if e.keyCode in preventDefaultKeys\n        e.preventDefault()\n      cg.input._triggerKeyDown e.keyCode\n      return true\n\n    window.addEventListener 'keyup', (e) ->\n      return if document.activeElement.tagName in ['INPUT']\n      if e.keyCode in preventDefaultKeys\n        e.preventDefault()\n      cg.input._triggerKeyUp e.keyCode\n      return true\n      \n    window.addEventListener 'keypress', (e) ->\n      # TODO Proper keypress events using IME based input\n      cg.input.emit 'keyPress', e.charCode\n      return true\n\n    touchesById = {}\n\n    container.oncontextmenu = -> false\n\n    window.addEventListener 'mousemove', (e) -> cg.input._triggerMouseMove e.pageX, e.pageY\n\n    container.addEventListener 'mousedown', (e) -> cg.input._triggerMouseDown e.which\n\n    window.addEventListener 'mouseup', (e) -> cg.input._triggerMouseUp e.which\n\n    container.addEventListener 'touchstart', (e) ->\n      e.preventDefault() # Prevent 'Ghost Clicks'\n      for touch,num in e.touches\n        if touch in e.changedTouches\n          touchesById[touch.identifier] = t\n          cg.input._triggerTouchDown touch.pageX, touch.pageY, num\n\n    container.addEventListener 'touchmove', (e) ->\n      e.preventDefault()\n      for touch,num in e.touches\n        if touch in e.changedTouches\n          cg.input._triggerTouchDrag touch.pageX, touch.pageY, num\n\n    addMouseWheelHandler container, (e, delta, deltaX, deltaY) ->\n      cg.input.emit 'mouseWheel',\n        dx: deltaX\n        dy: deltaY\n\n    touchStop = (e) ->\n      for touch,num in e.touches\n        if touch in e.changedTouches\n          cg.input._triggerTouchUp touch.pageX, touch.pageY, num\n\n    container.addEventListener 'touchend', touchStop\n    container.addEventListener 'touchcancel', touchStop\n\n  _transformDeviceCoordinates: (pageX, pageY) ->\n    view = cg.renderer.getView()\n    w = getNumericStyleProperty view, 'width'\n    h = getNumericStyleProperty view, 'height'\n    p = elementPosition view\n    x = ((pageX - p.x) / w) * cg.width\n    y = ((pageY - p.y) / h) * cg.height\n    return [x, y]\n\n  constructor: ->\n    WebInputManager.__initialize()\n    super\n\nmodule.exports = WebInputManager",
    "cg = require 'cg'\nMusic = require 'sound/Music'\nPromises = require 'util/Promises'\n\nDeferred = Promises.Deferred\n\nclass WebMusic extends Music\n  constructor: ->\n    @__pathIndex = 0\n    @__deferred ?= new Deferred @\n    @__loaded = false\n\n    super\n\n  load: ->\n    super\n\n    if @__loaded\n      @__deferred.resolve @\n    else\n      @path = @paths[@__pathIndex]\n      @__data = new Audio @path\n      @__data.load()\n\n      canPlayThrough = =>\n        @__data.removeEventListener 'canplaythrough', canPlayThrough\n        @__setupBindings()\n\n        @_setLooping @looping\n        @_setVolume @volume\n        \n        @__data.addEventListener 'ended', =>\n          if @looping\n            @__data.play()\n          else\n            @stop()\n          # TODO: loop/end events?\n        , false\n        @__loaded = true\n        @__deferred.resolve @\n\n      @__data.addEventListener 'canplaythrough', canPlayThrough, false\n      @__data.addEventListener 'error', (error) =>\n        ++@__pathIndex\n        if @__pathIndex < @paths.length\n          @load()\n        else\n          @error = error\n          @__deferred.reject new Error @error\n      , false\n\n    return @__deferred.promise\n\n  _setVolume: (volume) ->\n    super\n    effectiveVolume = @getEffectiveVolume()\n    @__data?.volume = effectiveVolume\n    return @\n\n  _setLooping: (looping) ->\n    super\n    @__data?.loop = looping\n    return @\n\n  _play: (volume=@volume, looping=@looping) ->\n    effectiveVolume = @getEffectiveVolume volume\n    @volume = volume\n    @__data.currentTime = 0\n    @__data.play()\n    @looping = looping\n\n  _stop: ->\n    return  unless @__loaded\n    @__data.currentTime = 0\n    @__data.pause()\n\nmodule.exports = WebMusic",
    "cg = require 'cg'\nSound = require 'sound/Sound'\nPromises = require 'util/Promises'\n\nDeferred = Promises.Deferred\n\nclass WebSound extends Sound\n  constructor: ->\n    @__pathIndex = 0\n    @__channels = []\n    @__deferred ?= new Deferred @\n    super\n\n  load: ->\n    super\n\n    if @__loaded\n      @__deferred.resolve @\n    else\n      @path = @paths[@__pathIndex]\n      @__data = new Audio @path\n      @__data.load()\n\n      canPlayThrough = =>\n        @__data.removeEventListener 'canplaythrough', canPlayThrough\n        @__channels = [@__data]\n        while @__channels.length < @numChannels\n          a = new Audio @path\n          @__channels.push a\n        @__setupBindings()\n        @__loaded = true\n        @__deferred.resolve @\n\n      @__data.addEventListener 'canplaythrough', canPlayThrough, false\n      @__data.addEventListener 'error', (error) =>\n        ++@__pathIndex\n        if @__pathIndex < @paths.length\n          @load()\n        else\n          @error = error\n          @__deferred.reject @error\n      , false\n\n    return @__deferred.promise\n\n  __getChannelsForIndex: (idx) -> if @__channels[idx]? then [@__channels[idx]] else @__channels\n\n  _setVolume: (volume, idx) ->\n    super\n    channels = @__getChannelsForIndex idx\n\n    effectiveVolume = @getEffectiveVolume()\n    for c,idx in channels\n      c.volume = effectiveVolume\n    return\n\n  _play: (volume, looping) ->\n    if not @__loaded\n      cg.warn 'Sound: Could not play ' + @path ? @paths + '; not yet loaded.'\n      return\n\n    effectiveVolume = @getEffectiveVolume volume\n    return  if effectiveVolume <= 0\n\n    minCurrentTime = Infinity\n    minIdx = -1\n    for c, idx in @__channels\n      if not (c.ended or c.paused) and c.currentTime < minCurrentTime\n        minIdx = idx\n        minCurrentTime = c.currentTime\n      else\n        minIdx = idx\n        break\n\n    c = @__channels[minIdx]\n    c.currentTime = 0\n    c.volume = effectiveVolume\n    c.loop = looping\n    c.play()\n\n    return idx\n\n  stop: (idx) ->\n    channels = @__getChannelsForIndex idx\n    for c in channels\n      c.currentTime = 0\n      c.pause()\n    return\n\nmodule.exports = WebSound\n",
    "LocalStorageUserDataManager = require 'implementations/web/LocalStorageUserDataManager'\nWebAssetManager = require 'implementations/web/WebAssetManager'\nWebInputManager = require 'implementations/web/WebInputManager'\nWebMusic = require 'implementations/web/WebMusic'\nWebSound = require 'implementations/web/WebSound'\nDetector = require 'implementations/web/Detector'\nCanvasRenderer = require 'rendering/renderers/canvas/CanvasRenderer'\nWebGLRenderer = require 'rendering/renderers/webgl/WebGLRenderer'\nUIManager = require 'plugins/ui/UIManager'\n\n# TODO: This ought to be formalized with a class that has overrides or something to that effect.\nmodule.exports = (cg) ->\n\n  if not (window? and document?)\n    throw new Error '`window` and/or `document` arent defined; are you in a browser(like) environment?'\n\n  # Page Visibility API Polyfill\n  # Adapted from http://stackoverflow.com/a/1060034/742156\n  onchange = (evt) ->\n    return if not cg?\n    body = document.body\n    evt = evt or window.event\n    if evt.type is 'focus' or evt.type is 'focusin'\n      cg.emit 'visibilityChange', true\n    else if evt.type is 'blur' or evt.type is 'focusout'\n      cg.emit 'visibilityChange', false\n    else\n      if @hidden\n        cg.emit 'visibilityChange', false\n      else\n        cg.emit 'visibilityChange', true\n      \n  hidden = undefined\n  change = undefined\n  \n  vis =\n    hidden: 'visibilitychange'\n    mozHidden: 'mozvisibilitychange'\n    webkitHidden: 'webkitvisibilitychange'\n    msHidden: 'msvisibilitychange'\n    oHidden: 'ovisibilitychange' # not currently supported\n\n  for own hidden of vis\n    if hidden of document\n      change = vis[hidden]\n      break\n\n  if change\n    document.addEventListener change, onchange\n  else if document.onfocusin != undefined # IE 9 and lower\n    document.onfocusin = document.onfocusout = onchange\n  #else\n  #  window.onfocus = window.onblur = onchange\n\n  ###\n  A polyfill for requestAnimationFrame\n  MIT license\n  http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n  requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel\n\n  @method requestAnimationFrame\n  ###\n  for vendor in ['ms', 'moz', 'webkit', 'o']\n    break  if window.requestAnimationFrame\n    window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame']\n    window.cancelAnimationFrame = window[vendor + 'CancelAnimationFrame'] or window[vendor + 'CancelRequestAnimationFrame']\n\n  unless window.requestAnimationFrame\n    lastTime = 0\n    window.requestAnimationFrame = (callback, element) ->\n      currTime = new Date().getTime()\n      timeToCall = Math.max(0, 16 - (currTime - lastTime))\n      id = window.setTimeout(->\n        callback currTime + timeToCall\n      , timeToCall)\n      lastTime = currTime + timeToCall\n      return id\n\n  ###\n  A polyfill for cancelAnimationFrame\n\n  @method cancelAnimationFrame\n  ###\n  unless window.cancelAnimationFrame\n    window.cancelAnimationFrame = (id) ->\n      clearTimeout id\n  window.requestAnimFrame = window.requestAnimationFrame\n\n  cg.AssetManager = WebAssetManager\n\n  cg.sound.Sound = WebSound\n  cg.sound.Music = WebMusic\n  \n  cg.env =\n    getParameterByName: (name) ->\n      name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]')\n      regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)')\n      results = regex.exec(location.search)\n      return if results == null then null else decodeURIComponent(results[1].replace(/\\+/g, ' '))\n\n  cg.mainLoop = ->\n    cg.Core::mainLoop.apply @, arguments\n\n    window.requestAnimationFrame.call null, =>\n      @mainLoop()\n\n  cg._triggerResize = ->    \n    oldView = @renderer?.getView()\n\n    cg.Core::_triggerResize.apply @, arguments\n      \n    newView = @renderer?.getView()\n\n    if oldView? and (oldView != newView)\n      @container.removeChild oldView\n    @container.appendChild newView  if newView?\n\n  cg.getDeviceWidth = -> @container.clientWidth\n  cg.getDeviceHeight = -> @container.clientHeight\n\n  cg.getRendererWidth = -> @width * @scale\n  cg.getRendererHeight = -> @height * @scale\n\n  cg.getViewportWidth = -> @width * @scale\n  cg.getViewportHeight = -> @height * @scale\n\n  cg.getViewportOffsetX = -> 0\n  cg.getViewportOffsetY = -> 0\n\n  cg._newRenderer = (width, height, textureFilter) ->\n    if @forceWebGL\n      new WebGLRenderer width, height, null, false, textureFilter\n    else if @forceCanvas\n      new CanvasRenderer width, height, null, false, textureFilter\n    else\n      Detector.autoDetectRenderer width, height, null, false, textureFilter\n\n  cg.init = (props) ->\n    container = props.container ? 'combo-game'\n\n    if typeof container is 'string'\n      @container = document.getElementById container\n    else\n      @container = container\n    \n    @input = new WebInputManager\n    \n    delete props.container\n\n    cg.Core::init.apply @, arguments\n    \n    @data = new LocalStorageUserDataManager @name\n\n    window.addEventListener 'focus', =>\n      @emit 'focus', @\n    , false\n\n    window.addEventListener 'blur', =>\n      @emit 'blur', @\n    , false\n\n    @mainLoop()",
    "# TODO\nimplement = require 'implementations/web/index'\ncg = require 'cg'\n\nActor = require 'Actor'\nAnimation = require 'Animation'\nGroup = require 'Group'\nModule = require 'Module'\nScene = require 'Scene'\nSpriteActor = require 'SpriteActor'\nText = require 'Text'\nTileSheet = require 'TileSheet'\nTween = require 'Tween'\nTweenManager = require 'TweenManager'\nSoundManager = require 'sound/SoundManager'\n\nBaseTexture = require 'rendering/textures/BaseTexture'\nTexture = require 'rendering/textures/Texture'\nRenderTexture = require 'rendering/textures/RenderTexture'\n\nextras = require 'extras/index'\nmath = require 'math/index'\nmenus = require 'menus/index'\nrendering = require 'rendering/index'\ntext = require 'text/index'\ntile = require 'tile/index'\n\nincludes =\n  Actor: Actor\n  Animation: Animation\n  Group: Group\n  Module: Module\n  Scene: Scene\n  SpriteActor: SpriteActor\n  Text: Text\n  TileSheet: TileSheet\n  Tween: Tween\n  TweenManager: TweenManager\n\n  BaseTexture: BaseTexture\n  Texture: Texture\n  RenderTexture: RenderTexture\n\n  extras: extras\n  math: math\n  menus: menus\n  rendering: rendering\n  text: text\n  tile: tile\n\ncombo =\n  __initialized: false\n  init: ->\n    return  if combo.__initialized\n\n    combo.__initialized = true\n\n    # A polyfill for Function.prototype.bind\n    unless typeof Function::bind is 'function'\n      Function::bind = (->\n        slice = Array::slice\n        (thisArg) ->\n          bound = ->\n            args = boundArgs.concat(slice.call(arguments))\n            target.apply (if this instanceof bound then this else thisArg), args\n          target = this\n          boundArgs = slice.call(arguments, 1)\n          throw new TypeError()  unless typeof target is 'function'\n          bound:: = (F = (proto) ->\n            proto and (F:: = proto)\n            new F  unless this instanceof F\n          )(target::)\n          return bound\n      )()\n\n    for own moduleName, module of includes\n      cg[moduleName] = module\n\n    # TODO: Make plugin system and implement PhysicsManager as one:\n    # cg.physics = PhysicsManager._instance\n\n    cg.sound = new SoundManager\n    \n    implement cg\n    \n    cg.log combo.VERSION_NAME + ' initialized'\n\nObject.defineProperty combo, 'VERSION',\n  get: -> '0.0.1'\n\nObject.defineProperty combo, 'VERSION_NAME',\n  get: -> 'Combo ' + combo.VERSION + ': \"There Will Be Bugs\"'\n\ncombo.init()\n\nmodule.exports = combo",
    "cg = require 'cg'\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\n\n# TODO!\n# TODOC!\n\nclass Axis extends Module\n  @mixin HasSignals\n\n  Object.defineProperty @::, 'value',\n    get: -> @__value\n    set: (val) ->\n      val = cg.math.clamp val, -1, 1\n      delta = val - @__value\n      if delta isnt 0\n        @__value = val\n        @emit 'change', val, delta\n\nmodule.exports = Axis\n",
    "cg = require 'cg'\nModule = require 'Module'\nTouch = require 'input/Touch'\nTrigger = require 'input/Trigger'\nAxis = require 'input/Axis'\nMultiTrigger = require 'input/MultiTrigger'\nHasSignals = require 'util/HasSignals'\nInputManager = require 'input/InputManager'\n\n###*\nA mapping of (keyboard keys)[TODOC] to action names; meant to decouple input configurations from game logic.\n\n@class cg.input.ControlMap\n@uses cg.util.HasSignals\n@constructor\n@param [namespace] {String}\nSet the value of [`namespace`](#property_namespace).\n\nIf specified, these controls will be accessible as `cg.input.controls[namespace]`.\nOtherwise, a random UUID will be assigned to [`namespace`](#property_namespace).\n\n@param [map] {Object} Key-value set of control data.\n\nKey names represent the name of the action.\nThe values are either a string or `Array` of strings representing [keyboard keys](TODOC).\n\nSee also: [`actions`](#property_actions)\n\n@example\n    var shipControls = new cg.input.ControlMap({\n      shoot: 'space',\n      thrust: ['up', 'w'],\n      brake: ['down', 's'],\n      turnLeft: ['left', 'a'],\n      turnRight: ['right', 'd']\n    });\n\n@example\n    var shipControls = new cg.input.ControlMap('ship', {\n      shoot: 'space',\n      thrust: ['up', 'w'],\n      brake: ['down', 's'],\n      turnLeft: ['left', 'a'],\n      turnRight: ['right', 'd']\n    });\n\n    assert(cg.input.controls.ship == shipControls); // true\n\n@example\n    // load control mappings from user data: (see `UserDataManager`)\n    var myControls = new cg.input.ControlMap(cg.data.getSync('controls'));\n\n###\nclass ControlMap extends Module\n  @mixin HasSignals\n\n  constructor: (namespace, map) ->\n    if typeof namespace isnt 'string'\n      map = namespace\n      namespace = cg.rand.uuid()\n\n    @paused = false\n    \n    ###*\n    A unique identifier for this ControlMap.\n\n    This is used by [`cg.input`](cg.input.html) to \n\n    @property namespace\n    @type String\n    @default A random UUID.\n    ###\n    Object.defineProperty @, 'namespace', value: namespace\n    \n    cg.input.map @namespace, @\n\n    @actions = {}\n    @axes = {}\n    @_triggersByKeycode = {}\n    @listeners = [@]\n\n    if map?\n      for own name,keys of map\n        if not cg.util.isArray keys\n          keys = [keys]\n\n        for k in keys\n          if (typeof k is 'string') and '/' in k\n            @mapAxisKeys name, k.split('/')...\n          else\n            @mapKey name, k\n  \n  ###*\n  `true` if action events are being suppressed, `false` otherwise.\n\n  @property paused {Boolean}\n  ###\n  Object.defineProperty @::, 'paused',\n    get: -> @__paused\n    set: (value) ->\n      if @__paused isnt value\n        @__paused = value\n        if @__paused\n          @_releaseAll() # Prevent getting stuck.\n  \n  ###*\n  Suppress action events from being emitted from this `ControlMap`.\n  \n  See also:\n\n    * [`paused`](#property_paused)\n\n  @method pause\n  ###\n  pause: ->\n    @paused = true\n    return\n  \n  ###*\n  Allow action events to be emitted from this `ControlMap`.\n  \n  See also:\n\n    * [`paused`](#property_paused)\n  \n  @method pause\n  ###\n  resume: ->\n    @paused = false\n    return\n\n  ###*\n  Register an object that `HasSignals` to capture events emitted from this `ControlMap`.\n\n  All of the following event types will be forwarded:\n\n    * [`<action>:hit`](#event_<action>:hit)\n    * [`<action>`](#event_<action>)\n    * [`<action>:release`](#event_<action>:release)\n    * [`!<action>`](#event_!<action>)\n\n  **NOTE**: This method is called automatically when modifying the [`Actor::controls`](cg.Actor.html#property_controls) property.\n\n  @method addListener\n  @param listener {HasSignals}\n  The object you wish to forward all action events from this `ControlMap` to.\n\n  Typically an `Actor`, but anything that uses `HasSignals` will work.\n\n  @example\n      var controls = new cg.input.ControlMap({shoot: 'space'});\n\n      controls.addListener(spaceShip);\n\n      // Now, all `shoot` events will be forwarded to `spaceShip` whenever\n      //  the space bar is hit, allowing it to handle them directly without\n      //  referring to this `ControlMap`:\n      spaceShip.on('shoot', function () {\n        this.shootBullet();\n      });\n  ###\n  addListener: (listener) ->\n    idx = @listeners.indexOf listener\n    if idx >= 0\n      cg.warn \"ControlMap: Listener (#{listener}) was already in our list of listeners; not adding it.\"\n      return\n    @listeners.push listener\n\n  ###*\n  Un-register an object that `HasSignals` from capturing events emitted from this `ControlMap`.\n  \n  **NOTE**: This method is called automatically when modifying the [`Actor::controls`](cg.Actor.html#property_controls) property.\n\n  @method removeListener\n  @param listener {HasSignals}\n  The object you wish to *stop* forwarding all action events from this `ControlMap` to.\n  \n  Typically an `Actor`, but anything that uses `HasSignals` will work.\n  ###\n  removeListener: (listener) ->\n    idx = @listeners.indexOf listener\n    if idx < 0\n      cg.warn \"ControlMap: Listener (#{listener}) was not in our list of listeners.\"\n      return\n    @listeners.splice idx, 1\n\n  ###*\n  Associate a named action with a generic `Trigger`.\n  \n  Multiple calls to `map` with the same `name` parameter will\n  not overwrite previously-mapped triggers; multiple triggers can\n  be associated with a single action.\n\n  @method map\n  @param name {String} The name of the action event.\n  @param trigger {Trigger} The trigger whose `hit` and `release` events correspond with the named action.\n  ###\n  map: (name, trigger) ->\n    # TODO:\n    #if name in InputManager.RESERVED_NAMES\n    #  throw new Error \"The event named '#{name}'' is reserved for internal use.\"\n    @actions[name] ?= new MultiTrigger\n    @actions[name].addTrigger trigger\n\n  ###*\n  Stop associating a named action with a specific `Trigger`, or all of its associated triggers.\n\n  @method unmap\n  @param name {String} The name of the action event.\n  @param [trigger] {Trigger}\n\n  @example\n      // Completely disable the \"shoot\" action:\n      controlMap.unmap('shoot');\n\n  @example\n      // Remove a specific trigger from the \"shoot\" action's list of triggers:\n      controlMap.unmap('shoot', someTrigger);\n  ###\n  unmap: (name, trigger) ->\n    action = @actions[name]\n    if not action?\n      cg.warn 'ControlMap.unmap: No action named \"' + name '\"; aborting.'\n      return\n\n    if trigger?\n      action.removeTrigger trigger\n    else\n      delete @actions[name]\n\n  ###*\n  Associate a named action with a (keyboard key)[TODOC] or set of [keyboard keys](TODOC).\n  \n  Multiple calls to `mapKey` with the same `name` parameter will\n  not overwrite previously-mapped keys; multiple keys can\n  be associated with a single action.\n\n  A single key may also be mapped to multiple actions.\n\n  @method map\n  @param name {String} The name of the action event.\n  @param keyCodeNames {String|Array} The key name(s) to associate with the given action name.\n  @return {cg.input.Trigger} the new trigger associated with the given key name(s)\n  @example\n      this.mapKey('shoot', 'space');\n  \n  @example\n      this.mapKey('thruster', ['up', 'w']);\n  ###\n  mapKey: (name, keyCodeNames) ->\n    if not cg.util.isArray keyCodeNames\n      keyCodeNames = [keyCodeNames]\n\n    trigger = new Trigger\n    trigger.name = name\n    @map name, trigger\n    \n    for keyCodeName in keyCodeNames\n      keyCodeSet = cg.__keys[keyCodeName]\n      if not keyCodeSet\n        cg.warn \"ControlMap::mapKey: Unknown key name: '#{keyCodeName}'; ignoring.\"\n        continue\n      if not cg.util.isArray keyCodeSet \n        keyCodeSet = [keyCodeSet]\n      for keyCode in keyCodeSet\n        @_triggersByKeycode[keyCode] ?= []\n        @_triggersByKeycode[keyCode].push trigger\n\n    return trigger\n  \n  ###*\n  Stop associating a (keyboard key)[TODOC] or set of [keyboard keys](TODOC) with a named action.\n\n  @method unmapKey\n  @param name\n  @param keyCodeNames {String|Array} The key name(s) to associate with the given action name.\n  @example\n      this.unmapKey('shoot', 'space');\n  \n  @example\n      this.unmapKey('thruster', ['up', 'w']);\n  ###\n  unmapKey: (name, keyCodeNames) ->\n    if not cg.util.isArray keyCodeNames\n      keyCodeNames = [keyCodeNames]\n\n    for keyCodeName in keyCodeNames\n      keyCodeSet = cg.__keys[keyCodeName]\n      if not keyCodeSet\n        cg.warn \"ControlMap::unmapKey: Unknown key name: '#{keyCodeName}'; ignoring.\"\n        continue\n\n      if not cg.util.isArray keyCodeSet \n        keyCodeSet = [keyCodeSet]\n\n      for keyCode in keyCodeSet\n        triggers = @_triggersByKeycode[keyCode]\n        continue  if not triggers?\n        for trigger,idx in triggers by -1\n          if trigger.name is name\n            triggers.splice idx, 1\n    return\n\n  ###*\n  TODOC\n\n  @method mapAxisKeys\n  @param name {String} the name of the axis to create (or to associate more keys with if it already exists)\n  @param low {String} the key associated with the negative direction of the axis\n  @param high {String} the key associated with the positive direction of the axis\n  @return {cg.input.Axis} the axis associated with the given name\n  ###\n  mapAxisKeys: (name, low, high) ->\n    if @axes[name]\n      axis = @axes[name]\n    else\n      axis = @axes[name] = new Axis\n      axis.name = name\n      @on axis, 'change', (val, delta) ->\n        for l in @listeners\n          l.emit axis.name, val, delta\n\n    lowTrigger = @mapKey 'axis:' + name + ':low', low\n    highTrigger = @mapKey 'axis:' + name + ':high', high\n    \n    lowTrigger.on 'hit', -> axis.value = -1\n    lowTrigger.on 'release', -> axis.value = if highTrigger.held() then 1 else 0\n    highTrigger.on 'hit', -> axis.value = 1\n    highTrigger.on 'release', -> axis.value = if lowTrigger.held() then -1 else 0\n\n    return axis\n\n  unmapAxisKeys: (name, low, high) ->\n    lowTriggerName = 'axis:' + name + ':low'\n    highTriggerName = 'axis:' + name + ':high'\n    @unmapKey lowTriggerName, low\n    @unmapKey highTriggerName, high\n\n    return  if @_triggersByKeycode[lowTriggerName]? or @_triggersByKeycode[highTriggerName]?\n    delete @axes[name]\n\n  _releaseAll: ->\n    for name,trigger of @actions\n      trigger.release()\n\n    for keyName, triggers of @keys\n      for trigger in triggers\n        trigger.release()\n\n  ###*\n  Emitted whenever a trigger or key associated with <action> emits a [`hit`](Trigger#event_hit) event.\n  See also: [`<action>`](#event_<action>)\n\n  @event <action>:hit\n\n  @example\n      var controls = new cg.input.ControlMap({shoot: 'space'});\n      \n      controls.on('shoot:hit', function () {\n        cg.log('Shooting!');\n      });\n  ###\n  ###*\n  Shorthand event synonymous with [`<action>:hit`](#event_<action>:hit).\n\n  @event <action>\n  \n  @example\n      var controls = new cg.input.ControlMap({shoot: 'space'});\n      \n      controls.on('shoot', function () {\n        cg.log('Shooting!');\n      });\n  ###\n  _triggerKeyDown: (keyCode) ->\n    return  if @paused\n    triggers = @_triggersByKeycode[keyCode]\n    return false  if not triggers\n    for t in triggers\n      if t.trigger()\n        for l in @listeners\n          l.emit \"#{t.name}:hit\"\n          l.emit t.name\n\n    return true\n\n  ###*\n  Emitted whenever a trigger or key associated with <action> emits a [`release`](Trigger#event_release) event.\n  \n  See also:\n\n    * [`!<action>`](#event_!<action>)\n\n  @event <action>:release\n\n  @example\n      var controls = new cg.input.ControlMap({shoot: 'space'});\n      \n      controls.on('shoot:release', function () {\n        cg.log('No longer shooting!');\n      });\n  ###\n  ###*\n  Shorthand event synonymous with [`<action>:release`](#event_<action>:release).\n\n  @event !<action>\n  \n  @example\n      var controls = new cg.input.ControlMap({shoot: 'space'});\n      \n      controls.on('!shoot', function () {\n        cg.log('No longer shooting!');\n      });\n  ###\n  _triggerKeyUp: (keyCode) ->\n    return  if @paused\n    triggers = @_triggersByKeycode[keyCode]\n    return false  if not triggers\n    for t in triggers\n      if t.release()\n        for l in @listeners\n          l.emit \"#{t.name}:release\"\n          l.emit \"!#{t.name}\"\n\n    return true\n\nmodule.exports = ControlMap",
    "cg = require 'cg'\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\nAxis = require 'input/Axis'\nControlMap = require 'input/ControlMap'\nTouch = require 'input/Touch'\nMultiTrigger = require 'input/MultiTrigger'\nTrigger = require 'input/Trigger'\n\n###*\nThe dispatcher/tracker of input events.\n\n@class cg.input.InputManager\n@extends cg.Module\n@uses cg.util.HasSignals\n###\nclass InputManager extends Module\n  @mixin HasSignals\n  \n  ###\n  A reference to the [`Axis`](cg.input.Axis.html) class.\n  @property Axis\n  ###\n  Axis: Axis\n\n  ###\n  A reference to the [`ControlMap`](cg.input.ControlMap.html) class.\n  @property ControlMap\n  ###\n  ControlMap: ControlMap\n\n  ###\n  A reference to the [`Touch`](cg.input.Touch.html) class.\n  @property Touch\n  ###\n  Touch: Touch\n\n  ###\n  A reference to the [`InputManager`](cg.input.InputManager.html) class.\n  @property InputManager\n  ###\n  InputManager: InputManager\n\n  ###\n  A reference to the [`MultiTrigger`](cg.input.MultiTrigger.html) class.\n  @property MultiTrigger\n  ###\n  MultiTrigger: MultiTrigger\n\n  ###\n  A reference to the [`Trigger`](cg.input.Trigger.html) class.\n  @property Trigger\n  ###\n  Trigger: Trigger\n\n  @_generateKeyNameMap: ->\n    cg.__keyNames = {}\n    for own name,codes of cg.__keys\n      if not cg.util.isArray codes\n        codes = [codes]\n      for code in codes\n        cg.__keyNames[code] ?= []\n        cg.__keyNames[code].push name\n\n  constructor: ->\n    @mouse = new Touch\n    @touches = (new Touch(i) for i in [0..10])\n\n    @touch = @touches[0]\n    @lmb = new Touch\n    @mmb = new Touch\n    @rmb = new Touch\n    @any = new Trigger\n\n    @key = {}\n\n    for own name of cg.__keys\n      @key[name] = new Trigger\n\n    @controls = {}\n    \n  ###*\n  Register a control map to a specified name; this is required for the `ControlMap` to become active, since\n  the `InputManager` is what forwards raw input events to the map.\n\n  @method map\n  @protected\n  @param namespace {String} A unique identifier for the control map to add.\n  @param map {Object|cg.input.ControlMap} The control map object to add.\n  @return {cg.input.ControlMap} The map that was added.\n  ###\n  map: (namespace, map) ->\n    if not (map instanceof ControlMap)\n      map = new ControlMap map\n    \n    if @controls[namespace]?\n      throw new Error \"InputManager: A ControlMap with namespace \\\"#{map.namespace}\\\" already exists; remove it with _removeControlMap before replacing it.\"\n\n    # TODO: Automatically generate a namespace when not specified\n    @controls[namespace] = map\n    return map\n\n  ###*\n  Un-register a `ControlMap` by name or value.\n\n  @method _removeControlMap\n  @param map {String|cg.input.ControlMap}\n\n  @example\n      // Remove an existing ControlMap by its object value:\n      cg.input._removeControlMap(shipControls); // shipControls is an existing ControlMap object.\n  \n  @example\n      // Remove a ControlMap by its namespace:\n      cg.input._removeControlMap('ship'); // `cg.input.controls.ship` is now `undefined`\n  ###\n  _removeControlMap: (map) ->\n    if typeof map is 'string'\n      toDelete = [map] # Namespace was passed.\n    else\n      toDelete = []\n      for own namespace, _map of @controls when _map is map\n        toDelete.add namespace\n\n    for namespace in toDelete\n      delete @controls[namespace]\n    return\n\n  ###*\n  Emitted whenever a key's state goes from not-pressed, to pressed.\n\n  @event keyDown\n  @param keyName {String}\n  @example\n      cg.input.on('keyDown', function (keyName) {\n        if (keyName == 'space') {\n          cg.log('Space bar was hit!');\n        }\n      });\n  ###\n  ###*\n  Emitted whenever a key's state goes from not-pressed, to pressed.\n\n  @event keyDown:<keyName>\n  @example\n      cg.input.on('keyDown:space', function () {\n        cg.log('Space bar was hit!');\n      });\n  ###\n  ###*\n  Emitted whenever a key is pressed, a mouse button is clicked, or a touch event begins.\n\n  @event any\n  @example\n      cg.input.on('any', function () {\n        splashScreen.hide();\n      });\n  ###\n  _triggerKeyDown: (keyCode) ->\n    keyNames = cg.__keyNames[keyCode]\n    if keyNames?\n      for name in keyNames\n        if @key[name].trigger()\n          @emit 'keyDown', name\n          @emit 'keyDown:' + name\n\n    @any.trigger()\n    @emit 'any'\n    @emit 'anyDown'\n\n    for own ns,map of @controls\n      map._triggerKeyDown keyCode\n\n  ###*\n  Emitted whenever a key's state goes from pressed, to not-pressed.\n\n  @event keyUp\n  @param keyName {String}\n  @example\n      cg.input.on('keyUp', function (keyName) {\n        if (keyName == 'space') {\n          cg.log('Space bar was released!');\n        }\n      });\n  ###\n  ###*\n  Emitted whenever a key's state goes from pressed, to not-pressed.\n\n  @event keyUp:<keyName>\n  @example\n      cg.input.on('keyUp:space', function () {\n        cg.log('Space bar was released!');\n      });\n  ###\n  _triggerKeyUp: (keyCode) ->\n    keyNames = cg.__keyNames[keyCode]\n    if keyNames?\n      for name in keyNames\n        if @key[name].release()\n          @emit 'keyUp', name\n          @emit 'keyUp:' + name\n\n    @any.release()\n    @emit 'anyUp'\n    @emit '!any'\n\n    for own ns,map of @controls\n      map._triggerKeyUp keyCode\n\n  # TODOC: this isn't really implemented properly yet:\n  _triggerKeyPress: (charCode) ->\n    @emit 'keyPress', charCode\n\n  ###*\n  Emitted whenever a new indicator appears on the touch surface, or mouse button gets pressed.\n\n  @event touchDown\n  @param gesturer {Touch} The touch or mouse gesturer.\n  @example\n      cg.input.on('touchDown', function (gesturer) {\n        cg.log('touchDown at (' + gesturer.x + ', ' + gesturer.y + ')!');\n      });\n  ###\n  _triggerTouchDown: (screenX, screenY, num) ->\n    [x, y] = @_transformDeviceCoordinates screenX, screenY\n    t = @touches[num]\n    t.moveTo x, y\n    t.trigger()\n\n    if num is 0\n      @touch.moveTo x, y\n      @touch.trigger()\n    \n    @any.trigger()      \n    @emit 'any'\n    @emit 'anyDown'\n\n    @emit 'touchDown', t\n\n  ###*\n  Emitted whenever an indicator is dragged on the touch surface, or the mouse moves with any buttons held.\n\n  @event touchDrag\n  @param gesturer {Touch} The touch or mouse gesturer.\n  @example\n      cg.input.on('touchDrag', function (gesturer) {\n        cg.log('touchDrag motion: (' + gesturer.dx + ', ' + gesturer.dy + ')!');\n      });\n  ###\n  _triggerTouchDrag: (screenX, screenY, num) ->\n    [x, y] = @_transformDeviceCoordinates screenX, screenY\n    t = @touches[num]\n    t.moveTo x, y\n\n    if num is 0\n      @touch.moveTo x, y\n\n    @emit 'touchDrag', t\n\n  ###*\n  Emitted whenever an indicator is removed from the touch surface, or mouse button gets released.\n\n  @event touchUp\n  @param gesturer {Touch} The touch or mouse gesturer.\n  @example\n      cg.input.on('touchUp', function (gesturer) {\n        cg.log('touchUp at (' + gesturer.x + ', ' + gesturer.y + ')!');\n      });\n  ###\n  _triggerTouchUp: (screenX, screenY, num) ->\n    t = @touches[num]\n    t.x = t.y = undefined\n    t.release()\n\n    if num is 0\n      @touch.x = @touch.y = undefined\n      @touch.release()\n\n    @emit 'touchUp', t\n\n    @any.release()\n    @emit 'anyUp'\n    @emit '!any'\n\n  ###*\n  Emitted whenever a mouse button is pressed.\n\n  **NOTE**: A [`touchDown`](#event_touchDown) event will *also* be emitted with the generic gesturer `cg.input.touch` when the\n  left mouse button (but not for right or middle) is pressed.\n\n  @event mouseDown\n  @param which {Number} an integer representing which mouse button was pressed.\n  One of the following:\n\n    * 1: Left Mouse Button\n    * 2: Middle Mouse Button\n    * 3: Right Mouse Button\n  ###\n  _triggerMouseDown: (which) ->\n    switch which\n      when 1\n        @mouse.trigger()\n        @lmb.trigger()\n        @touch.trigger()\n        @emit 'touchDown', @touch\n      when 2\n        @mmb.trigger()\n      when 3\n        @rmb.trigger()\n      else\n        cg.warn \"InputManager: Unexpected mouse button number: #{which}; ignoring.\"\n        return\n\n    @any.trigger()\n    @emit 'any'\n    @emit 'anyDown'\n\n    @emit 'mouseDown', which\n\n  ###*\n  Emitted whenever a mouse moves.\n\n  **NOTE**: A [`touchDrag`](#event_touchDown) event will *also* be emitted with the generic gesturer `cg.input.touch` when the\n  left mouse button (but not for right or middle) is held.\n\n  @event mouseDown\n  @param {Touch} a reference to a gesturer representing the mouse that moved\n  ###\n  _triggerMouseMove: (screenX, screenY) ->\n    [x, y] = @_transformDeviceCoordinates screenX, screenY\n\n    for mapping in [@touch, @lmb, @mmb, @rmb]\n      mapping.moveTo x, y\n\n    if @touch.held()\n      @emit 'touchDrag', @touch\n\n    @mouse.moveTo x, y\n    @emit 'mouseMove', @mouse\n\n    return\n\n  ###*\n  Emitted whenever a mouse button is released.\n\n  **NOTE**: A [`touchUp`](#event_touchUp) event will *also* be emitted with the generic gesturer `cg.input.touch` when the\n  left mouse button (but not for right or middle) is released.\n\n  @event mouseDown\n  @param which {Number} an integer representing which mouse button was released.\n  One of the following:\n\n    * 1: Left Mouse Button\n    * 2: Middle Mouse Button\n    * 3: Right Mouse Button\n  ###\n  _triggerMouseUp: (which) ->\n    @any.release()\n\n    switch which\n      when 1\n        @mouse.release()\n        @lmb.release()\n        @touch.release()\n        @emit 'touchUp', @touch\n      when 2\n        @mmb.release()\n      when 3\n        @rmb.release()\n\n    @emit 'mouseUp', which\n\n    @any.release()\n    @emit 'anyUp'\n    @emit '!any'\n\nmodule.exports = InputManager",
    "Trigger = require 'input/Trigger'\n\n###*\nA special trigger that can be triggered by any number of other triggers.\n\n(Yo dawg...)\n\n@class cg.input.MultiTrigger\n@extends cg.input.Trigger\n###\nclass MultiTrigger extends Trigger\n  constructor: ->\n    @triggers = []\n    super\n\n  # TODO: Use signals instead of modifying methods.\n  ###*\n  Add a trigger to the list of triggers that cause this to trigger.\n\n  @method addTrigger\n  @param trigger {Trigger}\n  ###\n  addTrigger: (trigger) ->\n    _trigger = trigger.trigger\n    trigger.trigger = =>\n      _trigger.call trigger\n      @trigger()\n\n    _release = trigger.release\n    trigger.release = =>\n      _release.call trigger\n      @release()\n\n    @triggers.push trigger\n  ###*\n  Remove a trigger from the list of triggers that cause this to trigger.\n  \n  @method removeTrigger\n  @param trigger {Trigger}\n  ###\n  removeTrigger: (trigger) ->\n    idx = @triggers.indexOf trigger\n    if idx < 0\n      cg.warn 'MultiTrigger::removeTrigger: trigger to remove was not found in my list of triggers; aborting.'\n      return\n    @triggers.splice idx, 1\n\nmodule.exports = MultiTrigger",
    "###\ncombo.js - Copyright 2012-2013 Louis Acresti - All Rights Reserved\n###\n\nTrigger = require 'input/Trigger'\n\n###*\nA trigger with some extra properties; useful for representing things like fingers on touch screens, and mouse cursors.\n\n@class cg.input.Touch\n@extends cg.input.Trigger\n@constructor\n@param [number=-1] {Number}\nA unique index (often representing a finger #) for this gesturer.\n###\nclass Touch extends Trigger\n  constructor: (@number=-1) ->\n    super\n\n    ###*\n    The x-coordinate in virtual screen space of this gesturer's current location.\n\n    **NOTE**: This value will be `undefined` if the touch indicator associated with this is not actively touching \n    the touch surface. (This does not apply to gesturers that refer to mouse buttons.)\n    @property x\n    @type Number\n    ###\n    @x = NaN\n\n    ###*\n    The y-coordinate in virtual screen space of this gesturer's current location.\n\n    **NOTE**: This value will be `undefined` if the touch indicator associated with this is not actively touching \n    the touch surface. (This does not apply to gesturers that refer to mouse buttons.)\n    @property y\n    @type Number\n    ###\n    @y = NaN\n\n  moveTo: (x, y) ->\n    oldX = @x\n    oldY = @y\n    \n    @x = x\n    @y = y\n\n    ###*\n    The x-component of the distance this gesturer traveled in the last motion event caused by [`moveTo`](#method_moveTo).\n    @property dx\n    @type Number\n    ###\n    @dx = @x - oldX\n\n    ###*\n    The y-component of the distance this gesturer traveled in the last motion event caused by [`moveTo`](#method_moveTo).\n    @property dy\n    @type Number\n    ###\n    @dy = @y - oldY\n\n    ###*\n    Emitted whenever this gesturer moves.\n\n    @event move\n    @param gesturer\n    A reference to this gesturer.\n    ###\n    @emit 'move', @\n\n    if @held()\n      ###*\n      Emitted whenever this gesturer moves while it is [`held()`](cg.input.Trigger.html#method_held).\n\n      @event drag\n      @param gesturer\n      A reference to this gesturer.\n      ###\n      @emit 'drag', @\n\nmodule.exports = Touch",
    "cg = require 'cg'\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\n\n# TODO add option for a different source for `currentTime`; a `Scene`, essentially.\n###*\nA generic representation of something that can be \"on\" or \"off\", \"pressed\" or \"released\", etc.\n\n@class cg.input.Trigger\n@extends cg.Module\n@uses cg.util.HasSignals\n###\nclass Trigger extends Module\n  @mixin HasSignals\n  constructor: ->\n    @lastPressedTime = -2\n    @lastReleasedTime = -1\n\n  ###*\n  Cause this trigger to be ... triggered.\n\n  In other words, change its status to \"on\" or \"pressed\".\n\n  @method trigger\n  @return {Boolean} `true` if the trigger's status changed.\n  ###\n  trigger: ->\n    return false  if @held()\n    @lastPressedTime = cg.currentTime\n    ###*\n    Emitted immediately when this trigger is [`triggered`](#method_trigger).\n\n    @event hit\n    @param trigger {Trigger} a reference to this `Trigger`\n    ###\n    @emit 'hit', @\n    return true\n\n  ###*\n  Cause this trigger to be released.\n\n  In other words, change its status to \"off\" or \"released\".\n\n  @method release\n  @return {Boolean} `true` if the trigger's status changed.\n  ###\n  release: ->\n    return false  if not @held()\n    @lastReleasedTime = cg.currentTime\n    @emit 'release', @\n    return true\n\n  ###*\n  Poll whether this trigger was _just_ triggered.\n\n  @method hit\n  @return {Boolean} `true` if triggered this update-cycle.\n  ###\n  hit: ->\n    (@lastPressedTime >= 0) and (cg.currentTime - @lastPressedTime == 0)\n\n  ###*\n  Poll whether this trigger is currently held-down.\n\n  @method held\n  @return {Boolean} `true` if held-down this update-cycle\n  ###\n  held: ->\n    @lastPressedTime > @lastReleasedTime\n\n  ###*\n  Poll whether this trigger if this trigger was _just_ released.\n\n  @method released\n  @return {Boolean} `true` if released this update-cycle\n  ###\n  released: ->\n    @lastReleasedTime >= 0 and (cg.currentTime - @lastReleasedTime == 0)\n  \n  ###*\n  Poll how long this trigger has been held down for.\n\n  @method heldTime\n  @return {Number(milliseconds)} the amount of time this trigger has been held down for\n  ###\n  heldTime: ->\n    if !@held()\n      return 0\n    return cg.currentTime - @lastPressedTime\n\nmodule.exports = Trigger",
    "# Adapted from Nonsense.js (https://github.com/jocafa/Nonsense)\nModule = require 'Module'\n\nhash = (data) ->\n  h = undefined\n  i = undefined\n  n = undefined\n  n = 0xefc8249d\n  data = data.toString()\n  i = 0\n  while i < data.length\n    n += data.charCodeAt(i)\n    h = 0.02519603282416938 * n\n    n = h >>> 0\n    h -= n\n    h *= n\n    n = h >>> 0\n    h -= n\n    n += h * 0x100000000 # 2^32\n    i++\n  (n >>> 0) * 2.3283064365386963e-10 # 2^-32\n\n# private random helper\nrnd = ->\n  t = 2091639 * @s0 + @c * 2.3283064365386963e-10 # 2^-32\n  @c = t | 0\n  @s0 = @s1\n  @s1 = @s2\n  @s2 = t - @c\n  @s2\n\n\n###*\nA [pseudo-random number generator](http://en.wikipedia.org/wiki/Pseudorandom_number_generator) with convenient utility methods.\n\nAll `Random` instances are actually bound `Function` objects with instance methods attached to it (not unlike the `jQuery` object).\n\nA global instance is always available as `cg.rand`.\n\n**NOTE**: You must use [`cg.math.Random.create`](#method_create); `new Random` will not work.\n\n@class cg.math.Random\n###\nclass Random extends Module\n  ###*\n  Create a new random number generator.\n\n  @static\n  @method create\n  @param [...] arguments will be passed to an invocation of [`sow(...)`](#method_sow).\n  ###\n  @create: ->\n    rand = new Random arguments...\n    ret = rand.default.bind rand\n\n    for k,v of rand\n      ret[k] = v\n\n    return ret\n\n  ###*\n  If no arguments are passed, a random number in the range (0, 1) will be returned.\n\n  @method default\n  @param [arg0] {Number | Array}\n  - If a single number is passed, a random number in the range (0, `number`) will be returned.\n  - If an array is passed, [`pick`](#method_pick) will choose a single element and return it.\n\n  @param [arg1] {Number}\n  If supplied, a random number in the range (`arg0`, `arg1`) will be returned.\n\n  @example\n      var amount = cg.rand(); // Will be between 0 and 1.\n\n  @example\n      var amount = cg.rand(100); // Will be between 0 and 100.\n\n  @example\n      var amount = cg.rand(-100,100); // Will be between -100 and 100\n\n  @example\n      // One color name will be chosen and returned:\n      var choice = cg.rand(['red', 'green', 'blue', 'purple', 'orange']);\n  ###\n  default: (args...) ->\n    switch args.length\n      when 0\n        return @fract32()\n      when 1\n        if cg.util.isArray args[0]\n          return @pick args[0]\n        if typeof args[0] is 'number'\n          @range 0, args[0]\n      else\n        @range args[0], args[1]\n\n  constructor: ->\n    @sow arguments...\n\n  ###*\n  \"Seed\" the random sequence with any arbitrary data.\n\n  @method sow\n  @param [...] any number of arbitrary arguments will be used as seed data after being converted\n  to strings with `toString`.\n  ###\n  sow: ->\n    i = undefined\n    seeds = undefined\n    seed = undefined\n    @s0 = hash(' ')\n    @s1 = hash(@s0)\n    @s2 = hash(@s1)\n    @c = 1\n    seeds = Array::slice.call arguments\n    i = 0\n    while seed = seeds[i++]\n      @s0 -= hash(seed)\n      @s0 += ~~(@s0 < 0)\n      @s1 -= hash(seed)\n      @s1 += ~~(@s1 < 0)\n      @s2 -= hash(seed)\n      @s2 += ~~(@s2 < 0)\n    return\n\n  ###*\n  @method uint32\n  @return a random integer between 0 and 2^32.\n  ###\n  uint32: ->\n    rnd.apply(this) * 0x100000000 # 2^32\n\n  ###*\n  @method fract32\n  @return a random real number between 0 and 1.\n  ###\n  fract32: ->\n    rnd.apply(this) + (rnd.apply(this) * 0x200000 | 0) * 1.1102230246251565e-16 # 2^-53\n\n  ###*\n  @method real\n  @return a random real number between 0 and 2^32.\n  ###\n  real: ->\n    @uint32() + @fract32()\n\n  ###*\n  @method int\n  @return a random integer between min and max.\n  ###\n  i: (min, max) ->\n    Math.floor @range(min, max)\n\n  ###*\n  @method range\n  @param min {Number}\n  @param max {Number}\n  @return random real number between min and max.\n  ###\n  range: (min, max) ->\n    min = min or 0\n    max = max or 0\n    @fract32() * (max - min) + min\n\n  ###*\n  @method normal\n  @return a random real number between -1 and 1.\n  ###\n  normal: ->\n    1 - 2 * @fract32()\n\n  uuid: ->\n    # from https://gist.github.com/1308368\n    a = undefined\n    b = undefined\n    b = a = ''\n    while a++ < 36\n      b += (if ~a % 5 | a * 3 & 4 then ((if a ^ 15 then 8 ^ @fract32() * ((if a ^ 20 then 16 else 4)) else 4)).toString(16) else '-')\n    b\n\n  uuidObj: ->\n    u = @uuid()\n    ret = new Uint32Array 4\n    for segment,i in u.split '-'\n      ret[i] = parseInt '0x' + segment\n    return ret\n\n  ###*\n  @method pick\n  @param array {Array} an array of things to choose from\n  @return a random member of `array`.\n  ###\n  pick: (array) ->\n    array[@i(0, array.length)]\n\n  ###*\n  @method weightedPick\n  @param array {Array} an array of things to choose from\n  @return a random member of `array`, favoring the earlier entries.\n  ###\n  weightedPick: (array) ->\n    array[~~(Math.pow(@fract32(), 2) * array.length)]\n\nmodule.exports = {\n  create: Random.create\n}\n",
    "###*\nA two-dimensional vector representation with utility methods.\n\n@class cg.math.Vector2\n@param [x=0] the horizontal component of the vector.\n@param [y=0] the vertical component of the vector.\n###\nclass Vector2\n  ###*\n  The horizontal component of this vector.\n\n  @property x\n  @type Number\n  ###\n  ###*\n  The vertical component of this vector.\n\n  @property y\n  @type Number\n  ###\n  constructor: (@x=0, @y=0) ->\n\n  ###*\n  @method clone\n  @return {cg.math.Vector2} a copy of this vector.\n  ###\n  clone: ->\n    new Vector2 @x, @y\n\n  ###*\n  Set the values of this vector to those of another.\n\n  @method set\n  @param other {cg.math.Vector2}\n  @chainable\n  ###\n  set: (other) ->\n    {@x, @y} = other\n    return @\n\n  ###*\n  Find the dot product of this vector with another.\n\n  @method dot\n  @param other {cg.math.Vector2} the other vector to perform the dot product with.\n  @return {Number} the dot product of this vector with `other`.\n  ###\n  dot: (other) ->\n    @x * other.x + @y * other.y\n\n  ###*\n  Get the square of the length of this vector (faster than [`len`](#method_len)\n  since no `sqrt` is necessary).\n\n  @method len2\n  @return the square of the length of this vector.\n  ###\n  len2: ->\n    @x*@x + @y*@y\n\n  ###*\n  Get the length of this vector.\n\n  @method len\n  @return the length of this vector.\n  ###\n  len: ->\n    Math.sqrt @x*@x + @y*@y\n\n\n  ###*\n  Set the magnitude of this vector.\n\n  @method mag\n  @param amount {Number} the magnitude you wish this vector to aquire\n  @chainable\n  ###\n  mag: (amount) ->\n    @$norm().$mul(amount)\n    return @\n\n  ###*\n  Determine the angle this vector is facing, in radians.\n\n  0 radians starts at (1, 0) and goes clockwise according\n  to Combo's coordinate system.\n\n  @method angle\n  @return {Number} the angle of the vector in radians\n  ###\n  angle: ->\n    Math.atan2 @y, @x\n\n  ###*\n  Set the length of this vector to zero.\n\n  Effectively the same as `this.x = this.y = 0`.\n\n  @method zero\n  @chainable\n  ###\n  zero: ->\n    @x = @y = 0\n    return @\n\n  ###*\n  Compute the addition of this vector with another.\n\n  @method add\n  @param other {cg.math.Vector2} the other vector to add to this one.\n  @return {cg.math.Vector2} a new vector representing the vector-sum of this and `other`.\n  ###\n  add: (other) ->\n    new Vector2 @x+other.x, @y+other.y\n  \n  ###*\n  Compute the subtraction of this vector with another.\n\n  @method sub\n  @param other {cg.math.Vector2} the other vector to subtract from this one.\n  @return {cg.math.Vector2} a new vector representing the vector-difference of this and `other`.\n  ###\n  sub: (other) ->\n    new Vector2 @x-other.x, @y-other.y\n\n  ###*\n  Compute the multiplication of this vector with a scalar.\n\n  Effectively the same as `new Vector2(this.x * scalar, this.y * scalar)`.\n\n  @method mul\n  @param scalar {Number} the number to multiply this vector's components by.\n  @return {cg.math.Vector2} a new vector representing the result of the multiplication.\n  ###\n  mul: (scalar) ->\n    new Vector2 @x*scalar, @y*scalar\n\n  ###*\n  Compute the division of this vector with a scalar.\n\n  Effectively the same as `new Vector2(this.x / scalar, this.y / scalar)`.\n\n  @method div\n  @param scalar {Number} the number to divide this vector's components by.\n  @return {cg.math.Vector2} a new vector representing the result of the division.\n  ###\n  div: (scalar) ->\n    new Vector2 @x/scalar, @y/scalar\n\n  ###*\n  Ensures this vector's length/magnitude isn't larger than a specified scalar.\n\n  @method limit\n  @param amount {Number} the maximum length/magnitude to allow this vector to have\n  ###\n  limit: (amount) ->\n    if @len() > amount\n      @$norm().$mul(amount)\n\n    return @\n\n  ###*\n  Compute a normalized version of this vector.\n\n  @method norm\n  @return {cg.math.Vector2} A new normalized version of this vector.\n  ###\n  norm: ->\n    len = @len()\n    return new Vector2  if len is 0\n    return new Vector2 @x/len, @y/len\n\n  ###*\n  Point this vector in a random direction with a given length.\n\n  @method randomize\n  @param [len=1] {Number} the new length of this vector.\n  @chainable\n  ###\n  randomize: (len=1) ->\n    ang = 2 * Math.random() * Math.PI\n    @x = len * Math.cos ang\n    @y = len * Math.sin ang\n    return @\n\n  ###*\n  Add a vector to this vector, modifying this vector \"in-place\".\n\n  @method $add\n  @param other {cg.math.Vector2} the other vector to add to this one.\n  @chainable\n  ###\n  $add: (other) ->\n    @x += other.x\n    @y += other.y\n    return @\n\n  ###*\n  Subtract a vector from this vector, modifying this vector \"in-place\".\n\n  @method $sub\n  @param other {cg.math.Vector2} the other vector to subtract from this one.\n  @chainable\n  ###\n  $sub: (other) ->\n    @x -= other.x\n    @y -= other.y\n    return @\n\n  ###*\n  Multiply this vector by a scalar, modifying this vector \"in-place\".\n\n  Effectively the same as `this.x *= scalar; this.y *= scalar`.\n\n  @method $mul\n  @param scalar {Number} the number to multiply this vector's components by.\n  @chainable\n  ###\n  $mul: (scalar) ->\n    @x *= scalar\n    @y *= scalar\n    return @\n\n  ###*\n  Divide this vector by a scalar, modifying this vector \"in-place\".\n\n  Effectively the same as `this.x /= scalar; this.y /= scalar`.\n\n  @method $div\n  @param scalar {Number} the number to divide this vector's components by.\n  @chainable\n  ###\n  $div: (scalar) ->\n    @x /= scalar\n    @y /= scalar\n    return @\n\n  ###*\n  Normalize this vector \"in-place\".\n\n  @method $norm\n  @chainable\n  ###\n  $norm: ->\n    len = @len()\n    return @  if len is 0\n    @x /= len\n    @y /= len\n    return @\n\nmodule.exports = Vector2",
    "Vector2 = require 'math/Vector2'\nRandom = require 'math/Random'\n\nmodule.exports = {\n  Vector2: Vector2\n  Random: Random\n\n  clamp: (n, min, max) ->\n    Math.min(max, Math.max(n, min))\n\n  mod: (num, n) -> ((num%n)+n)%n\n\n  wrap: (num, min, max) ->\n    return (cg.math.mod num-min, max-min) + min\n}\n",
    "cg = require 'cg'\nScene = require 'Scene'\nMenuItem = require 'menus/MenuItem'\n\n###*\nTODOC\n\n@class cg.menus.Menu\n@extends cg.Scene\n###\nclass Menu extends Scene   \n  constructor: ->\n    super\n\n    @controls ?= cg.input.controls.menus\n    \n    @on 'up',     -> @selectItem @selected.above\n    @on 'down',   -> @selectItem @selected.below\n    @on 'left',   -> @selectItem @selected.left\n    @on 'right',  -> @selectItem @selected.right\n    @on 'select', -> @selected.select()\n\n  selectItem: (item) ->\n    return  if not item?\n    @selected?.blur()\n    @selected = item\n    item.focus()\n\nmodule.exports = Menu",
    "cg = require 'cg'\nActor = require 'Actor'\n\n###*\nTODOC\n\n@class cg.menus.MenuItem\n@extends cg.Actor\n###\nclass MenuItem extends Actor\n  constructor: ->\n    super\n    @focused ?= false\n\n  focus: ->\n    @emit 'focus'\n    @focused = true\n\n  blur: ->\n    @emit 'blur'\n    @focused = false\n\n  select: ->\n    @emit 'select'\n\nmodule.exports = MenuItem",
    "cg = require 'cg'\nMenuItem = require 'menus/MenuItem'\nBitmapText = require 'text/BitmapText'\n\n###*\nTODOC\n\n@class cg.menus.TextMenuItem\n@extends MenuItem\n###\nclass TextMenuItem extends MenuItem\n  constructor: (@font, @string='', params) ->\n    super params\n    \n    @blurAlpha ?= 0.5\n    @focusAlpha ?= 1\n\n    @alpha = @blurAlpha\n\n    @textString = @addChild new BitmapText @font, @string,\n      alignment: @alignment\n      spacing: @spacing\n\n  focus: ->\n    super\n    @alpha = @focusAlpha\n\n  blur: ->\n    super\n    @alpha = @blurAlpha\n\n  updateText: ->\n    @textString.string = @string\n    @textString.updateText()\n\nmodule.exports = TextMenuItem",
    "cg = require 'cg'\nMenu = require 'menus/Menu'\nTextMenuItem = require 'menus/TextMenuItem'\n\n###*\nTODOC\n\n@class cg.menus.VerticalMenu\n@extends Menu\n###\nclass VerticalMenu extends Menu\n  constructor: ->\n    super\n\n    @spacing ?= 1\n    @items ?= []\n    _items = @items\n    itemNames = []\n    @items = {}\n    @alignment ?= 'center'\n    @lineHeight ?= @font.lineHeight\n    itemHeight = (@lineHeight * @font.charHeight) + @spacing\n    @anchor = {}\n\n    if @alignment is 'center'\n      @anchor.x = @anchor.y = 0.5\n    @height = itemHeight * _items.length - @spacing\n    \n    top = -@height/2 + itemHeight/2\n\n    for item, num in _items\n      name = '_UNDEFINED_'\n      switch typeof item\n        when 'string'\n          if not @font?\n            throw new Error 'No font specified.'\n          name = item\n          @items[name] = @addChild new TextMenuItem(@font, item,\n            alignment: @alignment\n            spacing: @spacing\n            y: top + num * itemHeight\n          ), 'items'\n        when 'object'\n          name = item.name\n          item = item.item\n          item.y = top + num * itemHeight\n          @items[name] = @addChild item, 'items'\n        else\n          throw new Error 'Unexpected menu item type: ' + typeof item\n      itemNames.push name\n    i=0\n    for own k,item of @items\n      @selectItem item  if i is 0\n      item.above = @items[itemNames[cg.math.mod(i-1, itemNames.length)]]\n      item.below = @items[itemNames[cg.math.mod(i+1, itemNames.length)]]\n      ++i\n\nmodule.exports = VerticalMenu",
    "Menu = require 'menus/Menu'\nMenuItem = require 'menus/MenuItem'\nTextMenuItem = require 'menus/TextMenuItem'\nVerticalMenu = require 'menus/VerticalMenu'\n\nmodule.exports = {\n  Menu: Menu\n  MenuItem: MenuItem\n  TextMenuItem: TextMenuItem\n  VerticalMenu: VerticalMenu\n  defaultControlMap:\n    up: 'up'\n    down: 'down'\n    left: 'left'\n    right: 'right'\n    select: ['enter', 'space']\n    back: 'esc'\n  init: (defaultControls=index.defaultControlMap) ->\n    cg.input.map 'menus', defaultControls\n}\n",
    "cg = require 'cg'\nModule = require 'Module'\n\n###*\nTODOC\n@class cg.physics.Body\n@extends cg.Module\n@constructor\n@param actor {Actor} The actor associated with this body.\n@param [props] {Object} Optional starting values of this body's properties (only those listed below will be applied)\n@param [props.shape=new_AABB] {Shape} The shape associated with this body.\n@param [props.bounce=0.5] {Number} The starting value of [`bounce`](#property_bounce).\n@param [props.bounds=0.5] {Number} The starting value of [`bounds`](#property_density).\n@param [props.density=0.5] {Number} The starting value of [`density`](#property_density).\n@param [props.gravityScale=1.0] {Number} The starting value of [`gravityScale`](#property_density).\n###\nclass Body extends Module\n  constructor: (@actor, {@shape, @density, @bounce, @gravityScale, @bounds}) ->\n    @v = new cg.math.Vector2\n    @f = new cg.math.Vector2\n\n    # TODO: This is a bit hackish.\n    # Basically, setting offset will actually\n    #  reposition the actor; this restores its original\n    #  position when body.offset changes.\n    @offset = new cg.math.Vector2\n    ox = 0\n    oy = 0\n    Object.defineProperty @offset, 'x',\n      get: -> ox\n      set: (val) =>\n        x = @actor.x\n        ox = val\n        @actor.x = x\n\n    Object.defineProperty @offset, 'y',\n      get: -> oy\n      set: (val) =>\n        y = @actor.y\n        oy = val\n        @actor.y = y\n\n    @shape ?= new cg.physics.shapes.AABB\n    @bounded ?= true\n    @bounce ?= 0.5\n    @density ?= 0.5\n    @gravityScale ?= 1\n    @sFriction ?= 0.6\n    @dFriction ?= 0.4\n    @_updateMass()\n\n  _updateMass: ->\n    @shape._areaDirty = false\n    m = @shape.area * @density\n    if m is 0\n      @__inverseMass = 0\n    else\n      @__inverseMass = 1 / m\n\n  ###*\n  The horizontal position of this body; synonymous with `this.shape.x`.\n  @property x\n  @type Number\n  ###\n  Object.defineProperty @::, 'x',\n    get: -> @shape.x\n    set: (val) -> @shape.x = val\n\n  ###*\n  The vertical position of this body; synonymous with `this.shape.y`.\n  @property y\n  @type Number\n  ###\n  Object.defineProperty @::, 'y',\n    get: -> @shape.y\n    set: (val) -> @shape.y = val\n\n  ###*\n  A virtual property representing the left-most point on this body's shape.\n\n  Setting its value will move the shape horizontally so that its left-most point is equal to the value specified.\n  @property left\n  @type Number\n  ###\n  Object.defineProperty @::, 'left',\n    get: -> @shape.left\n    set: (val) -> @shape.left = val\n\n  ###*\n  A virtual property representing the right-most point on this body's shape.\n\n  Setting its value will move the shape horizontally so that its right-most point is equal to the value specified.\n  @property right\n  @type Number\n  ###\n  Object.defineProperty @::, 'right',\n    get: -> @shape.right\n    set: (val) -> @shape.right = val\n\n  ###*\n  A virtual property representing the top-most point on this body's shape.\n\n  Setting its value will move the shape vertically so that its top-most point is equal to the value specified.\n  @property top\n  @type Number\n  ###\n  Object.defineProperty @::, 'top',\n    get: -> @shape.top\n    set: (val) -> @shape.top = val\n\n  ###*\n  A virtual property representing the bottom-most point on this body's shape.\n\n  Setting its value will move the shape vertically so that its bottom-most point is equal to the value specified.\n  @property bottom\n  @type Number\n  ###\n  Object.defineProperty @::, 'bottom',\n    get: -> @shape.bottom\n    set: (val) -> @shape.bottom = val\n\n  ###*\n  The width of this body's shape.\n  @property width\n  @type Number\n  ###\n  Object.defineProperty @::, 'width',\n    get: -> @shape.width\n    set: (val) -> @shape.width = val\n\n  ###*\n  The height of this body's shape.\n  @property height\n  @type Number\n  ###\n  Object.defineProperty @::, 'height',\n    get: -> @shape.height\n    set: (val) -> @shape.height = val\n\n  ###*\n  The mass of this object.\n\n  Changing this property affects [`density`](#property_density) and [`inverseMass`](#property_inverseMass).\n  @property mass\n  @type Number\n  ###\n  Object.defineProperty @::, 'mass',\n    get: ->\n      return 0  if @inverseMass is 0\n      return 1/@inverseMass\n    set: (val) ->\n      @density = val / @shape.area\n      @_updateMass()\n\n  ###*\n  The inverse mass of this object.\n\n  Changing this property affects [`density`](#property_density) and [`mass`](#property_mass).\n  @property inverseMass\n  @type Number\n  ###\n  Object.defineProperty @::, 'inverseMass',\n    get: ->\n      if @shape._areaDirty\n        @_updateMass()\n      return @__inverseMass\n    set: (val) ->\n      if val is 0\n        @density = 0\n      else\n        @density = (1 / val) / @shape.area\n      @_updateMass()\n\n  ###*\n  The mass of this object.\n\n  Changing this property affects [`density`](#property_density) and [`inverseMass`](#property_inverseMass).\n  @property mass\n  @type Number\n  ###\n  Object.defineProperty @::, 'density',\n    get: -> @__density\n    set: (val) ->\n      @__density = val\n      @_updateMass()\n\n  ###*\n  The static coefficient for this body's friction.\n  @property sFriction\n  @type Number\n  ###\n  Object.defineProperty @::, 'sFriction',\n    get: -> @__sFriction\n    set: (val) ->\n      @__sFriction2 = val*val\n      @__sFriction = val\n\n  ###*\n  The square of this body's static coefficient of friction.\n  @property sFriction2\n  @type Number\n  ###\n  Object.defineProperty @::, 'sFriction2',\n    get: -> @__sFriction2\n    set: (val) ->\n      @__sFriction2 = val\n      @__sFriction = Math.sqrt val\n\n  ###*\n  The dynamic coefficient for this body's friction.\n  @property dFriction\n  @type Number\n  ###\n  Object.defineProperty @::, 'dFriction',\n    get: -> @__dFriction\n    set: (val) ->\n      @__dFriction2 = val*val\n      @__dFriction = val\n\n  ###*\n  The square of this body's dynamic coefficient of friction.\n  @property dFriction2\n  @type Number\n  ###\n  Object.defineProperty @::, 'dFriction2',\n    get: -> @__dFriction2\n    set: (val) ->\n      @__dFriction2 = val\n      @__dFriction = Math.sqrt val\n\n  ###*\n  Simple friction coefficient. When read, its value is the same as [`dFriction`](#property_dFriction).\n\n  Setting this value automatically sets [`dFriction`](#property_dFriction) to the value specified, and [`sFriction`](#property_sFriction) 25% higher, capped at 0.95.\n\n  If you need finer control of friction, set [`dFriction`](#property_dFriction) and [`sFriction`](#property_sFriction) separately.\n\n  @property friction\n  @type Number\n  ###\n  Object.defineProperty @::, 'friction',\n    get: -> @dFriction\n    set: (val) ->\n      @dFriction = val\n      @sFriction = Math.min 0.95, val * 1.25\n\n  ###*\n  Update this body's position based on various forces and its current velocity.\n\n  **NOTE:** This method is invoked by the [`PhysicsManager`](cg.physics.PhysicsManager.html) for any bodies that have been added\n  with\n  @method update\n  @param dt {Number[seconds]} the amount of time that passed since the last update.\n  ###\n  update: (dt) ->\n    v = @v\n    f = @f\n\n    v.$add cg.physics.gravity.mul @gravityScale\n\n    v.$add f.$mul(@inverseMass * dt)\n    @x += v.x * dt\n    @y += v.y * dt\n\n    f.zero()\n\n    if @bounded\n      @collideWithBounds @bounds ? cg.physics.bounds\n\n  ###\n  TODO: This needs to work similarly to the other collide/intersect methods.\n  ###\n  collideWithBounds: (bounds) ->\n\n    if bounds.left isnt false and @left < bounds.left\n      @left = bounds.left\n      @v.x *= -@bounce\n      # @v.y *= 0.9\n    else if bounds.right isnt false and @right > bounds.right\n      @right = bounds.right\n      @v.x *= -@bounce\n      # @v.y *= 0.9\n\n    if bounds.top isnt false and @top < bounds.top\n      @top = bounds.top\n      @v.y *= -@bounce\n      # @v.x *= 0.9\n    else if bounds.bottom isnt false and @bottom > bounds.bottom\n      @bottom = bounds.bottom\n      @v.y *= -@bounce\n      # @v.x *= 0.9\n\nmodule.exports = Body",
    "###*\nA description of how two [shapes](cg.physics.shapes.Shape.html) intersect.\n\n@class cg.physics.Intersection\n@constructor\n@param object1 {Shape} The first intersecting shape.\n@param object2 {Shape} The second intersecting shape.\n@param normal {Vector2} The direction to \"push\" the objects out of each other with a minimal distance\n@param penetration {Number} The total distance the shapes would need to move along `normal` for them to no longer intersect.\n###\nclass Intersection\n  ###*\n  The first intersecting shape.\n  @property object1\n  @type {Shape}\n  ###\n  ###*\n  The second intersecting shape.\n  @property object2\n  @type {Shape}\n  ###\n  ###*\n  The direction to \"push\" the objects out of each other with a minimal distance.\n  @property normal\n  @type Vector2\n  ###\n  ###*\n  The total distance the shapes would need to move along `normal` for them to no longer intersect.\n  @property penetration\n  @type Number\n  ###\n  constructor: (@object1, @object2, @normal, @penetration) ->\n\nmodule.exports = Intersection",
    "cg = require 'cg'\n\nPhysical =\n  mixin:\n    # bit.ly/18uWm6i\n    __getPhysical: -> !!@__physical\n    __setPhysical: (val) ->\n      return  if val is !!@__physical\n      @__physical = val\n      if val\n        cg.physics.addBody @body\n      else\n        cg.physics.removeBody @body\n\n    __getX: -> @body.x - @body.offset.x\n    __setX: (val) -> @body.x = val + @body.offset.x\n\n    __getY: -> @body.y - @body.offset.y\n    __setY: (val) -> @body.y = val + @body.offset.y\n\n    __getShape: -> @body.shape\n    __setShape: (val) -> @body.shape = val\n\n    __touches: (other) ->\n      return @body.shape.intersects other.body.shape\n\n    ###\n    Test whether this object touches another object.\n\n    This is effectively shorthand for `this.body.shape.intersects(other.body.shape)`.\n\n    @method touches\n    @param other {Actor|Array<Actor>|Group} The object(s) to test whether this object is touching or not.\n    @return {Actor|null} the first `Actor` that a touch was detected on, if any; `null` if none are touching.\n    ###\n    touches: (others) ->\n      if not cg.util.isArray others\n        return others  if others isnt @ and @__touches others\n      else\n        for other in others\n          return other  if other isnt @ and @__touches other\n        return false\n\n    ###\n    Get the `Intersection` of this object with another, if any exists.\n\n    @method intersects\n    @param other {Actor} The object to test whether this object is touching or not.\n    @return {cg.physics.Intersection} The intersection data of these two objects; `null` if they do not intersect.\n    ###\n    intersects: (other) ->\n      intersection = new cg.physics.Intersection\n      intersects = @body.shape.intersects other.body.shape, intersection\n      if intersects\n        return intersection\n      else\n        return null\n\n  postInit: ->\n    _x = @x ? 0\n    _y = @y ? 0\n    _physical = @physical ? true\n    _width = @width ? 10\n    _height = @height ? 10\n\n    @shape ||= new cg.physics.shapes.AABB _x, _y, _width, _height\n    _shape = @shape\n    @body ||= new cg.physics.Body @,\n      shape: @shape\n\n    ###*\n    Shorthand for `this.body.shape`.\n\n    @property shape\n    @type {cg.physics.shapes.Shape}\n    ###\n    Object.defineProperty @, 'shape',\n      get: @__getShape\n      set: @__setShape\n      enumerable: true\n    @shape = _shape\n\n    ###*\n    The horizontal position relative to `this.parent`.\n\n    **Note**: Updating this property will update `this.body.x`, and vice-versa.\n    @property x\n    @type {Number}\n    ###\n    Object.defineProperty @, 'x',\n      get: @__getX\n      set: @__setX\n      enumerable: true\n    @x = _x\n\n    ###*\n    The vertical position relative to `this.parent`.\n\n    **Note**: Updating this property will update `this.body.y`, and vice-versa.\n    @property y\n    @type {Number}\n    ###\n    Object.defineProperty @, 'y',\n      get: @__getY\n      set: @__setY\n      enumerable: true\n    @y = _y\n\n    ###*\n    Whether or not this actor\n    ###\n    Object.defineProperty @, 'physical',\n      get: @__getPhysical\n      set: @__setPhysical\n      enumerable: true\n    @physical = _physical\n\n  postReset: ->\n    if @physical and (not @body._active)\n      cg.physics.addBody @body\n\n  postDispose: ->\n    cg.physics.removeBody @body\n\nmodule.exports = Physical",
    "PhysicsManager = require 'plugins/physics/PhysicsManager'\n\n###*\nA game-wide plugin that provides a [PhysicsManager](cg.physics.PhysicsManager.html) instance to be used by\n [Physical](cg.physics.Physical.html) objects.\n\n@class cg.physics.Physics\n###\nPhysics =\n  postInit: ->\n    ###*\n    Reference to this game's [`cg.physics.PhysicsManager`](cg.physics.PhysicsManager.html) instance.\n\n    @property physics\n    ###\n    @physics = PhysicsManager._instance\n\n    if @width? and @height?\n      @physics.bounds.left = 0\n      @physics.bounds.right = @width\n      @physics.bounds.top = 0\n      @physics.bounds.bottom = @height\n\n  preUpdate: ->\n    @physics.update()\n\nmodule.exports = Physics\n",
    "cg = require 'cg'\nModule = require 'Module'\nVector2 = require 'math/Vector2'\nBody = require 'plugins/physics/Body'\nIntersection = require 'plugins/physics/Intersection'\nPhysical = require 'plugins/physics/Physical'\nShape = require 'plugins/physics/shapes/Shape'\nAABB = require 'plugins/physics/shapes/AABB'\n\n# TODO: This *could* be optimized, but that's super low-priority.\nclass DebugVisuals extends cg.Actor\n  constructor: (@manager) ->\n    super {}\n    @gfx = @addChild new cg.rendering.Graphics\n\n  update: ->\n    super\n\n    @gfx.clear()\n    @gfx.lineStyle 1, 0x00FF00, 0.8\n    @gfx.beginFill(0,0)\n    for body in @manager.bodies\n      @gfx.drawRect body.x, body.y, body.width, body.height\n    @gfx.endFill()\n\n# Private internal/static/cache variables:\n\nintersection = new Intersection null, null, new Vector2, 0\nrelativeVelocity = new Vector2\n\n###*\nManages the updating/collisions of an arbitrary collection of [bodies](cg.physics.Body.html).\n\n@class cg.physics.PhysicsManager\n@extends cg.Module\n@constructor\n###\nclass PhysicsManager extends Module\n  Body: Body\n  Intersection: Intersection\n  PhysicsManager: PhysicsManager\n  Shape: Shape\n  Physical: Physical\n  \n  @_instance: new PhysicsManager\n\n  intersectFuncs: []\n  collideFuncs: []\n  containsFuncs: []\n\n  __nextShapeID: 0\n  __shapeIDs: {}\n  __shapeNames: []\n\n  correctionPercent: 0.6\n  correctionSlop: 0.05\n\n  enableDebugVisuals: ->\n    @__debugVisuals ?= cg.stage.addChild new DebugVisuals @\n    @__debugVisuals.resume().show()\n\n  disableDebugVisuals: ->\n    @__debugVisuals?.pause().hide()\n\n  toggleDebugVisuals: ->\n    if (not @__debugVisuals?) or @__debugVisuals.paused\n      @enableDebugVisuals()\n    else\n      @disableDebugVisuals()\n  \n  ###*\n  Register a new shape type with the manager and retrieve a unique ID for it.\n\n  This will make the shape class accessible as `cg.physics.shapes[name]`.\n  @method registerPhysicsShape\n  @param name {String} A unique identifier for the type of shape you wish to retrieve an ID for.\n  @param shapeClass A reference to the shape class being registered.\n  ###\n  registerPhysicsShape: (name, shapeClass) ->\n    if @__shapeIDs[name]?\n      cg.warn \"PhysicsManager::registerPhysicsShape: Shape with name #{name} already exists; NOT overwriting!\"\n    else\n      @__shapeIDs[name] = @__nextShapeID++\n      @__shapeNames[@__shapeIDs[name]] = name\n    @shapes ?= {}\n    @shapes[name] = shapeClass\n    return @__shapeIDs[name]\n\n  ###*\n  Retrieve a shape name from a given shape ID (generated with [`registerPhysicsShape`](#method_registerPhysicsShape)).\n\n  @method getShapeNameforID\n  @param shapeID {Number} The ID to resolve as a shape name.\n  @return {String} The name associated with `shapeID`.\n  ###\n  getShapeNameForID: (shapeID) -> @__shapeNames[shapeID] ? '__UNKNOWN__'\n\n  registerIntersectHandler: (shapeA, shapeB, handler) ->\n    @intersectFuncs[shapeA] ?= []\n    if @intersectFuncs[shapeA][shapeB]?\n      cg.warn \"PhysicsManager: Overwriting existing collision handler for '#{@getShapeNameForID(shapeA)}' vs '#{@getShapeNameForID(shapeB)}'!\"\n    @intersectFuncs[shapeA][shapeB] = handler\n\n  registerCollideHandler: (shapeA, shapeB, handler) ->\n    @collideFuncs[shapeA] ?= []\n    if @collideFuncs[shapeA][shapeB]?\n      cg.warn \"PhysicsManager: Overwriting existing collision handler for '#{@getShapeNameForID(shapeA)}' vs '#{@getShapeNameForID(shapeB)}'!\"\n    @collideFuncs[shapeA][shapeB] = handler\n\n  constructor: ->\n    @gravity = new Vector2 0, 10\n\n    @bounds =\n      left: false\n      right: false\n      top: false\n      bottom: false\n\n    @bodies = []\n\n  ###*\n  Add a body to this manager's list of bodies to update and test collisions for.\n  @method addBody\n  @param body {cg.physics.Body} The body to add to this manager.\n  @return {cg.physics.Body} The body that was added.\n  ###\n  addBody: (body) ->\n    @bodies.push body\n    body._active = true;\n    return body\n  ###*\n  Remove a body from this manager's list of bodies to update and test collisions for.\n  @method removeBody\n  @param body {cg.physics.Body} The body to remove from this manager.\n  @return {cg.physics.Body} The body that was removed.\n  ###\n  removeBody: (body) ->\n    idx = @bodies.indexOf body\n    return  if idx < 0\n    @bodies.splice idx, 1\n    body._active = false;\n    return body\n\n  ###*\n  Update all bodies that were added with [`addBody`](#method_addBody).\n\n  Bodies that are associated with paused actors will not be updated.\n\n  @method update\n  ###\n  update: ->\n    dts = cg.dt_seconds\n    for body in @bodies\n      body.update dts  unless body.actor.worldPaused\n    return\n\n  ###*\n  Resolve the appropriate function to compute the intersection between two shape types.\n  @method getIntersectionFunctionFor\n  @param type1 {Number} The ID of the first shape type.\n  @param type2 {Number} The ID of the second shape type.\n  @return {Function} The intersection function associated with the two shape types; `null` if no appropriate function exists.\n  ###\n  getIntersectionFunctionFor: (type1, type2) ->\n    intersect = @intersectFuncs[type1]?[type2]\n    if not intersect?\n      cg.warn \"No intersection test function for '#{PhysicsManager.getShapeNameForID(@type)}' vs '#{PhysicsManager.getShapeNameForID(other.type)}'!\"\n      return null\n    return intersect\n\n  ###*\n  Resolve the appropriate function to compute the collision between two bodies.\n  @method getCollisionFunctionFor\n  @param type1 {Number} The ID of the first body's shape type.\n  @param type2 {Number} The ID of the second body's shape type.\n  @return {Function} The intersection function associated with the two bodies' shape types; `null` if no appropriate function exists.\n  ###\n  getCollisionFunctionFor: (type1, type2) ->\n    collide = @collideFuncs[type1]?[type2]\n    if not collide?\n      cg.warn \"No collision test function for '#{PhysicsManager.getShapeNameForID(@type)}' vs '#{PhysicsManager.getShapeNameForID(other.type)}'!\"\n      return null\n    return collide\n\n  ###*\n  Determine if two bodies are intersecting, and if they are, compute and apply the appropriate collision response, which should\n  lead the bodies to bounce off one another.\n  @method collide\n  @param a {Shape} The first body.\n  @param b {Shape} The second body.\n  @return {Boolean} `true` if a collision occured, `false` otherwise.\n  ###\n  collide: (a, b) ->\n    return false  if a.mass is 0 and b.mass is 0\n    relativeVelocity.zero()\n    speedAlongNormal = @getCollisionFunctionFor(a.shape.type, b.shape.type)?(a, b, intersection, relativeVelocity)\n    \n    return  unless speedAlongNormal\n\n    aInvMass = a.inverseMass\n    bInvMass = b.inverseMass\n    totInvMass = aInvMass + bInvMass\n\n    # Adjust for floating point error (prevents \"sinking\" when objects stack)\n    if intersection.penetration > @correctionSlop\n      correction = intersection.normal.mul (intersection.penetration / (totInvMass)) * @correctionPercent\n\n      # TODO Figure out a way to use vector operations to do this?\n      a.x -= aInvMass * correction.x\n      a.y -= aInvMass * correction.y\n      b.x += bInvMass * correction.x\n      b.y += bInvMass * correction.y\n\n    unless speedAlongNormal < 0\n      return false\n\n    restitution = Math.min a.bounce, b.bounce\n\n    j = -(1 + restitution) * speedAlongNormal\n    j /= totInvMass\n\n    impulse = intersection.normal.mul j\n\n    a.v.$sub impulse.mul aInvMass\n    b.v.$add impulse.mul bInvMass\n\n    tangent = relativeVelocity.sub intersection.normal.mul(relativeVelocity.dot(intersection.normal))\n    tangent.$norm()\n\n    jt = -relativeVelocity.dot tangent\n    jt /= (totInvMass)\n    mu = Math.sqrt a.sFriction2 + b.sFriction2\n    if Math.abs(jt) < j * mu\n      frictionImpulse = tangent.mul jt\n    else\n      dynFriction = Math.sqrt a.dFriction2 + b.dFriction2\n      frictionImpulse = tangent.mul -1 * j * dynFriction\n\n    a.v.$sub frictionImpulse.mul aInvMass\n    b.v.$add frictionImpulse.mul bInvMass\n    return true\n\nfor own name, func of PhysicsManager::\n  continue  if typeof func isnt 'function'\n  PhysicsManager[name] = do (func) -> return -> func.apply @_instance, arguments\n\nAABB::type = PhysicsManager._instance.registerPhysicsShape 'AABB', AABB\nPhysicsManager._instance.registerIntersectHandler AABB::type, AABB::type, AABB.IntersectAABB\nPhysicsManager._instance.registerCollideHandler AABB::type, AABB::type, AABB.CollideAABB\n\nmodule.exports = PhysicsManager\n",
    "Shape = require 'plugins/physics/shapes/Shape'\n\n###*\nAn axis-aligned (non-rotating) bounding box shape.\n\n@class cg.physics.shapes.AABB\n@extends cg.physics.shapes.Shape\n@constructor\n@param [x=0] The horizontal position of the box.\n@param [y=0] The vertical position of the box.\n@param [width=10] The horizontal size of the box.\n@param [height=10] The vertical size of the box.\n###\nclass AABB extends Shape\n  constructor: (x=0, y=0, width=10, height=10) ->\n    @min = new cg.math.Vector2 x, y\n    @max = new cg.math.Vector2 x+width, y+height\n\n  ###*\n  The horizontal position of the box.\n  @property x\n  @type Number\n  ###\n  Object.defineProperty @::, 'x',\n    get: -> @min.x\n    set: (val) ->\n      w = @width\n      @min.x = val\n      @max.x = val + w\n\n  ###*\n  The vertical position of the box.\n  @property y\n  @type Number\n  ###\n  Object.defineProperty @::, 'y',\n    get: -> @min.y\n    set: (val) ->\n      h = @height\n      @min.y = val\n      @max.y = val + h\n\n  ###*\n  The width of the box.\n  @property width\n  @type Number\n  ###\n  Object.defineProperty @::, 'width',\n    get: -> @max.x - @min.x\n    set: (val) ->\n      @max.x = @min.x + val\n      @_areaDirty = true\n\n  ###*\n  The height of the box.\n  @property height\n  @type Number\n  ###\n  Object.defineProperty @::, 'height',\n    get: -> @max.y - @min.y\n    set: (val) ->\n      @max.y = @min.y + val\n      @_areaDirty = true\n\n  ###*\n  A virtual property representing the left-most point on this shape.\n\n  Setting its value will move the shape horizontally so that its left-most point is equal to the value specified.\n  @property left\n  @type Number\n  ###\n  Object.defineProperty @::, 'left',\n    get: -> @min.x\n    set: (val) ->\n      w = @width\n      @min.x = val\n      @max.x = val + w\n\n  ###*\n  A virtual property representing the right-most point on this shape.\n\n  Setting its value will move the shape horizontally so that its right-most point is equal to the value specified.\n  @property right\n  @type Number\n  ###\n  Object.defineProperty @::, 'right',\n    get: -> @max.x\n    set: (val) ->\n      w = @width\n      @max.x = val\n      @min.x = val - w\n\n  ###*\n  A virtual property representing the top-most point on this shape.\n\n  Setting its value will move the shape vertically so that its top-most point is equal to the value specified.\n  @property top\n  @type Number\n  ###\n  Object.defineProperty @::, 'top',\n    get: -> @min.y\n    set: (val) ->\n      h = @height\n      @min.y = val\n      @max.y = val + h\n\n  ###*\n  A virtual property representing the bottom-most point on this shape.\n\n  Setting its value will move the shape vertically so that its bottom-most point is equal to the value specified.\n  @property bottom\n  @type Number\n  ###\n  Object.defineProperty @::, 'bottom',\n    get: -> @max.y\n    set: (val) ->\n      h = @height\n      @max.y = val\n      @min.y = val - h\n\n  ###*\n  A virtual, **read-only** property representing the total area of this shape.\n\n  @property area\n  @type Number\n  ###\n  Object.defineProperty @::, 'area',\n    get: -> @width * @height\n\n  ###*\n  A virtual, **read-only** representation of the center-point of this shape.\n\n  @property center\n  @type cg.math.Vector2\n  ###\n  Object.defineProperty @::, 'center',\n    get: -> new cg.math.Vector2 @x + @width/2, @y + @height/2\n\n  intersects = (a, b) -> a.bottom >= b.top and a.top <= b.bottom and a.right >= b.left and a.left <= b.right\n\n  axes = (a,b) ->\n    aToB = b.center.sub a.center\n    return {\n      aToB: aToB\n      dx: (a.width/2) + (b.width/2) - Math.abs(aToB.x)\n      dy: (a.height/2) + (b.height/2) - Math.abs(aToB.y)\n    }\n\n  normalizeOverX = (normal, dist) ->\n    normal.y = 0\n    normal.x = if dist < 0 then -1 else 1\n    return\n\n  normalizeOverY = (normal, dist) ->\n    normal.x = 0\n    normal.y = if dist < 0 then -1 else 1\n    return\n\n  @IntersectAABB: (a, b, intersection) ->\n    return intersects(a, b)  unless intersection?\n\n    return false  unless intersects a, b\n\n    {aToB, dx, dy} = axes a, b\n\n    if dx < dy\n      intersection.penetration = dx\n      normalizeOverX intersection.normal, aToB.x\n    else\n      intersection.penetration = dy\n      normalizeOverY intersection.normal, aToB.y\n\n    return true\n\n  @CollideAABB: (a, b, intersection, relativeVelocity) ->\n    return false  unless intersects a.shape, b.shape, intersection\n\n    {aToB, dx, dy} = axes a.shape, b.shape\n\n    if dx < dy\n      normalizeOverX intersection.normal, aToB.x\n      speedAlongNormal = relativeVelocity.set(b.v.sub(a.v)).dot intersection.normal\n\n      intersection.penetration = dx\n    else\n      normalizeOverY intersection.normal, aToB.y\n      speedAlongNormal = relativeVelocity.set(b.v.sub(a.v)).dot intersection.normal\n\n      intersection.penetration = dy\n\n    return speedAlongNormal\n\nmodule.exports = AABB\n",
    "Module = require 'Module'\n\n###*\nThe abstract base class for all shapes available in Combo's simple physics system.\n\n@class cg.physics.shapes.Shape\n###\nclass Shape extends Module\n  ###*\n  Check if this shape intersects with another.\n\n  @method intersects\n  @param other {Shape} the other shape to check for intersection against.\n  @param intersection {Intersection} the intersection object to store intersection data in if an intersection occurs.\n  @return {Boolean} `true` if the shapes intersect, `false` otherwise.\n  ###\n  intersects: (other, intersection) ->\n    intersects = cg.physics.getIntersectionFunctionFor(@type, other.type)\n    return false  if not intersects?\n\n    return intersects @, other, intersection\n\nmodule.exports = Shape",
    "cg = require 'cg'\n\n###*\nAn actor plugin that is used in conjunction with `plugins.ui`\n@class plugins.ui.Interactive\n###\nInteractive =\n  mixin:\n    # bit.ly/18uWm6i\n    __getInteractive: -> !!@__interactive\n    __setInteractive: (val) ->\n      return  if val is !!@__interactive\n      @__interactive = !!val\n      if val\n        cg.ui.registerActor @\n      else\n        cg.ui.unregisterActor @\n\n  postInit: ->\n    _interactive = @interactive ? true\n\n    ###*\n    Whether or not this actor is interactive with mouse/touch\n    @property interactive\n    @type {Boolean}\n    ###\n    Object.defineProperty @, 'interactive',\n      get: @__getInteractive\n      set: @__setInteractive\n      enumerable: true\n    @interactive = _interactive\n\nmodule.exports = Interactive\n",
    "UIManager = require 'plugins/ui/UIManager'\n\n###*\nA game-wide plugin that provides a [UIManager](cg.ui.UIManager.html) instance to be used by \n [Interactive](cg.ui.Interactive.html) objects.\n\n@class plugins.ui\n###\nUI =\n  postInit: ->\n    ###*\n    Reference to this game's [`cg.ui.UIManager`](cg.ui.UIManager.html) instance.\n\n    @property ui\n    ###\n    @ui = new UIManager()\n\n  preUpdate: ->\n    @ui.update()\n\nmodule.exports = UI\n",
    "cg = require 'cg'\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\nInteractive = require 'plugins/ui/Interactive'\n\nhitTest = (item, gx,gy) ->\n  # TODO HACK?\n  gx *= cg.stage.scaleX\n  gy *= cg.stage.scaleY\n\n  worldTransform = item.worldTransform\n  a00 = worldTransform[0]\n  a01 = worldTransform[1]\n  a02 = worldTransform[2]\n  a10 = worldTransform[3]\n  a11 = worldTransform[4]\n  a12 = worldTransform[5]\n  id = 1 / (a00 * a11 + a01 * -a10)\n  x = a11 * id * gx + -a01 * id * gy + (a12 * a01 - a02 * a11) * id\n  y = a00 * id * gy + -a10 * id * gx + (-a12 * a00 + a02 * a10) * id\n\n  width = item.width ? item.texture?.frame.width ? 0\n  height = item.height ? item.texture?.frame.height ? 0\n  x1 = -width * (item.anchorX ? 0)\n  if x > x1 and x < x1 + width\n    y1 = -height * (item.anchorY ? 0)\n    if y > y1 and y < y1 + height\n      return true\n  return false\n\ntouchDrag = (touch) ->\n  if not @__ui_dragStarted\n    @__ui_dragStarted = true\n\n    ###*\n    Emitted whenever this actor begins being dragged by a touch instance.\n\n    @event drag\n    @param touch {Touch} The touch instance that is doing the dragging.\n    ###\n    @emit 'dragStart', touch\n\n  {dx, dy} = touch\n  if @draggable\n    @x += dx\n    @y += dy\n    @dragging = true\n\n    ###*\n    Emitted whenever this actor's position changes from being dragged by a touch instance.\n\n    @event drag\n    @param touch {Touch} The touch instance that is doing the dragging.\n    ###\n    @emit 'drag', touch\n\nunregister = (actor) -> cg.ui.unregisterActor actor\n\n###*\nControl the dispatching of touch/mouse events on actors in your game.\n\n**NOTE**: All events listed under this class actually apply to actors added with [`registerActor`](#method_registerActor).\n\n@class plugins.ui.UIManager\n@extends cg.Module\n###\nclass UIManager extends Module\n  @mixin HasSignals\n  \n  UIManager: UIManager\n  Interactive: Interactive\n\n  constructor: ->\n    @__actors = []\n\n    @on cg.input, 'touchDown', (touch) ->\n      stopDragging = ->\n        @dragging = false\n        @off touch, 'drag', touchDrag\n        if @__ui_dragStarted\n          @__ui_dragStarted = false\n          ###*\n          Emitted whenever this actor stops being dragged by a touch instance.\n\n          @event dragStop\n          @param touch {Touch} The touch instance that was doing the dragging.\n          ###\n          @emit 'dragStop', touch\n\n      released = ->\n        ###*\n        Emitted whenever a touch that started inside an actor is released.\n\n        @event touchUp\n        @param touch {Touch} The touch instance that was released.\n        ###\n        @emit 'touchUp', touch\n        if not hitTest @, touch.x, touch.y\n          ###*\n          Emitted whenever a touch that *started* inside an actor is released *outside* the actor.\n\n          @event touchUpOutside\n          @param touch {Touch} The touch instance that was released.\n          ###\n          @emit 'touchUpOutside', touch\n        else\n          ###*\n          Emitted whenever a touch that started inside an actor is released inside the actor.\n\n          @event touchUpInside\n          @param touch {Touch} The touch instance that was released.\n          ###\n          @emit 'touchUpInside', touch\n\n          ###*\n          Emitted whenever a touch that started inside an actor is released inside the actor.\n\n          @event tap\n          @param touch {Touch} The touch instance that was released.\n          ###\n          @emit 'tap', touch\n\n      mouseOver = ->\n        @emit 'mouseOver'\n\n      touchX = touch.x\n      touchY = touch.y\n      hoveredObject = null\n\n      for actor in @__actors\n        continue  unless actor.worldVisible and (not hoveredObject?.isAbove(actor)) and hitTest(actor, touchX, touchY)\n        hoveredObject = actor\n\n      return  unless hoveredObject?\n\n      ###*\n      Emitted whenever a touch starts inside an actor.\n\n      @event touchDown\n      @param touch {Touch} The touch instance that just started.\n      ###\n      hoveredObject.emit 'touchDown', touch\n      hoveredObject.once touch, 'release', released\n\n      if hoveredObject.draggable\n        hoveredObject.on touch, 'drag', touchDrag\n        hoveredObject.once touch, 'release', stopDragging\n\n    @on cg.input, 'touchDrag', (touch) ->\n      touchX = touch.x\n      touchY = touch.y\n\n      hoveredObject = null\n\n      for actor in @__actors\n        continue  unless actor.worldVisible and (not hoveredObject?.isAbove(actor)) and hitTest(actor, touchX, touchY)\n        hoveredObject = actor\n\n      return  unless hoveredObject?\n      \n      ###*\n      Emitted whenever a dragging touch goes over an actor.\n\n      @event dragOver\n      @param touch {Touch} The touch instance that is dragging.\n      ###\n      hoveredObject.emit 'dragOver', touch\n\n    # TODO: Optimize with QuadTree or Grid?\n    @on cg.input, 'mouseMove', (mouse) ->\n      hoveredObject = null\n\n      mouseX = mouse.x\n      mouseY = mouse.y\n\n      for actor in @__actors\n        if actor.worldVisible and (not hoveredObject?.isAbove(actor)) and hitTest(actor, mouseX, mouseY)\n          if hoveredObject?.__ui_mouseOver\n            hoveredObject.__ui_mouseOver = false\n            ###*\n            Emitted whenever the mouse leaves the area of an actor.\n\n            @event mouseOut\n            @param mouse {Touch} The mouse that is no longer hovering over the actor.\n            ###\n            hoveredObject.emit 'mouseOut', mouse\n          hoveredObject = actor\n        else if actor.__ui_mouseOver\n          actor.__ui_mouseOver = false\n          actor.emit 'mouseOut', mouse\n      \n      return  unless hoveredObject?\n\n      mouse.__ui_hoveredObject = hoveredObject\n\n      if not hoveredObject.__ui_mouseOver\n        hoveredObject.__ui_mouseOver = true\n        ###*\n        Emitted whenever the mouse enters the area of an actor.\n\n        @event mouseOver\n        @param mouse {Touch} The mouse that is now hovering over the actor.\n        ###\n        hoveredObject.emit 'mouseOver', mouse\n      hoveredObject.emit 'mouseMove', mouse\n\n  update: ->\n    cg.input.emit 'mouseMove', cg.input.mouse\n\n  ###*\n  Enable UI events for a specified actor.\n\n  @method registerActor\n  @param actor {Actor} The actor to enable UI events for.\n  ###\n  registerActor: (actor) ->\n    return  if actor.__ui_registered\n    @__actors.push actor\n    actor.__ui_registered = true\n    @once actor, '__destroy__', unregister\n  \n  ###*\n  Disable UI events for a specified actor.\n  \n  @method registerActor\n  @param actor {Actor} The actor to disable UI events for.\n  ###\n  unregisterActor: (actor) ->\n    @off actor, '__destroy__', unregister\n    return  unless actor.__ui_registered\n    idx = @__actors.indexOf actor\n    return  if idx < 0\n    @__actors.splice idx, 1\n    delete actor.__ui_registered\n\nmodule.exports = UIManager",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nDisplayObject = require 'rendering/DisplayObject'\nRenderTypes = require 'rendering/core/RenderTypes'\n\n###\nThis object is one that will allow you to specify custom rendering functions based on render type\n\n@class CustomRenderable\n@extends cg.rendering.DisplayObject\n@constructor\n###\nclass CustomRenderable extends DisplayObject\n  __renderType: RenderTypes.CUSTOMRENDERABLE\n  constructor: ->\n    super\n\n  ###\n  If this object is being rendered by a CanvasRenderer it will call this callback\n\n  @method renderCanvas\n  @param renderer {CanvasRenderer} The renderer instance\n  ###\n  renderCanvas: (renderer) ->\n\n  # override!\n\n  ###\n  If this object is being rendered by a WebGLRenderer it will call this callback to initialize\n\n  @method initWebGL\n  @param renderer {WebGLRenderer} The renderer instance\n  ###\n  initWebGL: (renderer) ->\n\n  # override!\n\n  ###\n  If this object is being rendered by a WebGLRenderer it will call this callback\n\n  @method renderGLES\n  @param renderer {WebGLRenderer} The renderer instance\n  ###\n  renderGLES: (renderGroup, projectionMatrix) ->\n\n  # not sure if both needed? but ya have for now!\n  # override!\n\nmodule.exports = CustomRenderable",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\ncg = require 'cg'\nPoint = require 'rendering/core/Point'\nMatrix = require 'rendering/core/Matrix'\nFilterBlock = require 'rendering/filters/FilterBlock'\nModule = require 'Module'\n\n###*\nThe base class for all objects that are rendered on the screen.\n\n@class cg.rendering.DisplayObject\n@constructor\n###\nclass DisplayObject extends Module\n  @defineProperty 'scene',\n    get: ->\n      if not @parent?\n        return null\n        \n      if @parent.isScene\n        return @parent\n\n      return @parent.scene\n\n  @defineProperty 'isScene',\n    value: false\n    writable: false\n    configurable: true\n  \n  constructor: ->\n    @last = this\n    @first = this\n    \n    ###*\n    The x coordinate of the object relative to the local coordinates of the parent.\n    @property x\n    ###\n    @x = 0\n\n    ###*\n    The y coordinate of the object relative to the local coordinates of the parent.\n    @property y\n    ###\n    @y = 0\n    \n    ###*\n    The X scale factor of the object.\n    @property scaleX\n    ###\n    @scaleX ?= 1\n\n    ###*\n    The Y scale factor of the object.\n    @property scaleY\n    ###\n    @scaleY ?= 1\n    \n    # LOU TODO: Replace pivot with anchor and add width/height to all displayobjects\n    # see: https://github.com/GoodBoyDigital/pixi.js/issues/441\n\n    ###*\n    The x-coordinate of the pivot point that this rotates around.\n    @property pivotX\n    ###\n    @pivotX = 0\n\n    ###*\n    The y-coordinate of the pivot point that this rotates around.\n    @property pivotY\n    ###\n    @pivotY = 0\n    \n    ###*\n    The rotation of the object in radians.\n    \n    @property rotation\n    @type Number\n    ###\n    @rotation = 0\n    \n    ###*\n    The opacity of the object.\n    \n    @property alpha\n    @type Number\n    ###\n    @alpha = 1\n    \n    ###*\n    Whether this object is renderable or not.\n    \n    @property renderable\n    @type Boolean\n    ###\n    @renderable = false\n\n    ###*\n    Whether this object should be rendered or not (ignored if [`renderable`](#property_renderable) is `false`).\n    \n    @property visible\n    @type Boolean\n    ###\n    @visible = true\n    \n    ###*\n    The visibility of the object based on world (parent) factors.\n    \n    @property worldVisible\n    @type Boolean\n    @final\n    ###\n    # @worldVisible = false\n    \n    ###*\n    The display object container that contains this display object.\n    \n    @property parent\n    @type DisplayObjectContainer\n    @final\n    ###\n    @parent = null\n    \n    ###*\n    The stage the display object is connected to, or undefined if it is not connected to the stage.\n    \n    @property stage\n    @type Stage\n    @final\n    @protected\n    ###\n    @stage ?= null\n    \n    ###*\n    The multiplied alpha of this `DisplayObject`.\n    \n    @property worldAlpha\n    @type Number\n    @final\n    ###\n    @worldAlpha = 1\n          \n    ###*\n    Current transform of the object based on world (parent) factors\n    \n    @property worldTransform\n    @type Mat3\n    @final\n    @private\n    ###\n    @worldTransform = Matrix.mat3.create() #mat3.identity();\n    \n    ###*\n    Current transform of the object locally\n    \n    @property localTransform\n    @type Mat3\n    @final\n    @private\n    ###\n    @localTransform = Matrix.mat3.create() #mat3.identity();\n    \n    # chach that puppy!\n    @_sr = 0\n    @_cr = 1\n\n  ###*\n  Sets a mask for the displayObject. A mask is an object that limits the visibility of an object to the shape of the mask applied to it.\n  A regular mask must be a Graphics object. This allows for much faster masking in canvas as it utilises shape clipping.\n  To remove a mask, set this property to null.\n\n  @property mask\n  @type Graphics\n  ###\n  @defineProperty 'mask',\n    get: ->\n      @_mask\n\n    set: (value) ->\n      if not value\n        @removeFilter @_mask\n        @_mask.renderable = true\n      else\n        if @_mask\n          value.start = @_mask.start\n          value.end = @_mask.end\n        else\n          @addFilter value\n          value.renderable = false\n      @_mask = value\n\n  _getVisible: -> @__visible\n  _setVisible: (value) -> @__visible = value\n  @defineProperty 'visible',\n    get: -> @_getVisible()\n    set: (value) -> @_setVisible(value)\n\n\n  _getWorldVisible: -> @__worldVisible\n  _setWorldVisible: (value) -> @__worldVisible = value\n  @defineProperty 'worldVisible',\n    get: -> @_getWorldVisible()\n\n\n  ###*\n  A special property that allows you to set both [`scaleX`](#property_scaleX) and [`scaleY`](#property_scaleY)\n  simultaneously to the same value.\n\n  When *reading* this value, if [`scaleX`](#property_scaleX) and  [`scaleY`](#property_scaleY) are not equal, \n  it will resemble the average of the two.\n  \n  @example\n      this.scaleX = 0.5;\n      this.scaleY = 1.5;\n      cg.log(this.scale); // Output: \"1\"\n\n      this.scale = 2;\n      cg.log(this.scaleX); // Output: \"2\"\n      cg.log(this.scaleY); // Output: \"2\"\n\n  @property scale\n  @type Number\n  ###\n  @defineProperty 'scale',\n    get: -> (@scaleX + @scaleY) / 2\n    set: (val) -> @scaleX = @scaleY = val\n\n  @defineProperty 'left',\n    get: ->\n      left = @x - @pivotX\n      if (w = @width)? and (ax = @anchorX)?\n        left -= ax*w\n      return left\n    set: (val) ->\n      if (w = @width)? and (ax = @anchorX)?\n        @x = val + @pivotX + w * ax\n      else\n        @x = val + @pivotX\n\n  @defineProperty 'right',\n    get: ->\n      if (w = @width)\n        return @left + w\n      else\n        return @left\n\n    set: (val) ->\n      if (w = @width)\n        @left = val - w\n      else\n        @left = val\n\n  @defineProperty 'top',\n    get: ->\n      top = @y- @pivotY\n      if (h = @height)? and (ay = @anchorY)?\n        top -= ay*h\n      return top\n    set: (val) ->\n      if (h = @height)? and (ay = @anchorY)?\n        @y = val + @pivotY + h * ay\n      else\n        @y = val + @pivotY\n\n  @defineProperty 'bottom',\n    get: ->\n      if (h = @height)\n        return @top + h\n      else\n        return @top\n\n    set: (val) ->\n      if (h = @height)\n        @top = val - h\n      else\n        @top = val\n\n  ###*\n  Adds a filter to this displayObject\n\n  @method addFilter\n  @param mask {Graphics} the graphics object to use as a filter\n  @private\n  ###\n  addFilter: (mask) ->\n    return  if @filter\n    @filter = true\n    \n    # insert a filter block..\n    start = new FilterBlock()\n    end = new FilterBlock()\n    start.mask = mask\n    end.mask = mask\n    start.first = start.last = this\n    end.first = end.last = this\n    start.open = true\n    \n    #\tinsert start\n    childFirst = start\n    childLast = start\n    nextObject = undefined\n    previousObject = undefined\n    previousObject = @first._iPrev\n    if previousObject\n      nextObject = previousObject._iNext\n      childFirst._iPrev = previousObject\n      previousObject._iNext = childFirst\n    else\n      nextObject = this\n    if nextObject\n      nextObject._iPrev = childLast\n      childLast._iNext = nextObject\n    \n    # now insert the end filter block..\n    \n    #\tinsert end filter\n    childFirst = end\n    childLast = end\n    nextObject = null\n    previousObject = null\n    previousObject = @last\n    nextObject = previousObject._iNext\n    if nextObject\n      nextObject._iPrev = childLast\n      childLast._iNext = nextObject\n    childFirst._iPrev = previousObject\n    previousObject._iNext = childFirst\n    updateLast = this\n    prevLast = @last\n    while updateLast\n      updateLast.last = end  if updateLast.last is prevLast\n      updateLast = updateLast.parent\n    @first = start\n    \n    # if webGL...\n    @__renderGroup.addFilterBlocks start, end  if @__renderGroup\n    mask.renderable = false\n\n  ###*\n  Removes the filter to this displayObject\n  \n  @method removeFilter\n  @private\n  ###\n  removeFilter: ->\n    return  unless @filter\n    @filter = false\n    \n    # modify the list..\n    startBlock = @first\n    nextObject = startBlock._iNext\n    previousObject = startBlock._iPrev\n    nextObject._iPrev = previousObject  if nextObject\n    previousObject._iNext = nextObject  if previousObject\n    @first = startBlock._iNext\n    \n    # remove the end filter\n    lastBlock = @last\n    nextObject = lastBlock._iNext\n    previousObject = lastBlock._iPrev\n    nextObject._iPrev = previousObject  if nextObject\n    previousObject._iNext = nextObject\n    \n    # this is always true too!\n    #\tif(this.last == lastBlock)\n    #{\n    tempLast = lastBlock._iPrev\n    \n    # need to make sure the parents last is updated too\n    updateLast = this\n    while updateLast.last is lastBlock\n      updateLast.last = tempLast\n      updateLast = updateLast.parent\n      break  unless updateLast\n    mask = startBlock.mask\n    mask.renderable = true\n    \n    # if webGL...\n    @__renderGroup.removeFilterBlocks startBlock, lastBlock  if @__renderGroup\n\n  ###*\n  Updates the object transform for rendering\n  \n  @method __updateTransform\n  @private\n  ###\n  __updateTransform: ->\n    \n    # TODO OPTIMIZE THIS!! with dirty\n    unless @rotation is @rotationCache\n      @rotationCache = @rotation\n      @_sr = Math.sin(@rotation)\n      @_cr = Math.cos(@rotation)\n    localTransform = @localTransform\n    parentTransform = @parent.worldTransform\n    worldTransform = @worldTransform\n    \n    #console.log(localTransform)\n    localTransform[0] = @_cr * @scaleX\n    localTransform[1] = -@_sr * @scaleY\n    localTransform[3] = @_sr * @scaleX\n    localTransform[4] = @_cr * @scaleY\n    \n    # TODO --> do we even need a local matrix???\n    px = @pivotX\n    py = @pivotY\n    \n    # Cache the matrix values (makes for huge speed increases!)\n    a00 = localTransform[0]\n    a01 = localTransform[1]\n    a02 = @x - localTransform[0] * px - py * localTransform[1]\n    a10 = localTransform[3]\n    a11 = localTransform[4]\n    a12 = @y - localTransform[4] * py - px * localTransform[3]\n    b00 = parentTransform[0]\n    b01 = parentTransform[1]\n    b02 = parentTransform[2]\n    b10 = parentTransform[3]\n    b11 = parentTransform[4]\n    b12 = parentTransform[5]\n    localTransform[2] = a02\n    localTransform[5] = a12\n    worldTransform[0] = b00 * a00 + b01 * a10\n    worldTransform[1] = b00 * a01 + b01 * a11\n    # These were here from when I was messing with physics body width/height integrations:\n    # console.assert not cg.util.isNaN a02\n    # console.assert not cg.util.isNaN a12\n    # console.assert not cg.util.isNaN b02\n    worldTransform[2] = b00 * a02 + b01 * a12 + b02\n    worldTransform[3] = b10 * a00 + b11 * a10\n    worldTransform[4] = b10 * a01 + b11 * a11\n    worldTransform[5] = b10 * a02 + b11 * a12 + b12\n    \n    # because we are using affine transformation, we can optimise the matrix concatenation process.. wooo!\n    # mat3.multiply(this.localTransform, this.parent.worldTransform, this.worldTransform);\n    @worldAlpha = @alpha * @parent.worldAlpha\n\n  getGlobalX: ->\n    @__updateTransform()\n    @worldTransform[2]\n\n  getGlobalY: ->\n    @__updateTransform()\n    @worldTransform[5]\n\n  getChildIndex: -> @parent?.children.indexOf @ ? NaN\n  \n  getTreeDepth: ->\n    return 0  if not @parent?\n    return 1 + @parent.getTreeDepth()\n\n  isAbove: (other) ->\n    a = @\n    b = other\n\n    otherDepth = other.getTreeDepth()\n    depth = @getTreeDepth()\n\n    loop\n      return true  if a.parent is b\n      return false  if b.parent is a\n\n      break  if (a.parent is b.parent) or (not a.parent?) or (not b.parent?)\n\n      if depth > otherDepth\n        a = a.parent\n        depth -= 1\n      else if otherDepth > depth\n        b = b.parent\n        otherDepth -= 1\n      else\n        a = a.parent\n        b = b.parent\n\n    return a.getChildIndex() > b.getChildIndex()\n\n  bringToFront: ->\n    return  unless @parent\n    parent = @parent\n    parent.removeChild(@)\n    parent.addChild(@)\n    return @\n\nmodule.exports = DisplayObject",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nDisplayObject = require 'rendering/DisplayObject'\n\n###*\nA DisplayObjectContainer represents a collection of display objects.\nIt is the base class of all display objects that act as a container for other objects.\n\n@class cg.rendering.DisplayObjectContainer\n@extends cg.rendering.DisplayObject\n@constructor\n###\nclass DisplayObjectContainer extends DisplayObject\n  constructor: ->\n    \n    ###*\n    The of children of this container.\n\n    @property children\n    @type Array<DisplayObject>\n    @final\n    ###\n    @children = []\n    \n    super\n\n\n  _setVisible: (value) ->\n    super\n    before = @worldVisible\n    @_setWorldVisible @parent?.worldVisible and value\n\n  _setWorldVisible: (value) ->\n    super\n    for child in @children\n      child._setWorldVisible @worldVisible and child.visible\n\n  ###*\n  Adds a child to the container.\n\n  @method addChild\n  @param child {cg.rendering.DisplayObject} The DisplayObject to add to the container.\n  ###\n  addChild: (child) ->\n    \n    #// COULD BE THIS???\n    child.parent.removeChild(child)  if child.parent?\n    \n    #\treturn;\n    child.parent = this\n    child._setWorldVisible @worldVisible and child.visible\n\n    @children.push child\n    \n    # updae the stage refference..\n    if @stage\n      tmpChild = child\n      loop\n        tmpChild.stage = @stage\n        tmpChild = tmpChild._iNext\n        break unless tmpChild\n    \n    # LINKED LIST //\n    \n    # modify the list..\n    childFirst = child.first\n    childLast = child.last\n    nextObject = undefined\n    previousObject = undefined\n    \n    # this could be wrong if there is a filter??\n    if @filter\n      previousObject = @last._iPrev\n    else\n      previousObject = @last\n    nextObject = previousObject._iNext\n    \n    # always true in this case\n    #this.last = child.last;\n    # need to make sure the parents last is updated too\n    updateLast = this\n    prevLast = previousObject\n    while updateLast\n      updateLast.last = child.last  if updateLast.last is prevLast\n      updateLast = updateLast.parent\n    if nextObject\n      nextObject._iPrev = childLast\n      childLast._iNext = nextObject\n    childFirst._iPrev = previousObject\n    previousObject._iNext = childFirst\n    \n    # need to remove any render groups..\n    if @__renderGroup\n      \n      # being used by a renderTexture.. if it exists then it must be from a render texture;\n      child.__renderGroup.removeDisplayObjectAndChildren child  if child.__renderGroup\n      \n      # add them to the new render group..\n      @__renderGroup.addDisplayObjectAndChildren child\n    \n    child.emit? 'enter'\n    child.enter?()\n\n    if child.isScene\n      child.preload()\n\n    return child\n\n\n  ###*\n  Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n\n  @method addChildAt\n  @param child {cg.rendering.DisplayObject} The child to add.\n  @param index {Number} The index to place the child in.\n  ###\n  addChildAt: (child, index) ->\n    if index >= 0 and index <= @children.length\n      child.parent.removeChild(child)  if child.parent?\n      child.parent = this\n      child._setWorldVisible @worldVisible and child.visible\n\n      if @stage\n        tmpChild = child\n        loop\n          tmpChild.stage = @stage\n          tmpChild = tmpChild._iNext\n          break unless tmpChild\n      \n      # modify the list..\n      childFirst = child.first\n      childLast = child.last\n      nextObject = undefined\n      previousObject = undefined\n      if index is @children.length\n        previousObject = @last\n        updateLast = this #.parent;\n        prevLast = @last\n        while updateLast\n          updateLast.last = child.last  if updateLast.last is prevLast\n          updateLast = updateLast.parent\n      else if index is 0\n        previousObject = this\n      else\n        previousObject = @children[index - 1].last\n      nextObject = previousObject._iNext\n      \n      # always true in this case\n      if nextObject\n        nextObject._iPrev = childLast\n        childLast._iNext = nextObject\n      childFirst._iPrev = previousObject\n      previousObject._iNext = childFirst\n      @children.splice index, 0, child\n      \n      # need to remove any render groups..\n      if @__renderGroup\n        \n        # being used by a renderTexture.. if it exists then it must be from a render texture;\n        child.__renderGroup.removeDisplayObjectAndChildren child  if child.__renderGroup\n        \n        # add them to the new render group..\n        @__renderGroup.addDisplayObjectAndChildren child\n    else\n      throw new Error(child + \" The index \" + index + \" supplied is out of bounds \" + @children.length)\n\n\n  ###*\n  Swaps the draw-order of two immediate children.\n\n  @method swapChildren\n  @param child {cg.rendering.DisplayObject}\n  @param child2 {cg.rendering.DisplayObject}\n  ###\n  swapChildren: (child, child2) ->\n    return  if child is child2\n\n    idx1 = @children.indexOf child\n    idx2 = @children.indexOf child2\n    \n    if idx1 < 0 or idx2 < 0\n      throw new Error 'swapChildren: Both the supplied DisplayObjects must be a child of the caller.'\n\n    @removeChild child\n    @removeChild child2\n\n    if idx1 < idx2\n      @addChildAt child2, idx1\n      @addChildAt child, idx2\n    else\n      @addChildAt child, idx2\n      @addChildAt child2, idx1\n    return\n  \n  ###*\n  Returns the Child at the specified index\n\n  @method getChildAt\n  @param index {Number} The index to get the child from.\n  @return {cg.rendering.DisplayObject} The child at the specified index.\n  ###\n  getChildAt: (index) ->\n    if index >= 0 and index < @children.length\n      @children[index]\n    else\n      throw new Error(child + \" Both the supplied DisplayObjects must be a child of the caller \" + this)\n  \n  ###*\n  Removes a child from the container.\n\n  @method removeChild\n  @param child {cg.rendering.DisplayObject} The DisplayObject to remove.\n  ###\n  removeChild: (child) ->\n    index = @children.indexOf(child)\n    if index isnt -1\n      \n      # unlink //\n      # modify the list..\n      childFirst = child.first\n      childLast = child.last\n      nextObject = childLast._iNext\n      previousObject = childFirst._iPrev\n      nextObject._iPrev = previousObject  if nextObject\n      previousObject._iNext = nextObject\n      if @last is childLast\n        tempLast = childFirst._iPrev\n        \n        # need to make sure the parents last is updated too\n        updateLast = this\n        while updateLast.last is childLast.last\n          updateLast.last = tempLast\n          updateLast = updateLast.parent\n          break  unless updateLast\n      childLast._iNext = null\n      childFirst._iPrev = null\n      \n      # update the stage reference..\n      if @stage\n        tmpChild = child\n        loop\n          tmpChild.stage = null\n          tmpChild = tmpChild._iNext\n          break unless tmpChild\n      \n      # LOU TODO HACK: What is this spaghetti mess?\n      # webGL trim\n      child.__renderGroup.removeDisplayObjectAndChildren child  if child.__renderGroup\n      child.parent = undefined\n      @children.splice index, 1\n      child.emit? 'leave'\n      child.leave?()\n    else\n      throw new Error(child + \" The supplied DisplayObject must be a child of the caller \" + this)\n  \n  ###*\n  Removes all children from the container.\n  @method clearChildren\n  ###\n  clearChildren: ->\n    children = @children.slice 0\n    for child in children\n      @removeChild child\n    @children = []\n\n  ###*    \n  Updates the container's children's transform for rendering\n  \n  @method __updateTransform\n  @private\n  ###\n  __updateTransform: ->\n    return  unless @visible\n    \n    super\n\n    i = 0\n    j = @children.length\n\n    while i < j\n      @children[i].__updateTransform()\n      i++\n\nmodule.exports = DisplayObjectContainer",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nDisplayObjectContainer = require 'rendering/DisplayObjectContainer'\nRenderTypes = require 'rendering/core/RenderTypes'\n\n###*\nThe Graphics class contains a set of methods that you can use to create primitive shapes and lines.\nIt is important to know that with the webGL renderer only simple polys can be filled at this stage\nComplex polys will not be filled. Heres an example of a complex poly: http://www.goodboydigital.com/wp-content/uploads/2013/06/complexPolygon.png\n\n@class cg.rendering.Graphics\n@extends cg.rendering.DisplayObjectContainer\n@constructor\n###\nclass Graphics extends DisplayObjectContainer\n  __renderType: RenderTypes.GRAPHICS\n  # SOME TYPES:\n  @POLY: 0\n  @RECT: 1\n  @CIRC: 2\n  @ELIP: 3\n\n  constructor: ->\n    super\n\n    @renderable = true\n    \n    ###*\n    The alpha of the fill of this graphics object\n    \n    @property fillAlpha\n    @type Number\n    ###\n    @fillAlpha = 1\n    \n    ###*\n    The width of any lines drawn\n    \n    @property lineWidth\n    @type Number\n    ###\n    @lineWidth = 0\n    \n    ###*\n    The color of any lines drawn\n    \n    @property lineColor\n    @type String\n    ###\n    @lineColor = 'black'\n    \n    ###*\n    Graphics data\n    \n    @property graphicsData\n    @type Array\n    @private\n    ###\n    @graphicsData = []\n    \n    ###*\n    Current path\n    \n    @property currentPath\n    @type Object\n    @private\n    ###\n    @currentPath = points: []\n\n  ###*\n  Specifies a line style used for subsequent calls to Graphics methods such as the lineTo() method or the drawCircle() method.\n\n  @method lineStyle\n  @param lineWidth {Number} width of the line to draw, will update the object's stored style\n  @param color {Number} color of the line to draw, will update the object's stored style\n  @param alpha {Number} alpha of the line to draw, will update the object's stored style\n  ###\n  lineStyle: (lineWidth, color, alpha) ->\n    @graphicsData.pop()  if @currentPath.points.length is 0\n    @lineWidth = lineWidth or 0\n    @lineColor = color or 0\n    @lineAlpha = (if (alpha is `undefined`) then 1 else alpha)\n    @currentPath =\n      lineWidth: @lineWidth\n      lineColor: @lineColor\n      lineAlpha: @lineAlpha\n      fillColor: @fillColor\n      fillAlpha: @fillAlpha\n      fill: @filling\n      points: []\n      type: Graphics.POLY\n\n    @graphicsData.push @currentPath\n\n  ###*\n  Moves the current drawing position to (x, y).\n\n  @method moveTo\n  @param x {Number} the X coord to move to\n  @param y {Number} the Y coord to move to\n  ###\n  moveTo: (x, y) ->\n    @graphicsData.pop()  if @currentPath.points.length is 0\n    @currentPath = @currentPath =\n      lineWidth: @lineWidth\n      lineColor: @lineColor\n      lineAlpha: @lineAlpha\n      fillColor: @fillColor\n      fillAlpha: @fillAlpha\n      fill: @filling\n      points: []\n      type: Graphics.POLY\n\n    @currentPath.points.push x, y\n    @graphicsData.push @currentPath\n\n  ###*\n  Draws a line using the current line style from the current drawing position to (x, y);\n  the current drawing position is then set to (x, y).\n\n  @method lineTo\n  @param x {Number} the X coord to draw to\n  @param y {Number} the Y coord to draw to\n  ###\n  lineTo: (x, y) ->\n    @currentPath.points.push x, y\n    @dirty = true\n\n  ###*\n  Specifies a simple one-color fill that subsequent calls to other Graphics methods\n  (such as lineTo() or drawCircle()) use when drawing.\n\n  @method beginFill\n  @param color {uint} the color of the fill\n  @param alpha {Number} the alpha\n  ###\n  beginFill: (color, alpha) ->\n    @filling = true\n    @fillColor = color or 0\n    @fillAlpha = alpha ? 1\n\n  ###*\n  Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n\n  @method endFill\n  ###\n  endFill: ->\n    @filling = false\n    @fillColor = null\n    @fillAlpha = 1\n\n  ###*\n  @method drawRect\n\n  @param x {Number} The X coord of the top-left of the rectangle\n  @param y {Number} The Y coord of the top-left of the rectangle\n  @param width {Number} The width of the rectangle\n  @param height {Number} The height of the rectangle\n  ###\n  drawRect: (x, y, width, height) ->\n    @graphicsData.pop()  if @currentPath.points.length is 0\n    @currentPath =\n      lineWidth: @lineWidth\n      lineColor: @lineColor\n      lineAlpha: @lineAlpha\n      fillColor: @fillColor\n      fillAlpha: @fillAlpha\n      fill: @filling\n      points: [x, y, width, height]\n      type: Graphics.RECT\n\n    @graphicsData.push @currentPath\n    @dirty = true\n\n  ###*\n  Draws a circle.\n\n  @method drawCircle\n  @param x {Number} The X coord of the center of the circle\n  @param y {Number} The Y coord of the center of the circle\n  @param radius {Number} The radius of the circle\n  ###\n  drawCircle: (x, y, radius) ->\n    @graphicsData.pop()  if @currentPath.points.length is 0\n    @currentPath =\n      lineWidth: @lineWidth\n      lineColor: @lineColor\n      lineAlpha: @lineAlpha\n      fillColor: @fillColor\n      fillAlpha: @fillAlpha\n      fill: @filling\n      points: [x, y, radius, radius]\n      type: Graphics.CIRC\n\n    @graphicsData.push @currentPath\n    @dirty = true\n\n  ###*\n  Draws an elipse.\n\n  @method drawElipse\n  @param x {Number}\n  @param y {Number}\n  @param width {Number}\n  @param height {Number}\n  ###\n  drawElipse: (x, y, width, height) ->\n    @graphicsData.pop()  if @currentPath.points.length is 0\n    @currentPath =\n      lineWidth: @lineWidth\n      lineColor: @lineColor\n      lineAlpha: @lineAlpha\n      fillColor: @fillColor\n      fillAlpha: @fillAlpha\n      fill: @filling\n      points: [x, y, width, height]\n      type: Graphics.ELIP\n\n    @graphicsData.push @currentPath\n    @dirty = true\n\n  ###*\n  Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n\n  @method clear\n  ###\n  clear: ->\n    @lineWidth = 0\n    @filling = false\n    @dirty = true\n    @clearDirty = true\n    @graphicsData = []\n\nmodule.exports = Graphics",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\ncg = require 'cg'\nDisplayObjectContainer = require 'rendering/DisplayObjectContainer'\nPoint = require 'rendering/core/Point'\nTexture = require 'rendering/textures/Texture'\nRenderTypes = require 'rendering/core/RenderTypes'\n\n###*\nThe Sprite object is the base for all textured objects that are rendered to the screen\n\n@class cg.rendering.Sprite\n@extends cg.rendering.DisplayObjectContainer\n@constructor\n@param texture {cg.Texture} The texture for this sprite\n@type String\n###\nclass Sprite extends DisplayObjectContainer\n  __renderType: RenderTypes.SPRITE\n\n  @blendModes:\n    NORMAL: 0\n    SCREEN: 1\n  constructor: (texture) ->\n    super\n    \n    ###*\n    The x-component of this `Sprite`'s anchor.\n\n    The anchor sets the origin point of this `Sprite`'s texture.\n\n    A value of 0 indicates that the texture's left side is aligned with `this.x`, \n    and a value of 1 indicates that the texture's right side is aligned with `this.x`.\n\n    A value of 0.5 indicates that the texture is horizontally centered on `this.x`, etc.\n\n    @property anchorX\n    @type Number\n    @default 0\n    ###\n    @anchorX ?= 0\n\n    ###*\n    The y-component of this `Sprite`'s anchor.\n\n    The anchor sets the origin point of this `Sprite`'s texture.\n\n    A value of 0 indicates that the texture's top is aligned with `this.y`, \n    and a value of 1 indicates that the texture's bottom is aligned with `this.y`.\n\n    A value of 0.5 indicates that the texture is vertically centered on `this.y`, etc.\n\n    @property anchorY\n    @type Number\n    @default 0\n    ###\n    @anchorY ?= 0\n\n    ###*\n    The texture that the sprite is using\n    \n    @property texture\n    @type Texture\n    ###\n    @texture = texture\n    \n    ###*\n    The blend mode of sprite.\n    currently supports Sprite.blendModes.NORMAL and Sprite.blendModes.SCREEN\n    \n    @property blendMode\n    @type Number\n    ###\n    @blendMode = Sprite.blendModes.NORMAL\n    \n    @_width ?= 10\n    @_height ?= 10\n\n    if @texture?\n      if @texture.baseTexture.hasLoaded\n        @_updateFrame = true\n      else\n        @onTextureUpdateBind = @onTextureUpdate.bind(this)\n        @texture.on 'update', @onTextureUpdateBind\n\n    @renderable = true\n\n  # HACK: override for flipX/flipY support:\n  __updateTransform: ->\n    # TODO OPTIMIZE THIS!! with dirty\n    unless @rotation is @rotationCache\n      @rotationCache = @rotation\n      @_sr = Math.sin(@rotation)\n      @_cr = Math.cos(@rotation)\n    localTransform = @localTransform\n    parentTransform = @parent.worldTransform\n    worldTransform = @worldTransform\n\n    #console.log(localTransform)\n    if @flipX\n      scaleX = -@scaleX\n      offsetX = @width * (1 - 2 * @anchorX)\n    else\n      scaleX = @scaleX\n      offsetX = 0\n\n    if @flipY\n      scaleY = -@scaleY\n      offsetY = @height * (1 - 2 * @anchorY)\n    else\n      scaleY = @scaleY\n      offsetY = 0\n\n    localTransform[0] = @_cr * scaleX\n    localTransform[1] = -@_sr * scaleY\n    localTransform[3] = @_sr * scaleX\n    localTransform[4] = @_cr * scaleY\n\n    # TODO --> do we even need a local matrix???\n    px = @pivotX\n    py = @pivotY\n\n    # Cache the matrix values (makes for huge speed increases!)\n    a00 = localTransform[0]\n    a01 = localTransform[1]\n    a02 = @x - localTransform[0] * px - py * localTransform[1] + offsetX\n    a10 = localTransform[3]\n    a11 = localTransform[4]\n    a12 = @y - localTransform[4] * py - px * localTransform[3] + offsetY\n    b00 = parentTransform[0]\n    b01 = parentTransform[1]\n    b02 = parentTransform[2]\n    b10 = parentTransform[3]\n    b11 = parentTransform[4]\n    b12 = parentTransform[5]\n    localTransform[2] = a02\n    localTransform[5] = a12\n    worldTransform[0] = b00 * a00 + b01 * a10\n    worldTransform[1] = b00 * a01 + b01 * a11\n    worldTransform[2] = b00 * a02 + b01 * a12 + b02\n    worldTransform[3] = b10 * a00 + b11 * a10\n    worldTransform[4] = b10 * a01 + b11 * a11\n    worldTransform[5] = b10 * a02 + b11 * a12 + b12\n\n    # because we are using affine transformation, we can optimise the matrix concatenation process.. wooo!\n    # mat3.multiply(this.localTransform, this.parent.worldTransform, this.worldTransform);\n    @worldAlpha = @alpha * @parent.worldAlpha\n\n  ###*\n  The width of the sprite, setting this will actually modify the scale to acheive the value set\n\n  @property width\n  @type Number\n  ###\n  Object.defineProperty @::, 'width',\n    get: ->\n      if @texture?.frame?\n        @scaleX * @texture.frame.width\n      else\n        @_width\n\n    set: (value) ->\n      @_width = value\n      if @texture\n        @scaleX = value / @texture.frame.width\n\n  ###*\n  The height of the sprite, setting this will actually modify the scale to acheive the value set\n\n  @property height\n  @type Number\n  ###\n  Object.defineProperty @::, 'height',\n    get: ->\n      if @texture?.frame?\n        @scaleY * @texture.frame.height\n      else\n        @_height\n\n    set: (value) ->\n      @_height = value\n      if @texture\n        @scaleY = value / @texture.frame.height\n\n  ###*\n  The texture used by this `Sprite`.\n\n  @property texture\n  ###\n  Object.defineProperty @::, 'texture',\n    get: -> @_texture\n    set: (texture) ->\n      if (typeof texture is 'string') and cg.assets?.textures?\n        texture = cg.assets.textures[texture]\n\n      if @_texture?.baseTexture is texture?.baseTexture\n        @_texture = texture ? @__defaultTexture\n      else\n        @_texture = texture ? @__defaultTexture\n\n        if @__renderGroup\n          @__renderGroup.updateTexture @\n\n      @_updateFrame = true\n\n  Object.defineProperty @::, 'flipX',\n    get: -> !!@_flipX\n    set: (val) ->\n      @_flipX = val\n\n  Object.defineProperty @::, 'flipY',\n    get: -> !!@_flipY\n    set: (val) ->\n      @_flipY = val\n\n  ###*\n  When the texture is updated, this event will fire to update the scale and frame\n\n  @method onTextureUpdate\n  @param event\n  @private\n  ###\n  onTextureUpdate: (event) ->\n    # so if _width is 0 then width was not set..\n    @scaleX = @_width / @texture.frame.width  if @_width\n    @scaleY = @_height / @texture.frame.height  if @_height\n    @_updateFrame = true\n\n  # some helper functions..\n\n  ###*\n  Helper function that creates a sprite that will contain a texture from the TextureCache based on the frameId\n  The frame ids are created when a Texture packer file has been loaded\n\n  @method fromFrame\n  @static\n  @param frameId {String} The frame Id of the texture in the cache\n  @return {cg.rendering.Sprite} A new Sprite using a texture from the texture cache matching the frameId\n  ###\n  @fromFrame: (frameId) ->\n    texture = Texture.cache[frameId]\n    throw new Error('The frameId \\'' + frameId + '\\' does not exist in the texture cache ' + this)  unless texture\n    new Sprite(texture)\n\n  ###*\n  Helper function that creates a sprite that will contain a texture based on an image url\n  If the image is not in the texture cache it will be loaded\n\n  @method fromImage\n  @static\n  @param imageId {String} The image url of the texture\n  @return {cg.rendering.Sprite} A new Sprite using a texture from the texture cache matching the image id\n  ###\n  @fromImage: (imageId) ->\n    texture = Texture.fromImage(imageId)\n    new Sprite(texture)\n\nmodule.exports = Sprite",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\ncg = require 'cg'\nDisplayObjectContainer = require 'rendering/DisplayObjectContainer'\nPoint = require 'rendering/core/Point'\nTexture = require 'rendering/textures/Texture'\nMatrix = require 'rendering/core/Matrix'\n\n###*\nA Stage represents the root of the display tree. Everything connected to the stage is rendered\n\n@class cg.rendering.Stage\n@extends cg.rendering.DisplayObjectContainer\n@constructor\n@param backgroundColor {Number} The background color of the stage. Hex format is most convenient; eg. `0xFFFFFF` for white.\n###\nclass Stage extends DisplayObjectContainer\n  constructor: (backgroundColor) ->\n    super\n    \n    ###*\n    Current transform of the object based on world (parent) factors\n    \n    @property worldTransform\n    @type Mat3\n    @final\n    @private\n    ###\n    @worldTransform = Matrix.mat3.create()\n    \n    @dirty = true\n    \n    # The stage is its own stage.\n    @stage = this\n\n    @setBackgroundColor backgroundColor\n    @_setWorldVisible true\n\n  ###*    \n  Updates the object transform for rendering\n  \n  @method __updateTransform\n  @private\n  ###\n  __updateTransform: ->\n    @worldAlpha = 1\n    i = 0\n    j = @children.length\n\n    while i < j\n      @children[i].__updateTransform()\n      i++\n\n    if @dirty\n      @dirty = false\n\n  ###*\n  Sets the background color for the stage\n\n  @method setBackgroundColor\n  @param backgroundColor {Number} the color of the background, easiest way to pass this in is in hex format\n  like: 0xFFFFFF for white\n  ###\n  setBackgroundColor: (backgroundColor) ->\n    @backgroundColor = backgroundColor or 0x000000\n    @backgroundColorSplit = cg.util.hexToRGB(@backgroundColor)\n    hex = @backgroundColor.toString(16)\n    hex = \"000000\".substr(0, 6 - hex.length) + hex\n    @backgroundColorString = \"#\" + hex\n\nmodule.exports = Stage",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/\n###\n\ncg = require 'cg'\nDisplayObjectContainer = require 'rendering/DisplayObjectContainer'\nSprite = require 'rendering/Sprite'\nRenderTypes = require 'rendering/core/RenderTypes'\n\n###*\nTODOC\n\n@class cg.rendering.Strip\n###\nclass Strip extends DisplayObjectContainer\n  __renderType: RenderTypes.STRIP\n  constructor: (texture, width, height) ->\n    super\n\n    @texture = texture\n    @blendMode = Sprite.blendModes.NORMAL\n    try\n      @uvs = new cg.util.Float32Array([0, 1, 1, 1, 1, 0, 0, 1])\n      @verticies = new cg.util.Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0])\n      @colors = new cg.util.Float32Array([1, 1, 1, 1])\n      @indices = new cg.util.Uint16Array([0, 1, 2, 3])\n    catch error\n      @uvs = [0, 1, 1, 1, 1, 0, 0, 1]\n      @verticies = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n      @colors = [1, 1, 1, 1]\n      @indices = [0, 1, 2, 3]\n    \n    #\n    #\tthis.uvs = new cg.util.Float32Array()\n    #\tthis.verticies = new cg.util.Float32Array()\n    #\tthis.colors = new cg.util.Float32Array()\n    #\tthis.indices = new cg.util.Uint16Array()\n    #\n    @width = width\n    @height = height\n    \n    # load the texture!\n    if texture.baseTexture.hasLoaded\n      @width = @texture.frame.width\n      @height = @texture.frame.height\n      @_updateFrame = true\n    else\n      @onTextureUpdateBind = @onTextureUpdate.bind(this)\n      @texture.on 'update', @onTextureUpdateBind\n    @renderable = true\n\n  ###*\n  The texture used by this `Strip`.\n\n  @property texture\n  ###\n  Object.defineProperty @::, 'texture',\n    get: -> @_texture\n    set: (texture) ->\n      #TODO SET THE TEXTURES\n      #TODO VISIBILITY\n      \n      # stop current texture \n      @_texture = texture\n      @width = texture.frame.width\n      @height = texture.frame.height\n      @_updateFrame = true\n\n  onTextureUpdate: (event) ->\n    @_updateFrame = true\n\nmodule.exports = Strip",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/\n###\n\nPoint = require 'rendering/core/Point'\nDisplayObjectContainer = require 'rendering/DisplayObjectContainer'\nSprite = require 'rendering/Sprite'\nRenderTypes = require 'rendering/core/RenderTypes'\n\n###*\nA tiling sprite is a fast way of rendering a tiling image\n\n@class cg.rendering.TilingSprite\n@extends cg.rendering.DisplayObjectContainer\n@constructor\n@param texture {Texture} the texture of the tiling sprite *NOTE*: Dimensions of the *baseTexture* must be a power-of-2! (eg. 32x64, 128x128, etc.)\n@param width {Number}  the width of the tiling sprite\n@param height {Number} the height of the tiling sprite\n###\nclass TilingSprite extends DisplayObjectContainer\n  __renderType: RenderTypes.TILINGSPRITE\n  constructor: (texture, width, height) ->\n    super\n    \n    ###*\n    The texture that the sprite is using\n    \n    @property texture\n    @type Texture\n    ###\n    @texture = texture\n    \n    ###*\n    The width of the tiling sprite\n    \n    @property width\n    @type Number\n    ###\n    @width = width\n    \n    ###*\n    The height of the tiling sprite\n    \n    @property height\n    @type Number\n    ###\n    @height = height\n    \n    ###*\n    The scaling of the image that is being tiled\n    \n    @property tileScale\n    @type Point\n    ###\n    @tileScale = new Point(1, 1)\n    \n    ###*\n    The offset position of the image that is being tiled\n    \n    @property tilePosition\n    @type Point\n    ###\n    @tilePosition = new Point(0, 0)\n    @renderable = true\n    @blendMode = Sprite.blendModes.NORMAL\n\n  ###*\n  The texture used by this `TilingSprite`.\n\n  **NOTE**: Must be a power-of-two image.\n  @property texture\n  ###\n  Object.defineProperty @::, 'texture',\n    get: -> @_texture\n    set: (texture) ->\n      #TODO SET THE TEXTURES\n      #TODO VISIBILITY\n      \n      # stop current texture \n      @_texture = texture\n      @_updateFrame = true\n\n  ###*\n  When the texture is updated, this event will fire to update the frame\n\n  @method onTextureUpdate\n  @param event\n  @private\n  ###\n  onTextureUpdate: (event) ->\n    @_updateFrame = true\n\nmodule.exports = TilingSprite",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Chad Engler <chad@pantherdev.com>\n###\n\n###\nThe Circle object can be used to specify a hit area for displayobjects\n\n@class Circle\n@constructor\n@param x {Number} The X coord of the upper-left corner of the framing rectangle of this circle\n@param y {Number} The Y coord of the upper-left corner of the framing rectangle of this circle\n@param radius {Number} The radius of the circle\n###\nclass Circle\n  constructor: (x, y, radius) ->\n    ###\n    @property x\n    @type Number\n    @default 0\n    ###\n    @x = x or 0\n    \n    ###\n    @property y\n    @type Number\n    @default 0\n    ###\n    @y = y or 0\n    \n    ###\n    @property radius\n    @type Number\n    @default 0\n    ###\n    @radius = radius or 0\n\n  ###\n  Creates a clone of this Circle instance\n\n  @method clone\n  @return {Circle} a copy of the polygon\n  ###\n  clone: ->\n    new Circle(@x, @y, @radius)\n\n\n  ###\n  Checks if the x, and y coords passed to this function are contained within this circle\n\n  @method contains\n  @param x {Number} The X coord of the point to test\n  @param y {Number} The Y coord of the point to test\n  @return {Boolean} if the x/y coords are within this polygon\n  ###\n  contains: (x, y) ->\n    return false  if @radius <= 0\n    dx = (@x - x)\n    dy = (@y - y)\n    r2 = @radius * @radius\n    dx *= dx\n    dy *= dy\n    dx + dy <= r2\n\nmodule.exports = Circle",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Chad Engler <chad@pantherdev.com>\n###\n\n###\nThe Ellipse object can be used to specify a hit area for displayobjects\n\n@class Ellipse\n@constructor\n@param x {Number} The X coord of the upper-left corner of the framing rectangle of this ellipse\n@param y {Number} The Y coord of the upper-left corner of the framing rectangle of this ellipse\n@param width {Number} The overall height of this ellipse\n@param height {Number} The overall width of this ellipse\n###\nclass Ellipse\n  constructor: (x, y, width, height) ->\n    ###\n    @property x\n    @type Number\n    @default 0\n    ###\n    @x = x or 0\n    \n    ###\n    @property y\n    @type Number\n    @default 0\n    ###\n    @y = y or 0\n    \n    ###\n    @property width\n    @type Number\n    @default 0\n    ###\n    @width = width or 0\n    \n    ###\n    @property height\n    @type Number\n    @default 0\n    ###\n    @height = height or 0\n\n  ###\n  Creates a clone of this Ellipse instance\n\n  @method clone\n  @return {Ellipse} a copy of the ellipse\n  ###\n  clone: ->\n    new Ellipse(@x, @y, @width, @height)\n\n  ###\n  Checks if the x, and y coords passed to this function are contained within this ellipse\n\n  @method contains\n  @param x {Number} The X coord of the point to test\n  @param y {Number} The Y coord of the point to test\n  @return {Boolean} if the x/y coords are within this ellipse\n  ###\n  contains: (x, y) ->\n    return false  if @width <= 0 or @height <= 0\n    \n    #normalize the coords to an ellipse with center 0,0\n    #and a radius of 0.5\n    normx = ((x - @x) / @width) - 0.5\n    normy = ((y - @y) / @height) - 0.5\n    normx *= normx\n    normy *= normy\n    normx + normy < 0.25\n\n  @getBounds: ->\n    new Rectangle(@x, @y, @width, @height)\n\nmodule.exports = Ellipse",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\nMatrix = {}\n\nMatrix.Matrix = (if (typeof Float32Array isnt \"undefined\") then Float32Array else Array)\n\nMatrix.mat3 = {}\nMatrix.mat3.create = ->\n  matrix = new Matrix.Matrix(9)\n  matrix[0] = 1\n  matrix[1] = 0\n  matrix[2] = 0\n  matrix[3] = 0\n  matrix[4] = 1\n  matrix[5] = 0\n  matrix[6] = 0\n  matrix[7] = 0\n  matrix[8] = 1\n  matrix\n\nMatrix.mat3.identity = (matrix) ->\n  matrix[0] = 1\n  matrix[1] = 0\n  matrix[2] = 0\n  matrix[3] = 0\n  matrix[4] = 1\n  matrix[5] = 0\n  matrix[6] = 0\n  matrix[7] = 0\n  matrix[8] = 1\n  matrix\n\nMatrix.mat4 = {}\nMatrix.mat4.create = ->\n  matrix = new Matrix.Matrix(16)\n  matrix[0] = 1\n  matrix[1] = 0\n  matrix[2] = 0\n  matrix[3] = 0\n  matrix[4] = 0\n  matrix[5] = 1\n  matrix[6] = 0\n  matrix[7] = 0\n  matrix[8] = 0\n  matrix[9] = 0\n  matrix[10] = 1\n  matrix[11] = 0\n  matrix[12] = 0\n  matrix[13] = 0\n  matrix[14] = 0\n  matrix[15] = 1\n  matrix\n\nMatrix.mat3.multiply = (mat, mat2, dest) ->\n  dest = mat  unless dest\n  \n  # Cache the matrix values (makes for huge speed increases!)\n  a00 = mat[0]\n  a01 = mat[1]\n  a02 = mat[2]\n  a10 = mat[3]\n  a11 = mat[4]\n  a12 = mat[5]\n  a20 = mat[6]\n  a21 = mat[7]\n  a22 = mat[8]\n  b00 = mat2[0]\n  b01 = mat2[1]\n  b02 = mat2[2]\n  b10 = mat2[3]\n  b11 = mat2[4]\n  b12 = mat2[5]\n  b20 = mat2[6]\n  b21 = mat2[7]\n  b22 = mat2[8]\n  dest[0] = b00 * a00 + b01 * a10 + b02 * a20\n  dest[1] = b00 * a01 + b01 * a11 + b02 * a21\n  dest[2] = b00 * a02 + b01 * a12 + b02 * a22\n  dest[3] = b10 * a00 + b11 * a10 + b12 * a20\n  dest[4] = b10 * a01 + b11 * a11 + b12 * a21\n  dest[5] = b10 * a02 + b11 * a12 + b12 * a22\n  dest[6] = b20 * a00 + b21 * a10 + b22 * a20\n  dest[7] = b20 * a01 + b21 * a11 + b22 * a21\n  dest[8] = b20 * a02 + b21 * a12 + b22 * a22\n  dest\n\nMatrix.mat3.clone = (mat) ->\n  matrix = new Matrix.Matrix(9)\n  matrix[0] = mat[0]\n  matrix[1] = mat[1]\n  matrix[2] = mat[2]\n  matrix[3] = mat[3]\n  matrix[4] = mat[4]\n  matrix[5] = mat[5]\n  matrix[6] = mat[6]\n  matrix[7] = mat[7]\n  matrix[8] = mat[8]\n  matrix\n\nMatrix.mat3.transpose = (mat, dest) ->\n  # If we are transposing ourselves we can skip a few steps but have to cache some values\n  if not dest or mat is dest\n    a01 = mat[1]\n    a02 = mat[2]\n    a12 = mat[5]\n    mat[1] = mat[3]\n    mat[2] = mat[6]\n    mat[3] = a01\n    mat[5] = mat[7]\n    mat[6] = a02\n    mat[7] = a12\n    return mat\n  dest[0] = mat[0]\n  dest[1] = mat[3]\n  dest[2] = mat[6]\n  dest[3] = mat[1]\n  dest[4] = mat[4]\n  dest[5] = mat[7]\n  dest[6] = mat[2]\n  dest[7] = mat[5]\n  dest[8] = mat[8]\n  dest\n\nMatrix.mat3.toMat4 = (mat, dest) ->\n  dest = Matrix.mat4.create()  unless dest\n  dest[15] = 1\n  dest[14] = 0\n  dest[13] = 0\n  dest[12] = 0\n  dest[11] = 0\n  dest[10] = mat[8]\n  dest[9] = mat[7]\n  dest[8] = mat[6]\n  dest[7] = 0\n  dest[6] = mat[5]\n  dest[5] = mat[4]\n  dest[4] = mat[3]\n  dest[3] = 0\n  dest[2] = mat[2]\n  dest[1] = mat[1]\n  dest[0] = mat[0]\n  dest\n\nMatrix.mat4.create = ->\n  matrix = new Matrix.Matrix(16)\n  matrix[0] = 1\n  matrix[1] = 0\n  matrix[2] = 0\n  matrix[3] = 0\n  matrix[4] = 0\n  matrix[5] = 1\n  matrix[6] = 0\n  matrix[7] = 0\n  matrix[8] = 0\n  matrix[9] = 0\n  matrix[10] = 1\n  matrix[11] = 0\n  matrix[12] = 0\n  matrix[13] = 0\n  matrix[14] = 0\n  matrix[15] = 1\n  matrix\n\nMatrix.mat4.transpose = (mat, dest) ->\n  # If we are transposing ourselves we can skip a few steps but have to cache some values\n  if not dest or mat is dest\n    a01 = mat[1]\n    a02 = mat[2]\n    a03 = mat[3]\n    a12 = mat[6]\n    a13 = mat[7]\n    a23 = mat[11]\n    mat[1] = mat[4]\n    mat[2] = mat[8]\n    mat[3] = mat[12]\n    mat[4] = a01\n    mat[6] = mat[9]\n    mat[7] = mat[13]\n    mat[8] = a02\n    mat[9] = a12\n    mat[11] = mat[14]\n    mat[12] = a03\n    mat[13] = a13\n    mat[14] = a23\n    return mat\n  dest[0] = mat[0]\n  dest[1] = mat[4]\n  dest[2] = mat[8]\n  dest[3] = mat[12]\n  dest[4] = mat[1]\n  dest[5] = mat[5]\n  dest[6] = mat[9]\n  dest[7] = mat[13]\n  dest[8] = mat[2]\n  dest[9] = mat[6]\n  dest[10] = mat[10]\n  dest[11] = mat[14]\n  dest[12] = mat[3]\n  dest[13] = mat[7]\n  dest[14] = mat[11]\n  dest[15] = mat[15]\n  dest\n\nMatrix.mat4.multiply = (mat, mat2, dest) ->\n  dest = mat  unless dest\n  \n  # Cache the matrix values (makes for huge speed increases!)\n  a00 = mat[0]\n  a01 = mat[1]\n  a02 = mat[2]\n  a03 = mat[3]\n  a10 = mat[4]\n  a11 = mat[5]\n  a12 = mat[6]\n  a13 = mat[7]\n  a20 = mat[8]\n  a21 = mat[9]\n  a22 = mat[10]\n  a23 = mat[11]\n  a30 = mat[12]\n  a31 = mat[13]\n  a32 = mat[14]\n  a33 = mat[15]\n  \n  # Cache only the current line of the second matrix\n  b0 = mat2[0]\n  b1 = mat2[1]\n  b2 = mat2[2]\n  b3 = mat2[3]\n  dest[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  dest[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  dest[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  dest[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n  b0 = mat2[4]\n  b1 = mat2[5]\n  b2 = mat2[6]\n  b3 = mat2[7]\n  dest[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  dest[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  dest[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  dest[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n  b0 = mat2[8]\n  b1 = mat2[9]\n  b2 = mat2[10]\n  b3 = mat2[11]\n  dest[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  dest[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  dest[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  dest[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n  b0 = mat2[12]\n  b1 = mat2[13]\n  b2 = mat2[14]\n  b3 = mat2[15]\n  dest[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  dest[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  dest[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  dest[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n  dest\n\nmodule.exports = Matrix",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\n###\nThe Point object represents a location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.\n\n@class Point\n@constructor\n@param x {Number} position of the point\n@param y {Number} position of the point\n###\nclass Point\n  constructor: (x, y) ->\n    ###\n    @property x\n    @type Number\n    @default 0\n    ###\n    @x = x or 0\n    \n    ###\n    @property y\n    @type Number\n    @default 0\n    ###\n    @y = y or 0\n\n\n  ###\n  Creates a clone of this point\n\n  @method clone\n  @return {Point} a copy of the point\n  ###\n  clone: ->\n    new Point(@x, @y)\n\nmodule.exports = Point",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Adrien Brault <adrien.brault@gmail.com>\n###\n\nPoint = require 'rendering/core/Point'\n\n###\n@class Polygon\n@constructor\n@param points* {Array<Point>|Array<Number>|Point...|Number...} This can be an array of Points that form the polygon,\na flat array of numbers that will be interpreted as [x,y, x,y, ...], or the arguments passed can be\nall the points of the polygon e.g. `new Polygon(new Point(), new Point(), ...)`, or the\narguments passed can be flat x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are\nNumbers.\n###\nclass Polygon\n  constructor: (points) ->\n    \n    #if points isn't an array, use arguments as the array\n    points = Array::slice.call(arguments)  unless points instanceof Array\n    \n    #if this is a flat array of numbers, convert it to points\n    if typeof points[0] is \"number\"\n      p = []\n      i = 0\n      il = points.length\n\n      while i < il\n        p.push new Point(points[i], points[i + 1])\n        i += 2\n      points = p\n\n    ###\n    @property points {Array<Point>}\n    ###\n    @points = points\n\n  ###\n  Creates a clone of this polygon\n\n  @method clone\n  @return {Polygon} a copy of the polygon\n  ###\n  clone: ->\n    points = []\n    i = 0\n\n    while i < @points.length\n      points.push @points[i].clone()\n      i++\n    new Polygon(points)\n\n  ###\n  Checks if the x, and y coords passed to this function are contained within this polygon\n\n  @method contains\n  @param x {Number} The X coord of the point to test\n  @param y {Number} The Y coord of the point to test\n  @return {Boolean} if the x/y coords are within this polygon\n  ###\n  contains: (x, y) ->\n    inside = false\n    \n    # use some raycasting to test hits\n    # https://github.com/substack/point-in-polygon/blob/master/index.js\n    i = 0\n    j = @points.length - 1\n\n    while i < @points.length\n      xi = @points[i].x\n      yi = @points[i].y\n      xj = @points[j].x\n      yj = @points[j].y\n      intersect = ((yi > y) isnt (yj > y)) and (x < (xj - xi) * (y - yi) / (yj - yi) + xi)\n      inside = not inside  if intersect\n      j = i++\n    inside\n\nmodule.exports = Polygon",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/\n###\n\n###\nthe Rectangle object is an area defined by its position, as indicated by its top-left corner point (x, y) and by its width and its height.\n@class Rectangle\n@constructor\n@param x {Number} The X coord of the upper-left corner of the rectangle\n@param y {Number} The Y coord of the upper-left corner of the rectangle\n@param width {Number} The overall wisth of this rectangle\n@param height {Number} The overall height of this rectangle\n###\nclass Rectangle\n  constructor: (x, y, width, height) ->\n    ###\n    @property x\n    @type Number\n    @default 0\n    ###\n    @x = x or 0\n    \n    ###\n    @property y\n    @type Number\n    @default 0\n    ###\n    @y = y or 0\n    \n    ###\n    @property width\n    @type Number\n    @default 0\n    ###\n    @width = width or 0\n    \n    ###\n    @property height\n    @type Number\n    @default 0\n    ###\n    @height = height or 0\n\n  ###\n  Creates a clone of this Rectangle\n\n  @method clone\n  @return {Rectangle} a copy of the rectangle\n  ###\n  clone: ->\n    new Rectangle(@x, @y, @width, @height)\n\n  ###\n  Checks if the x, and y coords passed to this function are contained within this Rectangle\n\n  @method contains\n  @param x {Number} The X coord of the point to test\n  @param y {Number} The Y coord of the point to test\n  @return {Boolean} if the x/y coords are within this Rectangle\n  ###\n  contains: (x, y) ->\n    return false  if @width <= 0 or @height <= 0\n    x1 = @x\n    if x >= x1 and x <= x1 + @width\n      y1 = @y\n      return true  if y >= y1 and y <= y1 + @height\n    false\n\nmodule.exports = Rectangle",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n\nmodule.exports = {\n  SPRITE: 6\n  BATCH: 1\n  TILINGSPRITE: 2\n  STRIP: 3\n  GRAPHICS: 4\n  FILTERBLOCK: 5\n  CUSTOMRENDERABLE: -1\n}",
    "Circle = require 'rendering/core/Circle'\nEllipse = require 'rendering/core/Ellipse'\nMatrix = require 'rendering/core/Matrix'\nPoint = require 'rendering/core/Point'\nPolygon = require 'rendering/core/Polygon'\nRectangle = require 'rendering/core/Rectangle'\nRenderTypes = require 'rendering/core/RenderTypes'\n\nmodule.exports = {\n  Circle: Circle\n  Ellipse: Ellipse\n  Matrix: Matrix\n  Point: Point\n  Polygon: Polygon\n  Rectangle: Rectangle\n  RenderTypes: RenderTypes\n}\n",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nModule = require 'Module'\nRenderTypes = require 'rendering/core/RenderTypes'\n\nclass FilterBlock extends Module\n  constructor: (mask) ->\n    @graphics = mask\n    @visible = true\n    @renderable = true\n\nFilterBlock::__renderType = RenderTypes.FILTERBLOCK\n\nmodule.exports = FilterBlock    \n",
    "CustomRenderable = require 'rendering/CustomRenderable'\nDisplayObject = require 'rendering/DisplayObject'\nDisplayObjectContainer = require 'rendering/DisplayObjectContainer'\nGraphics = require 'rendering/Graphics'\nSprite = require 'rendering/Sprite'\nStage = require 'rendering/Stage'\nStrip = require 'rendering/Strip'\nTilingSprite = require 'rendering/TilingSprite'\n\ncore = require 'rendering/core/index'\n\nmodule.exports = {\n  CustomRenderable: CustomRenderable\n  DisplayObject: DisplayObject\n  DisplayObjectContainer: DisplayObjectContainer\n  Graphics: Graphics\n  Sprite: Sprite\n  Stage: Stage\n  Strip: Strip\n  TilingSprite: TilingSprite\n  \n  core: core\n}",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nGraphics = require 'rendering/Graphics'\n\n###\nA set of functions used by the canvas renderer to draw the primitive graphics data\n\n@class CanvasGraphics\n###\nclass CanvasGraphics\n  ###\n  Renders the graphics object\n\n  @static\n  @private\n  @method renderGraphics\n  @param graphics {Graphics}\n  @param context {Context2D}\n  ###\n  @renderGraphics: (graphics, context) ->\n    worldAlpha = graphics.worldAlpha\n    i = 0\n\n    while i < graphics.graphicsData.length\n      data = graphics.graphicsData[i]\n      points = data.points\n      context.strokeStyle = color = \"#\" + (\"00000\" + (data.lineColor | 0).toString(16)).substr(-6)\n      context.lineWidth = data.lineWidth\n      if data.type is Graphics.POLY\n        \n        #if(data.lineWidth <= 0)continue;\n        context.beginPath()\n        context.moveTo points[0], points[1]\n        j = 1\n\n        while j < points.length / 2\n          context.lineTo points[j * 2], points[j * 2 + 1]\n          j++\n        \n        # if the first and last point are the same close the path - much neater :)\n        context.closePath()  if points[0] is points[points.length - 2] and points[1] is points[points.length - 1]\n        if data.fill\n          context.globalAlpha = data.fillAlpha * worldAlpha\n          context.fillStyle = color = \"#\" + (\"00000\" + (data.fillColor | 0).toString(16)).substr(-6)\n          context.fill()\n        if data.lineWidth\n          context.globalAlpha = data.lineAlpha * worldAlpha\n          context.stroke()\n      else if data.type is Graphics.RECT\n        \n        if data.fillColor or data.fillColor is 0\n          context.globalAlpha = data.fillAlpha * worldAlpha\n          context.fillStyle = color = \"#\" + (\"00000\" + (data.fillColor | 0).toString(16)).substr(-6)\n          context.fillRect points[0], points[1], points[2], points[3]\n        if data.lineWidth\n          context.globalAlpha = data.lineAlpha * worldAlpha\n          context.strokeRect points[0], points[1], points[2], points[3]\n      else if data.type is Graphics.CIRC\n        \n        # TODO - need to be Undefined!\n        context.beginPath()\n        context.arc points[0], points[1], points[2], 0, 2 * Math.PI\n        context.closePath()\n        if data.fill\n          context.globalAlpha = data.fillAlpha * worldAlpha\n          context.fillStyle = color = \"#\" + (\"00000\" + (data.fillColor | 0).toString(16)).substr(-6)\n          context.fill()\n        if data.lineWidth\n          context.globalAlpha = data.lineAlpha * worldAlpha\n          context.stroke()\n      else if data.type is Graphics.ELIP\n        \n        # elipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n        elipseData = data.points\n        w = elipseData[2] * 2\n        h = elipseData[3] * 2\n        x = elipseData[0] - w / 2\n        y = elipseData[1] - h / 2\n        context.beginPath()\n        kappa = .5522848\n        ox = (w / 2) * kappa # control point offset horizontal\n        oy = (h / 2) * kappa # control point offset vertical\n        xe = x + w # x-end\n        ye = y + h # y-end\n        xm = x + w / 2 # x-middle\n        ym = y + h / 2 # y-middle\n        context.moveTo x, ym\n        context.bezierCurveTo x, ym - oy, xm - ox, y, xm, y\n        context.bezierCurveTo xm + ox, y, xe, ym - oy, xe, ym\n        context.bezierCurveTo xe, ym + oy, xm + ox, ye, xm, ye\n        context.bezierCurveTo xm - ox, ye, x, ym + oy, x, ym\n        context.closePath()\n        if data.fill\n          context.globalAlpha = data.fillAlpha * worldAlpha\n          context.fillStyle = color = \"#\" + (\"00000\" + (data.fillColor | 0).toString(16)).substr(-6)\n          context.fill()\n        if data.lineWidth\n          context.globalAlpha = data.lineAlpha * worldAlpha\n          context.stroke()\n      i++\n\n  ###    \n  Renders a graphics mask\n\n  @static\n  @private\n  @method renderGraphicsMask\n  @param graphics {Graphics}\n  @param context {Context2D}\n  ###\n  @renderGraphicsMask: (graphics, context) ->\n    worldAlpha = graphics.worldAlpha\n    len = graphics.graphicsData.length\n    if len > 1\n      len = 1\n      console.log \"Pixi.js warning: masks in canvas can only mask using the first path in the graphics object\"\n    i = 0\n\n    while i < 1\n      data = graphics.graphicsData[i]\n      points = data.points\n      if data.type is Graphics.POLY\n        \n        #if(data.lineWidth <= 0)continue;\n        context.beginPath()\n        context.moveTo points[0], points[1]\n        j = 1\n\n        while j < points.length / 2\n          context.lineTo points[j * 2], points[j * 2 + 1]\n          j++\n        \n        # if the first and last point are the same close the path - much neater :)\n        context.closePath()  if points[0] is points[points.length - 2] and points[1] is points[points.length - 1]\n      else if data.type is Graphics.RECT\n        context.beginPath()\n        context.rect points[0], points[1], points[2], points[3]\n        context.closePath()\n      else if data.type is Graphics.CIRC\n        \n        # TODO - need to be Undefined!\n        context.beginPath()\n        context.arc points[0], points[1], points[2], 0, 2 * Math.PI\n        context.closePath()\n      else if data.type is Graphics.ELIP\n        \n        # elipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n        elipseData = data.points\n        w = elipseData[2] * 2\n        h = elipseData[3] * 2\n        x = elipseData[0] - w / 2\n        y = elipseData[1] - h / 2\n        context.beginPath()\n        kappa = .5522848\n        ox = (w / 2) * kappa # control point offset horizontal\n        oy = (h / 2) * kappa # control point offset vertical\n        xe = x + w # x-end\n        ye = y + h # y-end\n        xm = x + w / 2 # x-middle\n        ym = y + h / 2 # y-middle\n        context.moveTo x, ym\n        context.bezierCurveTo x, ym - oy, xm - ox, y, xm, y\n        context.bezierCurveTo xm + ox, y, xe, ym - oy, xe, ym\n        context.bezierCurveTo xe, ym + oy, xm + ox, ye, xm, ye\n        context.bezierCurveTo xm - ox, ye, x, ym + oy, x, ym\n        context.closePath()\n      i++\n\nmodule.exports = CanvasGraphics",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nTexture = require 'rendering/textures/Texture'\nBaseTexture = require 'rendering/textures/BaseTexture'\nCanvasGraphics = require 'rendering/renderers/canvas/CanvasGraphics'\nRenderTypes = require 'rendering/core/RenderTypes'\n\nRENDERTYPE_SPRITE = RenderTypes.SPRITE\nRENDERTYPE_BATCH = RenderTypes.BATCH\nRENDERTYPE_TILINGSPRITE = RenderTypes.TILINGSPRITE\nRENDERTYPE_STRIP = RenderTypes.STRIP\nRENDERTYPE_GRAPHICS = RenderTypes.GRAPHICS\nRENDERTYPE_FILTERBLOCK = RenderTypes.FILTERBLOCK\nRENDERTYPE_CUSTOMRENDERABLE = RenderTypes.CUSTOMRENDERABLE\n\n###\nthe CanvasRenderer draws the stage and all its content onto a 2d canvas. This renderer should be used for browsers that do not support webGL.\nDont forget to add the view to your DOM or you will not see anything :)\n\n@class CanvasRenderer\n@constructor\n@param width=0 {Number} the width of the canvas view\n@param height=0 {Number} the height of the canvas view\n@param view {Canvas} the canvas to use as a view, optional\n@param transparent=false {Boolean} the transparency of the render view, default false\n###\nclass CanvasRenderer\n  constructor: (width, height, view, transparent, @textureFilter='linear') ->\n    @transparent = transparent\n    \n    ###\n    The width of the canvas view\n    \n    @property width\n    @type Number\n    @default 800\n    ###\n    @width = width or 800\n    \n    ###\n    The height of the canvas view\n    \n    @property height\n    @type Number\n    @default 600\n    ###\n    @height = height or 600\n    \n    ###\n    The canvas element that the everything is drawn to\n    \n    @property view\n    @type Canvas\n    ###\n    @view = view or document.createElement(\"canvas\")\n    \n    ###\n    The canvas context that the everything is drawn to\n    @property context\n    @type Canvas 2d Context\n    ###\n    @context = @view.getContext(\"2d\")\n    @refresh = true\n    \n    # hack to enable some hardware acceleration!\n    #this.view.style[\"transform\"] = \"translatez(0)\";\n    @view.width = @width\n    @view.height = @height\n    @count = 0\n\n  ###\n  Renders the stage to its canvas view\n\n  @method render\n  @param stage {Stage} the Stage element to be rendered\n  ###\n  render: (stage) ->\n    # update textures if need be\n    @_updateTextures()\n    stage.__updateTransform()\n    \n    imageSmoothingEnabled = @textureFilter is 'nearest'\n    @context.imageSmoothingEnabled = imageSmoothingEnabled\n    @context.webkitImageSmoothingEnabled = imageSmoothingEnabled\n    @context.mozImageSmoothingEnabled = imageSmoothingEnabled\n\n    # update the background color\n    @view.style.backgroundColor = stage.backgroundColorString  if @view.style.backgroundColor isnt stage.backgroundColorString and not @transparent\n    @context.setTransform 1, 0, 0, 1, 0, 0\n    @context.clearRect 0, 0, @width, @height\n    @renderDisplayObject stage\n    \n    # remove frame updates..\n    Texture.frameUpdates = []  if Texture.frameUpdates.length > 0\n\n\n  ###\n  resizes the canvas view to the specified width and height\n\n  @method resize\n  @param width {Number} the new width of the canvas view\n  @param height {Number} the new height of the canvas view\n  ###\n  resize: (width, height, viewportWidth, viewportHeight, viewportX, viewportY) ->\n    @width = width\n    @height = height\n    \n    @viewportX = viewportX ? 0\n    @viewportY = viewportY ? 0\n\n    @viewportWidth = viewportWidth ? @width\n    @viewportHeight = viewportHeight ? @height\n    \n    @view.width = width\n    @view.height = height\n    \n    @view.style.width = width + 'px'\n    @view.style.height = height + 'px'\n    \n  getView: -> @view\n\n  ###\n  Renders a display object\n\n  @method renderDisplayObject\n  @param displayObject {DisplayObject} The displayObject to render\n  @private\n  ###\n  renderDisplayObject: (displayObject) ->\n    \n    # no loger recurrsive!\n    transform = undefined\n    context = @context\n    context.globalCompositeOperation = \"source-over\"\n    \n    # one the display object hits this. we can break the loop\t\n    testObject = displayObject.last._iNext\n    displayObject = displayObject.first\n    loop\n      transform = displayObject.worldTransform\n      unless displayObject.visible\n        displayObject = displayObject.last._iNext\n        break  if displayObject is testObject\n        continue\n      unless displayObject.renderable\n        displayObject = displayObject._iNext\n        break  if displayObject is testObject\n        continue\n\n      switch displayObject.__renderType\n        when RENDERTYPE_SPRITE\n          frame = displayObject.texture.frame\n          imageSmoothingEnabled = displayObject.texture.baseTexture.__imageSmoothingEnabled\n          context.imageSmoothingEnabled = imageSmoothingEnabled\n          context.webkitImageSmoothingEnabled = imageSmoothingEnabled\n          context.mozImageSmoothingEnabled = imageSmoothingEnabled\n          if frame\n            context.globalAlpha = displayObject.worldAlpha\n            context.setTransform transform[0], transform[3], transform[1], transform[4], transform[2], transform[5]\n            context.drawImage displayObject.texture.baseTexture.source, frame.x, frame.y, frame.width, frame.height, (displayObject.anchorX) * -frame.width, (displayObject.anchorY) * -frame.height, frame.width, frame.height\n        when RENDERTYPE_STRIP\n          context.setTransform transform[0], transform[3], transform[1], transform[4], transform[2], transform[5]\n          @renderStrip displayObject\n        when RENDERTYPE_TILINGSPRITE\n          context.setTransform transform[0], transform[3], transform[1], transform[4], transform[2], transform[5]\n          @renderTilingSprite displayObject\n        when RENDERTYPE_CUSTOMRENDERABLE\n          displayObject.renderCanvas this\n        when RENDERTYPE_GRAPHICS\n          context.setTransform transform[0], transform[3], transform[1], transform[4], transform[2], transform[5]\n          CanvasGraphics.renderGraphics displayObject, context\n        when RENDERTYPE_FILTERBLOCK\n          if displayObject.open\n            context.save()\n            cacheAlpha = displayObject.mask.alpha\n            maskTransform = displayObject.mask.worldTransform\n            context.setTransform maskTransform[0], maskTransform[3], maskTransform[1], maskTransform[4], maskTransform[2], maskTransform[5]\n            displayObject.mask.worldAlpha = 0.5\n            context.worldAlpha = 0\n            CanvasGraphics.renderGraphicsMask displayObject.mask, context\n\n            context.clip()\n            displayObject.mask.worldAlpha = cacheAlpha\n          else\n            context.restore()\n      \n      displayObject = displayObject._iNext\n      break  if displayObject is testObject\n    return\n\n  ###\n  Renders a flat strip\n\n  @method renderStripFlat\n  @param strip {Strip} The Strip to render\n  @private\n  ###\n  renderStripFlat: (strip) ->\n    context = @context\n    verticies = strip.verticies\n    uvs = strip.uvs\n    length = verticies.length / 2\n    @count++\n    context.beginPath()\n    i = 1\n\n    while i < length - 2\n      \n      # draw some triangles!\n      index = i * 2\n      x0 = verticies[index]\n      x1 = verticies[index + 2]\n      x2 = verticies[index + 4]\n      y0 = verticies[index + 1]\n      y1 = verticies[index + 3]\n      y2 = verticies[index + 5]\n      context.moveTo x0, y0\n      context.lineTo x1, y1\n      context.lineTo x2, y2\n      i++\n    context.fillStyle = \"#FF0000\"\n    context.fill()\n    context.closePath()\n\n  ###\n  Renders a tiling sprite\n\n  @method renderTilingSprite\n  @param sprite {TilingSprite} The tilingsprite to render\n  @private\n  ###\n  renderTilingSprite: (sprite) ->\n    context = @context\n    context.globalAlpha = sprite.worldAlpha\n    sprite.__tilePattern = context.createPattern(sprite.texture.baseTexture.source, \"repeat\")  unless sprite.__tilePattern\n    context.beginPath()\n    tilePosition = sprite.tilePosition\n    tileScale = sprite.tileScale\n    \n    # offset\n    context.scale tileScale.x, tileScale.y\n    context.translate tilePosition.x, tilePosition.y\n    context.fillStyle = sprite.__tilePattern\n    context.fillRect -tilePosition.x, -tilePosition.y, sprite.width / tileScale.x, sprite.height / tileScale.y\n    context.scale 1 / tileScale.x, 1 / tileScale.y\n    context.translate -tilePosition.x, -tilePosition.y\n    context.closePath()\n\n  ###\n  Renders a strip\n\n  @method renderStrip\n  @param strip {Strip} The Strip to render\n  @private\n  ###\n  renderStrip: (strip) ->\n    context = @context\n    \n    verticies = strip.verticies\n    uvs = strip.uvs\n    length = verticies.length / 2\n    @count++\n    i = 1\n\n    while i < length - 2\n      # draw some triangles!\n      index = i * 2\n      x0 = verticies[index]\n      x1 = verticies[index + 2]\n      x2 = verticies[index + 4]\n      y0 = verticies[index + 1]\n      y1 = verticies[index + 3]\n      y2 = verticies[index + 5]\n      u0 = uvs[index] * strip.texture.width\n      u1 = uvs[index + 2] * strip.texture.width\n      u2 = uvs[index + 4] * strip.texture.width\n      v0 = uvs[index + 1] * strip.texture.height\n      v1 = uvs[index + 3] * strip.texture.height\n      v2 = uvs[index + 5] * strip.texture.height\n      context.save()\n      context.beginPath()\n      context.moveTo x0, y0\n      context.lineTo x1, y1\n      context.lineTo x2, y2\n      context.closePath()\n\n      context.clip()\n      \n      # Compute matrix transform\n      delta = u0 * v1 + v0 * u2 + u1 * v2 - v1 * u2 - v0 * u1 - u0 * v2\n      delta_a = x0 * v1 + v0 * x2 + x1 * v2 - v1 * x2 - v0 * x1 - x0 * v2\n      delta_b = u0 * x1 + x0 * u2 + u1 * x2 - x1 * u2 - x0 * u1 - u0 * x2\n      delta_c = u0 * v1 * x2 + v0 * x1 * u2 + x0 * u1 * v2 - x0 * v1 * u2 - v0 * u1 * x2 - u0 * x1 * v2\n      delta_d = y0 * v1 + v0 * y2 + y1 * v2 - v1 * y2 - v0 * y1 - y0 * v2\n      delta_e = u0 * y1 + y0 * u2 + u1 * y2 - y1 * u2 - y0 * u1 - u0 * y2\n      delta_f = u0 * v1 * y2 + v0 * y1 * u2 + y0 * u1 * v2 - y0 * v1 * u2 - v0 * u1 * y2 - u0 * y1 * v2\n      context.transform delta_a / delta, delta_d / delta, delta_b / delta, delta_e / delta, delta_c / delta, delta_f / delta\n      context.drawImage strip.texture.baseTexture.source, 0, 0\n      context.restore()\n      i++\n    return\n\n  ###\n  Updates canvas related texture properties of a given texture\n\n  @static\n  @method updateTexture\n  @param texture {Texture} The texture to update\n  @private\n  ###\n  @updateTexture: (texture, defaultFilterMode) ->\n    if texture.filterMode?\n      filterMode = texture.filterMode\n    else\n      filterMode = defaultFilterMode\n\n    texture.__imageSmoothingEnabled = @__getImageSmoothingEnabled filterMode\n\n  ###\n  Updates all canvas related texture properties of textures flagged for updating/destruction\n\n  @static\n  @method _updateTextures\n  @private\n  ###\n  @_updateTextures: (textureFilter) ->\n    i = 0\n\n    while i < BaseTexture.texturesToUpdate.length\n      @updateTexture BaseTexture.texturesToUpdate[i], textureFilter\n      i++\n    i = 0\n\n    while i < BaseTexture.texturesToDestroy.length\n      @destroyTexture BaseTexture.texturesToDestroy[i]\n      i++\n    BaseTexture.texturesToUpdate = []\n    BaseTexture.texturesToDestroy = []\n\n  ###\n  @static\n  @method _updateAllTextures\n  @private\n  ###\n  @_updateAllTextures: (defaultFilter) ->\n    for tex in BaseTexture.allTextures\n      @updateTexture tex, defaultFilter\n\n  ###\n  @static\n  @method destroyTexture\n  @private\n  ###\n  @destroyTexture: (texture) -> # TODO: I can't think of any cleanup we'd need to do.\n\n  ###\n  @static\n  @method __getImageSmoothingEnabled\n  @private\n  ###\n  @__getImageSmoothingEnabled: (filterMode) ->\n    imageSmoothingEnabled = true\n    switch filterMode\n      when 'nearest'\n        imageSmoothingEnabled = false\n      when 'linear'\n        imageSmoothingEnabled = true\n      else\n        console.warn 'Unexpected value for filterMode: ' + filterMode + '. Defaulting to LINEAR'\n        imageSmoothingEnabled = true\n    return imageSmoothingEnabled\n\n  _updateTextures: -> CanvasRenderer._updateTextures arguments...\n  _updateAllTextures: -> CanvasRenderer._updateAllTextures arguments...\n\nmodule.exports = CanvasRenderer\n",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\ncg = require 'cg'\nPoint = require 'rendering/core/Point'\nMatrix = require 'rendering/core/Matrix'\nPolyK = require 'rendering/utils/PolyK'\nGraphics = require 'rendering/Graphics'\nGLESShaders = require 'rendering/renderers/webgl/GLESShaders'\n\n###\nA set of functions used by the webGL renderer to draw the primitive graphics data\n\n@class CanvasGraphics\n###\nclass GLESGraphics\n  ###\n  Renders the graphics object\n\n  @static\n  @private\n  @method renderGraphics\n  @param graphics {Graphics}\n  @param projection {Object}\n  ###\n  @renderGraphics: (graphics, projection) ->\n    gl = @gl\n    unless graphics._GL\n      graphics._GL =\n        points: []\n        indices: []\n        lastIndex: 0\n        buffer: gl.createBuffer()\n        indexBuffer: gl.createBuffer()\n    if graphics.dirty\n      graphics.dirty = false\n      if graphics.clearDirty\n        graphics.clearDirty = false\n        graphics._GL.lastIndex = 0\n        graphics._GL.points = []\n        graphics._GL.indices = []\n      GLESGraphics.updateGraphics graphics\n    GLESShaders.activatePrimitiveShader gl\n    m = Matrix.mat3.clone(graphics.worldTransform)\n    Matrix.mat3.transpose m\n    gl.blendFunc gl.ONE, gl.ONE_MINUS_SRC_ALPHA\n    gl.uniformMatrix3fv GLESShaders.primitiveShader.translationMatrix, false, m\n    gl.uniform2f GLESShaders.primitiveShader.projectionVector, projection.x, projection.y\n    gl.uniform1f GLESShaders.primitiveShader.alpha, graphics.worldAlpha\n    gl.bindBuffer gl.ARRAY_BUFFER, graphics._GL.buffer\n    gl.vertexAttribPointer GLESShaders.defaultShader.vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0\n    gl.vertexAttribPointer GLESShaders.primitiveShader.vertexPositionAttribute, 2, gl.FLOAT, false, 4 * 6, 0\n    gl.vertexAttribPointer GLESShaders.primitiveShader.colorAttribute, 4, gl.FLOAT, false, 4 * 6, 2 * 4\n    gl.bindBuffer gl.ELEMENT_ARRAY_BUFFER, graphics._GL.indexBuffer\n    gl.drawElements gl.TRIANGLE_STRIP, graphics._GL.indices.length, gl.UNSIGNED_SHORT, 0\n    GLESShaders.activateDefaultShader gl\n\n  ###\n  Updates the graphics object\n\n  @static\n  @private\n  @method updateGraphics\n  @param graphics {Graphics}\n  ###\n  @updateGraphics: (graphics) ->\n    i = graphics._GL.lastIndex\n\n    while i < graphics.graphicsData.length\n      data = graphics.graphicsData[i]\n      if data.type is Graphics.POLY\n        GLESGraphics.buildPoly data, graphics._GL  if data.points.length > 3  if data.fill\n        GLESGraphics.buildLine data, graphics._GL  if data.lineWidth > 0\n      else if data.type is Graphics.RECT\n        GLESGraphics.buildRectangle data, graphics._GL\n      else GLESGraphics.buildCircle data, graphics._GL  if data.type is Graphics.CIRC or data.type is Graphics.ELIP\n      i++\n    graphics._GL.lastIndex = graphics.graphicsData.length\n    gl = @gl\n    graphics._GL.glPoints = new cg.util.Float32Array(graphics._GL.points)\n    gl.bindBuffer gl.ARRAY_BUFFER, graphics._GL.buffer\n    gl.bufferData gl.ARRAY_BUFFER, graphics._GL.glPoints, gl.STATIC_DRAW\n    graphics._GL.glIndicies = new cg.util.Uint16Array(graphics._GL.indices)\n    gl.bindBuffer gl.ELEMENT_ARRAY_BUFFER, graphics._GL.indexBuffer\n    gl.bufferData gl.ELEMENT_ARRAY_BUFFER, graphics._GL.glIndicies, gl.STATIC_DRAW\n\n  ###\n  Builds a rectangle to draw\n\n  @static\n  @private\n  @method buildRectangle\n  @param graphics {Graphics}\n  @param webGLData {Object}\n  ###\n  @buildRectangle: (graphicsData, webGLData) ->\n    rectData = graphicsData.points\n    x = rectData[0]\n    y = rectData[1]\n    width = rectData[2]\n    height = rectData[3]\n    if graphicsData.fill\n      color = cg.util.hexToRGB(graphicsData.fillColor)\n      alpha = graphicsData.fillAlpha\n      r = color[0] * alpha\n      g = color[1] * alpha\n      b = color[2] * alpha\n      verts = webGLData.points\n      indices = webGLData.indices\n      vertPos = verts.length / 6\n      verts.push x, y\n      verts.push r, g, b, alpha\n      verts.push x + width, y\n      verts.push r, g, b, alpha\n      verts.push x, y + height\n      verts.push r, g, b, alpha\n      verts.push x + width, y + height\n      verts.push r, g, b, alpha\n      indices.push vertPos, vertPos, vertPos + 1, vertPos + 2, vertPos + 3, vertPos + 3\n    if graphicsData.lineWidth\n      graphicsData.points = [x, y, x + width, y, x + width, y + height, x, y + height, x, y]\n      GLESGraphics.buildLine graphicsData, webGLData\n\n  ###\n  Builds a circle to draw\n\n  @static\n  @private\n  @method buildCircle\n  @param graphics {Graphics}\n  @param webGLData {Object}\n  ###\n  @buildCircle: (graphicsData, webGLData) ->\n    rectData = graphicsData.points\n    x = rectData[0]\n    y = rectData[1]\n    width = rectData[2]\n    height = rectData[3]\n    totalSegs = 40\n    seg = (Math.PI * 2) / totalSegs\n    if graphicsData.fill\n      color = cg.util.hexToRGB(graphicsData.fillColor)\n      alpha = graphicsData.fillAlpha\n      r = color[0] * alpha\n      g = color[1] * alpha\n      b = color[2] * alpha\n      verts = webGLData.points\n      indices = webGLData.indices\n      vecPos = verts.length / 6\n      indices.push vecPos\n      i = 0\n\n      while i < totalSegs + 1\n        verts.push x, y, r, g, b, alpha\n        verts.push x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height, r, g, b, alpha\n        indices.push vecPos++, vecPos++\n        i++\n      indices.push vecPos - 1\n    if graphicsData.lineWidth\n      graphicsData.points = []\n      i = 0\n\n      while i < totalSegs + 1\n        graphicsData.points.push x + Math.sin(seg * i) * width, y + Math.cos(seg * i) * height\n        i++\n      GLESGraphics.buildLine graphicsData, webGLData\n\n  ###\n  Builds a line to draw\n\n  @static\n  @private\n  @method buildLine\n  @param graphics {Graphics}\n  @param webGLData {Object}\n  ###\n  @buildLine: (graphicsData, webGLData) ->\n    wrap = true\n    points = graphicsData.points\n    return  if points.length is 0\n    firstPoint = new Point(points[0], points[1])\n    lastPoint = new Point(points[points.length - 2], points[points.length - 1])\n    if firstPoint.x is lastPoint.x and firstPoint.y is lastPoint.y\n      points.pop()\n      points.pop()\n      lastPoint = new Point(points[points.length - 2], points[points.length - 1])\n      midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5\n      midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5\n      points.unshift midPointX, midPointY\n      points.push midPointX, midPointY\n    verts = webGLData.points\n    indices = webGLData.indices\n    length = points.length / 2\n    indexCount = points.length\n    indexStart = verts.length / 6\n    width = graphicsData.lineWidth / 2\n    color = cg.util.hexToRGB(graphicsData.lineColor)\n    alpha = graphicsData.lineAlpha\n    r = color[0] * alpha\n    g = color[1] * alpha\n    b = color[2] * alpha\n    p1x = undefined\n    p1y = undefined\n    p2x = undefined\n    p2y = undefined\n    p3x = undefined\n    p3y = undefined\n    perpx = undefined\n    perpy = undefined\n    perp2x = undefined\n    perp2y = undefined\n    perp3x = undefined\n    perp3y = undefined\n    ipx = undefined\n    ipy = undefined\n    a1 = undefined\n    b1 = undefined\n    c1 = undefined\n    a2 = undefined\n    b2 = undefined\n    c2 = undefined\n    denom = undefined\n    pdist = undefined\n    dist = undefined\n    p1x = points[0]\n    p1y = points[1]\n    p2x = points[2]\n    p2y = points[3]\n    perpx = -(p1y - p2y)\n    perpy = p1x - p2x\n    dist = Math.sqrt(perpx * perpx + perpy * perpy)\n    perpx /= dist\n    perpy /= dist\n    perpx *= width\n    perpy *= width\n    verts.push p1x - perpx, p1y - perpy, r, g, b, alpha\n    verts.push p1x + perpx, p1y + perpy, r, g, b, alpha\n    i = 1\n\n    while i < length - 1\n      p1x = points[(i - 1) * 2]\n      p1y = points[(i - 1) * 2 + 1]\n      p2x = points[(i) * 2]\n      p2y = points[(i) * 2 + 1]\n      p3x = points[(i + 1) * 2]\n      p3y = points[(i + 1) * 2 + 1]\n      perpx = -(p1y - p2y)\n      perpy = p1x - p2x\n      dist = Math.sqrt(perpx * perpx + perpy * perpy)\n      perpx /= dist\n      perpy /= dist\n      perpx *= width\n      perpy *= width\n      perp2x = -(p2y - p3y)\n      perp2y = p2x - p3x\n      dist = Math.sqrt(perp2x * perp2x + perp2y * perp2y)\n      perp2x /= dist\n      perp2y /= dist\n      perp2x *= width\n      perp2y *= width\n      a1 = (-perpy + p1y) - (-perpy + p2y)\n      b1 = (-perpx + p2x) - (-perpx + p1x)\n      c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y)\n      a2 = (-perp2y + p3y) - (-perp2y + p2y)\n      b2 = (-perp2x + p2x) - (-perp2x + p3x)\n      c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y)\n      denom = a1 * b2 - a2 * b1\n      denom += 1  if denom is 0\n      px = (b1 * c2 - b2 * c1) / denom\n      py = (a2 * c1 - a1 * c2) / denom\n      pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y)\n      if pdist > 140 * 140\n        perp3x = perpx - perp2x\n        perp3y = perpy - perp2y\n        dist = Math.sqrt(perp3x * perp3x + perp3y * perp3y)\n        perp3x /= dist\n        perp3y /= dist\n        perp3x *= width\n        perp3y *= width\n        verts.push p2x - perp3x, p2y - perp3y\n        verts.push r, g, b, alpha\n        verts.push p2x + perp3x, p2y + perp3y\n        verts.push r, g, b, alpha\n        verts.push p2x - perp3x, p2y - perp3y\n        verts.push r, g, b, alpha\n        indexCount++\n      else\n        verts.push px, py\n        verts.push r, g, b, alpha\n        verts.push p2x - (px - p2x), p2y - (py - p2y)\n        verts.push r, g, b, alpha\n      i++\n    p1x = points[(length - 2) * 2]\n    p1y = points[(length - 2) * 2 + 1]\n    p2x = points[(length - 1) * 2]\n    p2y = points[(length - 1) * 2 + 1]\n    perpx = -(p1y - p2y)\n    perpy = p1x - p2x\n    dist = Math.sqrt(perpx * perpx + perpy * perpy)\n    perpx /= dist\n    perpy /= dist\n    perpx *= width\n    perpy *= width\n    verts.push p2x - perpx, p2y - perpy\n    verts.push r, g, b, alpha\n    verts.push p2x + perpx, p2y + perpy\n    verts.push r, g, b, alpha\n    indices.push indexStart\n    i = 0\n\n    while i < indexCount\n      indices.push indexStart++\n      i++\n    indices.push indexStart - 1\n\n  ###\n  Builds a polygon to draw\n\n  @static\n  @private\n  @method buildPoly\n  @param graphics {Graphics}\n  @param webGLData {Object}\n  ###\n  @buildPoly: (graphicsData, webGLData) ->\n    points = graphicsData.points\n    return  if points.length < 6\n    verts = webGLData.points\n    indices = webGLData.indices\n    length = points.length / 2\n    color = cg.util.hexToRGB(graphicsData.fillColor)\n    alpha = graphicsData.fillAlpha\n    r = color[0] * alpha\n    g = color[1] * alpha\n    b = color[2] * alpha\n    triangles = PolyK.Triangulate(points)\n    vertPos = verts.length / 6\n    i = 0\n\n    while i < triangles.length\n      indices.push triangles[i] + vertPos\n      indices.push triangles[i] + vertPos\n      indices.push triangles[i + 1] + vertPos\n      indices.push triangles[i + 2] + vertPos\n      indices.push triangles[i + 2] + vertPos\n      i += 3\n    i = 0\n\n    while i < length\n      verts.push points[i * 2], points[i * 2 + 1], r, g, b, alpha\n      i++\n\nmodule.exports = GLESGraphics",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\ncg = require 'cg'\nModule = require 'Module'\nMatrix = require 'rendering/core/Matrix'\nSprite = require 'rendering/Sprite'\nTilingSprite = require 'rendering/TilingSprite'\nStrip = require 'rendering/Strip'\nCustomRenderable = require 'rendering/CustomRenderable'\nFilterBlock = require 'rendering/filters/FilterBlock'\nGraphics = require 'rendering/Graphics'\nBaseTexture = require 'rendering/textures/BaseTexture'\nTexture = require 'rendering/textures/Texture'\nRectangle = require 'rendering/core/Rectangle'\nPoint = require 'rendering/core/Point'\nGLESShaders = require 'rendering/renderers/webgl/GLESShaders'\nGLESGraphics = require 'rendering/renderers/webgl/GLESGraphics'\nRenderTypes = require 'rendering/core/RenderTypes'\n\nRENDERTYPE_SPRITE = RenderTypes.SPRITE\nRENDERTYPE_BATCH = RenderTypes.BATCH\nRENDERTYPE_TILINGSPRITE = RenderTypes.TILINGSPRITE\nRENDERTYPE_STRIP = RenderTypes.STRIP\nRENDERTYPE_GRAPHICS = RenderTypes.GRAPHICS\nRENDERTYPE_FILTERBLOCK = RenderTypes.FILTERBLOCK\nRENDERTYPE_CUSTOMRENDERABLE = RenderTypes.CUSTOMRENDERABLE\n\nBatch = undefined\n\n###\nA GLESRenderGroup Enables a group of sprites to be drawn using the same settings.\nif a group of sprites all have the same baseTexture and blendMode then they can be\ngrouped into a batch. All the sprites in a batch can then be drawn in one go by the\nGPU which is hugely efficient. ALL sprites in the GLES renderer are added to a batch\neven if the batch only contains one sprite. Batching is handled automatically by the\nGLES renderer. A good tip is: the smaller the number of batchs there are, the faster\nthe GLES renderer will run.\n\n@class GLESRenderGroup\n@contructor\n@param gl {GLESContext} An instance of the GLES context\n###\nclass GLESRenderGroup\n  constructor: (gl, @textureFilter='linear') ->\n    @gl = gl\n    @root\n    @backgroundColor\n    @batchs = []\n    @toRemove = []\n\n  ###\n  Add a display object to the webgl renderer\n\n  @method setRenderable\n  @param displayObject {DisplayObject}\n  @private\n  ###\n  setRenderable: (displayObject) ->\n    \n    # has this changed??\n    @removeDisplayObjectAndChildren @root  if @root\n    displayObject.worldVisible = displayObject.visible\n    \n    # soooooo //\n    # to check if any batchs exist already??\n    \n    # TODO what if its already has an object? should remove it\n    @root = displayObject\n    @addDisplayObjectAndChildren displayObject\n\n\n  ###\n  Renders the stage to its webgl view\n\n  @method render\n  @param projection {Object}\n  ###\n  render: (projection) ->\n    GLESRenderer._updateTextures @textureFilter\n    gl = @gl\n    gl.uniform2f GLESShaders.defaultShader.projectionVector, projection.x, projection.y\n    gl.blendFunc gl.ONE, gl.ONE_MINUS_SRC_ALPHA\n    \n    # will render all the elements in the group\n    renderable = undefined\n    i = 0\n\n    while i < @batchs.length\n      renderable = @batchs[i]\n      switch renderable.__renderType\n        when RENDERTYPE_BATCH\n          @batchs[i].render()\n        when RENDERTYPE_TILINGSPRITE\n          @renderTilingSprite renderable, projection  if renderable.worldVisible\n        when RENDERTYPE_STRIP\n          @renderStrip renderable, projection  if renderable.worldVisible\n        when RENDERTYPE_GRAPHICS\n          GLESGraphics.renderGraphics renderable, projection  if renderable.worldVisible and renderable.renderable #, projectionMatrix);\n        when RENDERTYPE_FILTERBLOCK\n          # for now only masks are supported..\n          if renderable.open\n            gl.enable gl.STENCIL_TEST\n            gl.colorMask false, false, false, false\n            gl.stencilFunc gl.ALWAYS, 1, 0xff\n            gl.stencilOp gl.KEEP, gl.KEEP, gl.REPLACE\n            GLESGraphics.renderGraphics renderable.mask, projection\n            gl.colorMask true, true, true, true\n            gl.stencilFunc gl.NOTEQUAL, 0, 0xff\n            gl.stencilOp gl.KEEP, gl.KEEP, gl.KEEP\n          else\n            gl.disable gl.STENCIL_TEST\n      i++\n\n  ###\n  Renders the stage to its webgl view\n\n  @method handleFilter\n  @param filter {FilterBlock}\n  @private\n  ###\n  handleFilter: (filter, projection) ->\n\n  ###\n  Renders a specific displayObject\n\n  @method renderSpecific\n  @param displayObject {DisplayObject}\n  @param projection {Object}\n  @private\n  ###\n  renderSpecific: (displayObject, projection) ->\n    GLESRenderer._updateTextures @textureFilter\n    gl = @gl\n    \n    # gl.uniformMatrix4fv(GLESShaders.defaultShader.mvMatrixUniform, false, projectionMatrix);\n    gl.uniform2f GLESShaders.defaultShader.projectionVector, projection.x, projection.y\n    \n    # to do!\n    # render part of the scene...\n    startIndex = undefined\n    startBatchIndex = undefined\n    endIndex = undefined\n    endBatchIndex = undefined\n    \n    #\n    #  *  LOOK FOR THE NEXT SPRITE\n    #  *  This part looks for the closest next sprite that can go into a batch\n    #  *  it keeps looking until it finds a sprite or gets to the end of the display\n    #  *  scene graph\n    #  \n    nextRenderable = displayObject.first\n    while nextRenderable._iNext\n      nextRenderable = nextRenderable._iNext\n      break  if nextRenderable.renderable and nextRenderable.__renderGroup\n    startBatch = nextRenderable.batch\n    if nextRenderable.__renderType is RENDERTYPE_SPRITE\n      startBatch = nextRenderable.batch\n      head = startBatch.head\n      next = head\n      \n      # ok now we have the batch.. need to find the start index!\n      if head is nextRenderable\n        startIndex = 0\n      else\n        startIndex = 1\n        until head.__next is nextRenderable\n          startIndex++\n          head = head.__next\n    else\n      startBatch = nextRenderable\n    \n    # Get the LAST renderable object\n    lastRenderable = displayObject\n    endBatch = undefined\n    lastItem = displayObject\n    while lastItem.children.length > 0\n      lastItem = lastItem.children[lastItem.children.length - 1]\n      lastRenderable = lastItem  if lastItem.renderable\n    if lastRenderable.__renderType is RENDERTYPE_SPRITE\n      endBatch = lastRenderable.batch\n      head = endBatch.head\n      if head is lastRenderable\n        endIndex = 0\n      else\n        endIndex = 1\n        until head.__next is lastRenderable\n          endIndex++\n          head = head.__next\n    else\n      endBatch = lastRenderable\n    \n    # TODO - need to fold this up a bit!\n    if startBatch is endBatch\n      if startBatch.__renderType is RENDERTYPE_BATCH\n        startBatch.render startIndex, endIndex + 1\n      else\n        @renderSpecial startBatch, projection\n      return\n    \n    # now we have first and last!\n    startBatchIndex = @batchs.indexOf(startBatch)\n    endBatchIndex = @batchs.indexOf(endBatch)\n    \n    # DO the first batch\n    if startBatch.__renderType is RENDERTYPE_BATCH\n      startBatch.render startIndex\n    else\n      @renderSpecial startBatch, projection\n    \n    # DO the middle batchs..\n    i = startBatchIndex + 1\n\n    while i < endBatchIndex\n      renderable = @batchs[i]\n      if renderable.__renderType is RENDERTYPE_BATCH\n        @batchs[i].render()\n      else\n        @renderSpecial renderable, projection\n      i++\n    \n    # DO the last batch..\n    if endBatch.__renderType is RENDERTYPE_BATCH\n      endBatch.render 0, endIndex + 1\n    else\n      @renderSpecial endBatch, projection\n\n  ###\n  Renders a specific renderable\n\n  @method renderSpecial\n  @param renderable {DisplayObject}\n  @param projection {Object}\n  @private\n  ###\n  renderSpecial: (renderable, projection) ->\n    if renderable.__renderType is RENDERTYPE_TILINGSPRITE\n      @renderTilingSprite renderable, projection  if renderable.worldVisible\n    else if renderable.__renderType is RENDERTYPE_STRIP\n      @renderStrip renderable, projection  if renderable.worldVisible\n    else if renderable.__renderType is RENDERTYPE_CUSTOMRENDERABLE\n      renderable.renderGLES this, projection  if renderable.worldVisible\n    else if renderable.__renderType is RENDERTYPE_GRAPHICS\n      GLESGraphics.renderGraphics renderable, projection  if renderable.worldVisible and renderable.renderable\n    else if renderable.__renderType is RENDERTYPE_FILTERBLOCK\n      # for now only masks are supported..\n      gl = GLESRenderer.gl\n      if renderable.open\n        gl.enable gl.STENCIL_TEST\n        gl.colorMask false, false, false, false\n        gl.stencilFunc gl.ALWAYS, 1, 0xff\n        gl.stencilOp gl.KEEP, gl.KEEP, gl.REPLACE\n        GLESGraphics.renderGraphics renderable.mask, projection\n        \n        # we know this is a render texture so enable alpha too..\n        gl.colorMask true, true, true, true\n        gl.stencilFunc gl.NOTEQUAL, 0, 0xff\n        gl.stencilOp gl.KEEP, gl.KEEP, gl.KEEP\n      else\n        gl.disable gl.STENCIL_TEST\n\n  ###\n  Updates a webgl texture\n\n  @method updateTexture\n  @param displayObject {DisplayObject}\n  @private\n  ###\n  updateTexture: (displayObject) ->\n    \n    # TODO definitely can optimse this function..\n    @removeObject displayObject\n    \n    #\n    #  *  LOOK FOR THE PREVIOUS RENDERABLE\n    #  *  This part looks for the closest previous sprite that can go into a batch\n    #  *  It keeps going back until it finds a sprite or the stage\n    #  \n    previousRenderable = displayObject.first\n    until previousRenderable is @root\n      previousRenderable = previousRenderable._iPrev\n      break  if previousRenderable.renderable and previousRenderable.__renderGroup\n    \n    #\n    #  *  LOOK FOR THE NEXT SPRITE\n    #  *  This part looks for the closest next sprite that can go into a batch\n    #  *  it keeps looking until it finds a sprite or gets to the end of the display\n    #  *  scene graph\n    #  \n    nextRenderable = displayObject.last\n    while nextRenderable._iNext\n      nextRenderable = nextRenderable._iNext\n      break  if nextRenderable.renderable and nextRenderable.__renderGroup\n    @insertObject displayObject, previousRenderable, nextRenderable\n\n\n  ###\n  Adds filter blocks\n\n  @method addFilterBlocks\n  @param start {FilterBlock}\n  @param end {FilterBlock}\n  @private\n  ###\n  addFilterBlocks: (start, end) ->\n    start.__renderGroup = this\n    end.__renderGroup = this\n    \n    #\n    #  *  LOOK FOR THE PREVIOUS RENDERABLE\n    #  *  This part looks for the closest previous sprite that can go into a batch\n    #  *  It keeps going back until it finds a sprite or the stage\n    #  \n    previousRenderable = start\n    until previousRenderable is @root\n      previousRenderable = previousRenderable._iPrev\n      break  if previousRenderable.renderable and previousRenderable.__renderGroup\n    @insertAfter start, previousRenderable\n    \n    #\n    #  *  LOOK FOR THE NEXT SPRITE\n    #  *  This part looks for the closest next sprite that can go into a batch\n    #  *  it keeps looking until it finds a sprite or gets to the end of the display\n    #  *  scene graph\n    #  \n    previousRenderable2 = end\n    until previousRenderable2 is @root\n      previousRenderable2 = previousRenderable2._iPrev\n      break  if previousRenderable2.renderable and previousRenderable2.__renderGroup\n    @insertAfter end, previousRenderable2\n\n\n  ###\n  Remove filter blocks\n\n  @method removeFilterBlocks\n  @param start {FilterBlock}\n  @param end {FilterBlock}\n  @private\n  ###\n  removeFilterBlocks: (start, end) ->\n    @removeObject start\n    @removeObject end\n\n\n  ###\n  Adds a display object and children to the webgl context\n\n  @method addDisplayObjectAndChildren\n  @param displayObject {DisplayObject}\n  @private\n  ###\n  addDisplayObjectAndChildren: (displayObject) ->\n    displayObject.__renderGroup.removeDisplayObjectAndChildren displayObject  if displayObject.__renderGroup\n    \n    #\n    #  *  LOOK FOR THE PREVIOUS RENDERABLE\n    #  *  This part looks for the closest previous sprite that can go into a batch\n    #  *  It keeps going back until it finds a sprite or the stage\n    #  \n    previousRenderable = displayObject.first\n    until previousRenderable is @root\n      previousRenderable = previousRenderable._iPrev\n      break  if previousRenderable.renderable and previousRenderable.__renderGroup\n    \n    #\n    #  *  LOOK FOR THE NEXT SPRITE\n    #  *  This part looks for the closest next sprite that can go into a batch\n    #  *  it keeps looking until it finds a sprite or gets to the end of the display\n    #  *  scene graph\n    #  \n    nextRenderable = displayObject.last\n    while nextRenderable._iNext\n      nextRenderable = nextRenderable._iNext\n      break  if nextRenderable.renderable and nextRenderable.__renderGroup\n    \n    # one the display object hits this. we can break the loop \n    tempObject = displayObject.first\n    testObject = displayObject.last._iNext\n    loop\n      tempObject.__renderGroup = this\n      if tempObject.renderable\n        @insertObject tempObject, previousRenderable, nextRenderable\n        previousRenderable = tempObject\n      tempObject = tempObject._iNext\n      break unless tempObject isnt testObject\n\n\n  ###\n  Removes a display object and children to the webgl context\n\n  @method removeDisplayObjectAndChildren\n  @param displayObject {DisplayObject}\n  @private\n  ###\n  removeDisplayObjectAndChildren: (displayObject) ->\n    return  unless displayObject.__renderGroup is this\n    \n    # var displayObject = displayObject.first;\n    lastObject = displayObject.last\n    loop\n      displayObject.__renderGroup = null\n      @removeObject displayObject  if displayObject.renderable\n      displayObject = displayObject._iNext\n      break unless displayObject\n\n\n  ###\n  Inserts a displayObject into the linked list\n\n  @method insertObject\n  @param displayObject {DisplayObject}\n  @param previousObject {DisplayObject}\n  @param nextObject {DisplayObject}\n  @private\n  ###\n  insertObject: (displayObject, previousObject, nextObject) ->\n    \n    # while looping below THE OBJECT MAY NOT HAVE BEEN ADDED\n    previousSprite = previousObject\n    nextSprite = nextObject\n    \n    #\n    #  * so now we have the next renderable and the previous renderable\n    #  * \n    #  \n    if displayObject.__renderType is RENDERTYPE_SPRITE\n      previousBatch = undefined\n      nextBatch = undefined\n      if previousSprite.__renderType is RENDERTYPE_SPRITE\n        previousBatch = previousSprite.batch\n        if previousBatch\n          if previousBatch.texture is displayObject.texture.baseTexture and previousBatch.blendMode is displayObject.blendMode\n            previousBatch.insertAfter displayObject, previousSprite\n            return\n      else\n        \n        # TODO reword!\n        previousBatch = previousSprite\n      if nextSprite\n        if nextSprite.__renderType is RENDERTYPE_SPRITE\n          nextBatch = nextSprite.batch\n          \n          #batch may not exist if item was added to the display list but not to the webGL\n          if nextBatch\n            if nextBatch.texture is displayObject.texture.baseTexture and nextBatch.blendMode is displayObject.blendMode\n              nextBatch.insertBefore displayObject, nextSprite\n              return\n            else\n              if nextBatch is previousBatch\n                \n                # THERE IS A SPLIT IN THIS BATCH! //\n                splitBatch = previousBatch.split(nextSprite)\n                \n                # COOL!\n                # add it back into the array  \n                #\n                #              * OOPS!\n                #              * seems the new sprite is in the middle of a batch\n                #              * lets split it.. \n                #              \n                batch = GLESRenderer.getBatch()\n                index = @batchs.indexOf(previousBatch)\n                batch.init displayObject\n                @batchs.splice index + 1, 0, batch, splitBatch\n                return\n        else\n          \n          # TODO re-word!\n          nextBatch = nextSprite\n      \n      #\n      #    * looks like it does not belong to any batch!\n      #    * but is also not intersecting one..\n      #    * time to create anew one!\n      #    \n      batch = GLESRenderer.getBatch()\n      batch.init displayObject\n      if previousBatch # if this is invalid it means\n        index = @batchs.indexOf(previousBatch)\n        @batchs.splice index + 1, 0, batch\n      else\n        @batchs.push batch\n      return\n    else if displayObject.__renderType is RENDERTYPE_TILINGSPRITE\n      \n      # add to a batch!!\n      @initTilingSprite displayObject\n    \n    # this.batchs.push(displayObject);\n    else if displayObject.__renderType is RENDERTYPE_STRIP\n      \n      # add to a batch!!\n      @initStrip displayObject\n    \n    # this.batchs.push(displayObject);\n    else displayObject\n    \n    #displayObject.initWebGL(this);\n    \n    # add to a batch!!\n    #this.initStrip(displayObject);\n    #this.batchs.push(displayObject);\n    @insertAfter displayObject, previousSprite\n\n\n  # insert and SPLIT!\n\n  ###\n  Inserts a displayObject into the linked list\n\n  @method insertAfter\n  @param item {DisplayObject}\n  @param displayObject {DisplayObject} The object to insert\n  @private\n  ###\n  insertAfter: (item, displayObject) ->\n    if displayObject.__renderType is RENDERTYPE_SPRITE\n      previousBatch = displayObject.batch\n      if previousBatch\n        \n        # so this object is in a batch!\n        \n        # is it not? need to split the batch\n        if previousBatch.tail is displayObject\n          \n          # is it tail? insert in to batchs \n          index = @batchs.indexOf(previousBatch)\n          @batchs.splice index + 1, 0, item\n        else\n          \n          # TODO MODIFY ADD / REMOVE CHILD TO ACCOUNT FOR FILTERS (also get prev and next) //\n          \n          # THERE IS A SPLIT IN THIS BATCH! //\n          splitBatch = previousBatch.split(displayObject.__next)\n          \n          # COOL!\n          # add it back into the array  \n          #\n          #        * OOPS!\n          #        * seems the new sprite is in the middle of a batch\n          #        * lets split it.. \n          #        \n          index = @batchs.indexOf(previousBatch)\n          @batchs.splice index + 1, 0, item, splitBatch\n      else\n        @batchs.push item\n    else\n      index = @batchs.indexOf(displayObject)\n      @batchs.splice index + 1, 0, item\n\n\n  ###\n  Removes a displayObject from the linked list\n\n  @method removeObject\n  @param displayObject {DisplayObject} The object to remove\n  @private\n  ###\n  removeObject: (displayObject) ->\n    \n    # loop through children..\n    # display object //\n    \n    # add a child from the render group..\n    # remove it and all its children!\n    #displayObject.cacheVisible = false;//displayObject.visible;\n    \n    #\n    #  * removing is a lot quicker..\n    #  * \n    #  \n    batchToRemove = undefined\n    if displayObject.__renderType is RENDERTYPE_SPRITE\n      \n      # should always have a batch!\n      batch = displayObject.batch\n      return  unless batch # this means the display list has been altered befre rendering\n      batch.remove displayObject\n      batchToRemove = batch  if batch.size is 0\n    else\n      batchToRemove = displayObject\n    \n    #\n    #  * Looks like there is somthing that needs removing!\n    #  \n    if batchToRemove\n      index = @batchs.indexOf(batchToRemove)\n      return  if index is -1 # this means it was added then removed before rendered\n      \n      # ok so.. check to see if you adjacent batchs should be joined.\n      # TODO may optimise?\n      if index is 0 or index is @batchs.length - 1\n        \n        # wha - eva! just get of the empty batch!\n        @batchs.splice index, 1\n        GLESRenderer.returnBatch batchToRemove  if batchToRemove.__renderType is RENDERTYPE_BATCH\n        return\n      if @batchs[index - 1].__renderType is RENDERTYPE_BATCH and @batchs[index + 1].__renderType is RENDERTYPE_BATCH\n        if @batchs[index - 1].texture is @batchs[index + 1].texture and @batchs[index - 1].blendMode is @batchs[index + 1].blendMode\n          \n          #console.log(\"MERGE\")\n          @batchs[index - 1].merge @batchs[index + 1]\n          GLESRenderer.returnBatch batchToRemove  if batchToRemove.__renderType is RENDERTYPE_BATCH\n          GLESRenderer.returnBatch @batchs[index + 1]\n          @batchs.splice index, 2\n          return\n      @batchs.splice index, 1\n      GLESRenderer.returnBatch batchToRemove  if batchToRemove.__renderType is RENDERTYPE_BATCH\n\n\n  ###\n  Initializes a tiling sprite\n\n  @method initTilingSprite\n  @param sprite {TilingSprite} The tiling sprite to initialize\n  @private\n  ###\n  initTilingSprite: (sprite) ->\n    gl = @gl\n    \n    # make the texture tilable..\n    sprite.verticies = new cg.util.Float32Array([0, 0, sprite.width, 0, sprite.width, sprite.height, 0, sprite.height])\n    sprite.uvs = new cg.util.Float32Array([0, 0, 1, 0, 1, 1, 0, 1])\n    sprite.colors = new cg.util.Float32Array([1, 1, 1, 1])\n    sprite.indices = new cg.util.Uint16Array([0, 1, 3, 2]) #, 2]);\n    sprite._vertexBuffer = gl.createBuffer()\n    sprite._indexBuffer = gl.createBuffer()\n    sprite._uvBuffer = gl.createBuffer()\n    sprite._colorBuffer = gl.createBuffer()\n    gl.bindBuffer gl.ARRAY_BUFFER, sprite._vertexBuffer\n    gl.bufferData gl.ARRAY_BUFFER, sprite.verticies, gl.STATIC_DRAW\n    gl.bindBuffer gl.ARRAY_BUFFER, sprite._uvBuffer\n    gl.bufferData gl.ARRAY_BUFFER, sprite.uvs, gl.DYNAMIC_DRAW\n    gl.bindBuffer gl.ARRAY_BUFFER, sprite._colorBuffer\n    gl.bufferData gl.ARRAY_BUFFER, sprite.colors, gl.STATIC_DRAW\n    gl.bindBuffer gl.ELEMENT_ARRAY_BUFFER, sprite._indexBuffer\n    gl.bufferData gl.ELEMENT_ARRAY_BUFFER, sprite.indices, gl.STATIC_DRAW\n    \n    #    return ( (x > 0) && ((x & (x - 1)) == 0) );\n    if sprite.texture.baseTexture._glTexture\n      gl.bindTexture gl.TEXTURE_2D, sprite.texture.baseTexture._glTexture\n      gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT\n      gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT\n      sprite.texture.baseTexture._powerOf2 = true\n    else\n      sprite.texture.baseTexture._powerOf2 = true\n\n  ###\n  Renders a Strip\n\n  @method renderStrip\n  @param strip {Strip} The strip to render\n  @param projection {Object}\n  @private\n  ###\n  renderStrip: (strip, projection) ->\n    gl = @gl\n    defaultShader = GLESShaders.defaultShader\n    \n    # mat\n    #var mat4Real = Matrix.mat3.toMat4(strip.worldTransform);\n    #Matrix.mat4.transpose(mat4Real);\n    #Matrix.mat4.multiply(projectionMatrix, mat4Real, mat4Real )\n    gl.useProgram GLESShaders.stripShaderProgram\n    m = Matrix.mat3.clone(strip.worldTransform)\n    Matrix.mat3.transpose m\n    \n    # set the matrix transform for the \n    gl.uniformMatrix3fv GLESShaders.stripShaderProgram.translationMatrix, false, m\n    gl.uniform2f GLESShaders.stripShaderProgram.projectionVector, projection.x, projection.y\n    gl.uniform1f GLESShaders.stripShaderProgram.alpha, strip.worldAlpha\n    \n    #\n    # if(strip.blendMode == Sprite.blendModes.NORMAL)\n    # {\n    #   gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    # }\n    # else\n    # {\n    #   gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_COLOR);\n    # }\n    # \n    unless strip.dirty\n      gl.bindBuffer gl.ARRAY_BUFFER, strip._vertexBuffer\n      gl.bufferSubData gl.ARRAY_BUFFER, 0, strip.verticies\n      gl.vertexAttribPointer defaultShader.vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0\n      \n      # update the uvs\n      gl.bindBuffer gl.ARRAY_BUFFER, strip._uvBuffer\n      gl.vertexAttribPointer defaultShader.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0\n      gl.activeTexture gl.TEXTURE0\n      gl.bindTexture gl.TEXTURE_2D, strip.texture.baseTexture._glTexture\n      gl.bindBuffer gl.ARRAY_BUFFER, strip._colorBuffer\n      gl.vertexAttribPointer defaultShader.colorAttribute, 1, gl.FLOAT, false, 0, 0\n      \n      # dont need to upload!\n      gl.bindBuffer gl.ELEMENT_ARRAY_BUFFER, strip._indexBuffer\n    else\n      strip.dirty = false\n      gl.bindBuffer gl.ARRAY_BUFFER, strip._vertexBuffer\n      gl.bufferData gl.ARRAY_BUFFER, strip.verticies, gl.STATIC_DRAW\n      gl.vertexAttribPointer defaultShader.vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0\n      \n      # update the uvs\n      gl.bindBuffer gl.ARRAY_BUFFER, strip._uvBuffer\n      gl.bufferData gl.ARRAY_BUFFER, strip.uvs, gl.STATIC_DRAW\n      gl.vertexAttribPointer defaultShader.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0\n      gl.activeTexture gl.TEXTURE0\n      gl.bindTexture gl.TEXTURE_2D, strip.texture.baseTexture._glTexture\n      gl.bindBuffer gl.ARRAY_BUFFER, strip._colorBuffer\n      gl.bufferData gl.ARRAY_BUFFER, strip.colors, gl.STATIC_DRAW\n      gl.vertexAttribPointer defaultShader.colorAttribute, 1, gl.FLOAT, false, 0, 0\n      \n      # dont need to upload!\n      gl.bindBuffer gl.ELEMENT_ARRAY_BUFFER, strip._indexBuffer\n      gl.bufferData gl.ELEMENT_ARRAY_BUFFER, strip.indices, gl.STATIC_DRAW\n    \n    #console.log(gl.TRIANGLE_STRIP);\n    gl.drawElements gl.TRIANGLE_STRIP, strip.indices.length, gl.UNSIGNED_SHORT, 0\n    gl.useProgram GLESShaders.defaultShader\n\n\n  ###\n  Renders a TilingSprite\n\n  @method renderTilingSprite\n  @param sprite {TilingSprite} The tiling sprite to render\n  @param projectionMatrix {Object}\n  @private\n  ###\n  renderTilingSprite: (sprite, projectionMatrix) ->\n    gl = @gl\n    defaultShader = GLESShaders.defaultShader\n    tilePosition = sprite.tilePosition\n    tileScale = sprite.tileScale\n    offsetX = tilePosition.x / sprite.texture.baseTexture.width\n    offsetY = tilePosition.y / sprite.texture.baseTexture.height\n    scaleX = (sprite.width / sprite.texture.baseTexture.width) / tileScale.x\n    scaleY = (sprite.height / sprite.texture.baseTexture.height) / tileScale.y\n    sprite.uvs[0] = 0 - offsetX\n    sprite.uvs[1] = 0 - offsetY\n    sprite.uvs[2] = (1 * scaleX) - offsetX\n    sprite.uvs[3] = 0 - offsetY\n    sprite.uvs[4] = (1 * scaleX) - offsetX\n    sprite.uvs[5] = (1 * scaleY) - offsetY\n    sprite.uvs[6] = 0 - offsetX\n    sprite.uvs[7] = (1 * scaleY) - offsetY\n\n    sprite.verticies[2] = sprite.verticies[4] = sprite.width\n    sprite.verticies[5] = sprite.verticies[7] = sprite.height\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, sprite._vertexBuffer)\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, sprite.verticies)\n\n    gl.bindBuffer gl.ARRAY_BUFFER, sprite._uvBuffer\n    gl.bufferSubData gl.ARRAY_BUFFER, 0, sprite.uvs\n    \n    @renderStrip sprite, projectionMatrix\n\n\n  ###\n  Initializes a strip to be rendered\n\n  @method initStrip\n  @param strip {Strip} The strip to initialize\n  @private\n  ###\n  initStrip: (strip) ->\n    \n    # build the strip!\n    gl = @gl\n    defaultShader = @defaultShader\n    strip._vertexBuffer = gl.createBuffer()\n    strip._indexBuffer = gl.createBuffer()\n    strip._uvBuffer = gl.createBuffer()\n    strip._colorBuffer = gl.createBuffer()\n    gl.bindBuffer gl.ARRAY_BUFFER, strip._vertexBuffer\n    gl.bufferData gl.ARRAY_BUFFER, strip.verticies, gl.DYNAMIC_DRAW\n    gl.bindBuffer gl.ARRAY_BUFFER, strip._uvBuffer\n    gl.bufferData gl.ARRAY_BUFFER, strip.uvs, gl.STATIC_DRAW\n    gl.bindBuffer gl.ARRAY_BUFFER, strip._colorBuffer\n    gl.bufferData gl.ARRAY_BUFFER, strip.colors, gl.STATIC_DRAW\n    gl.bindBuffer gl.ELEMENT_ARRAY_BUFFER, strip._indexBuffer\n    gl.bufferData gl.ELEMENT_ARRAY_BUFFER, strip.indices, gl.STATIC_DRAW\n\n###\nthe GLESRenderer is draws the stage and all its content onto a webGL enabled canvas. This renderer\nshould be used for browsers support webGL. This Render works by automatically managing webGLBatchs.\nSo no need for Sprite Batch's or Sprite Cloud's\nDont forget to add the view to your DOM or you will not see anything :)\n\n@class GLESRenderer\n@constructor\n@param width=0 {Number} the width of the canvas view\n@param height=0 {Number} the height of the canvas view\n@param view {Canvas} the canvas to use as a view, optional\n@param transparent=false {Boolean} the transparency of the render view, default false\n###\nclass GLESRenderer\n  @GLESRenderGroup: GLESRenderGroup\n  @setBatchClass: (BatchClass) ->\n    Batch = BatchClass\n  constructor: (@gl, width, height, transparent, @textureFilter='linear') ->\n    # do a catch.. only 1 webGL renderer..\n    GLESGraphics.gl = @gl\n\n    @transparent = !!transparent\n    @width = width or 800\n    @height = height or 600\n\n    @initShaders()\n\n    gl = GLESRenderer.gl = @gl\n\n    @batch = new Batch(gl)\n    gl.disable gl.DEPTH_TEST\n    gl.disable gl.CULL_FACE\n    gl.enable gl.BLEND\n    gl.colorMask true, true, true, @transparent\n    GLESRenderer.projection = new Point(400, 300)\n    @resize @width, @height\n    @contextLost = false\n    @stageRenderGroup = new GLESRenderGroup @gl, @textureFilter\n  \n  initShaders: ->\n    GLESShaders.initPrimitiveShader @gl\n    GLESShaders.initDefaultShader @gl\n    GLESShaders.initDefaultStripShader @gl\n    GLESShaders.activateDefaultShader @gl\n\n  ###\n  Gets a new Batch from the pool\n\n  @static\n  @method getBatch\n  @return {Batch}\n  @private\n  ###\n  @getBatch: ->\n    if Batch._batchs.length is 0\n      new Batch(GLESRenderer.gl)\n    else\n      Batch._batchs.pop()\n\n  ###\n  Puts a batch back into the pool\n\n  @static\n  @method returnBatch\n  @param batch {Batch} The batch to return\n  @private\n  ###\n  @returnBatch: (batch) ->\n    batch.clean()\n    Batch._batchs.push batch\n\n  ###\n  Renders the stage to its webGL view\n\n  @method render\n  @param stage {Stage} the Stage element to be rendered\n  ###\n  render: (stage) ->\n    return  if @contextLost\n    \n    # if rendering a new stage clear the batchs..\n    if @__stage isnt stage\n      \n      # TODO make this work\n      # dont think this is needed any more?\n      @__stage = stage\n      @stageRenderGroup.setRenderable stage\n    \n    # TODO not needed now... \n    # update children if need be\n    # best to remove first!\n    #for (var i=0; i < stage.__childrenRemoved.length; i++)\n    #\t{\n    #\t\tvar group = stage.__childrenRemoved[i].__renderGroup\n    #\t\tif(group)group.removeDisplayObject(stage.__childrenRemoved[i]);\n    #\t}\n    \n    # update any textures\t\n    @_updateTextures @textureFilter\n    \n    # update the scene graph\t\n    stage.__updateTransform()\n    gl = @gl\n    \n    # -- Does this need to be set every frame? -- //\n    gl.colorMask true, true, true, @transparent\n    gl.viewport @viewportX, @viewportY, @viewportWidth, @viewportHeight\n    \n    # set the correct matrix..\t\n    #\tgl.uniformMatrix4fv(this.defaultShader.mvMatrixUniform, false, this.projectionMatrix);\n    gl.bindFramebuffer gl.FRAMEBUFFER, null\n    gl.clearColor stage.backgroundColorSplit[0], stage.backgroundColorSplit[1], stage.backgroundColorSplit[2], not @transparent\n    gl.clear gl.COLOR_BUFFER_BIT\n    \n    # HACK TO TEST\n    #GLESRenderer.projectionMatrix = this.projectionMatrix;\n    @stageRenderGroup.backgroundColor = stage.backgroundColorSplit\n    @stageRenderGroup.render GLESRenderer.projection\n    \n    # after rendering lets confirm all frames that have been uodated..\n    if Texture.frameUpdates.length > 0\n      i = 0\n\n      while i < Texture.frameUpdates.length\n        Texture.frameUpdates[i]._updateFrame = false\n        i++\n      Texture.frameUpdates = []\n\n  ###\n  Updates the textures loaded into this webgl renderer\n\n  @static\n  @method _updateTextures\n  @private\n  ###\n  @_updateTextures: (defaultFilter) ->\n    i = 0\n\n    while i < BaseTexture.texturesToUpdate.length\n      @updateTexture BaseTexture.texturesToUpdate[i], defaultFilter\n      i++\n    i = 0\n\n    while i < BaseTexture.texturesToDestroy.length\n      @destroyTexture BaseTexture.texturesToDestroy[i]\n      i++\n    BaseTexture.texturesToUpdate = []\n    BaseTexture.texturesToDestroy = []\n\n  ###\n  @static\n  @method _updateAllTextures\n  @private\n  ###\n  @_updateAllTextures: (defaultFilter) ->\n    for tex in BaseTexture.allTextures\n      @updateTexture tex, defaultFilter\n  \n  _updateTextures: -> GLESRenderer._updateTextures arguments...\n  _updateAllTextures: -> GLESRenderer._updateAllTextures arguments...\n  \n  ###\n  @private\n  ###\n  @getGLFilterMode: (filterMode) ->\n    switch filterMode\n      when 'nearest'\n        glFilterMode = @gl.NEAREST\n      when 'linear'\n        glFilterMode = @gl.LINEAR\n      else\n        cg.warn 'Unexpected value for filterMode: ' + filterMode + '. Defaulting to LINEAR'\n        glFilterMode = @gl.LINEAR\n    return glFilterMode\n\n  ###\n  Updates a loaded webgl texture\n\n  @static\n  @method updateTexture\n  @param texture {Texture} The texture to update\n  @private\n  ###\n  @updateTexture: (texture, defaultFilterMode) ->\n    if texture.filterMode?\n      filterMode = texture.filterMode\n    else\n      filterMode = defaultFilterMode\n\n    gl = GLESRenderer.gl\n    texture._glTexture = gl.createTexture()  unless texture._glTexture\n    if texture.hasLoaded\n      gl.bindTexture gl.TEXTURE_2D, texture._glTexture\n      gl.pixelStorei gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true\n      \n      gl.texImage2D gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.source\n      glFilterMode = @getGLFilterMode filterMode\n      gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, glFilterMode\n      gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, glFilterMode\n      \n      # reguler...\n      if not texture._powerOf2\n        gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE\n        gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE\n      else\n        gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT\n        gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT\n      gl.bindTexture gl.TEXTURE_2D, null\n\n  ###\n  Destroys a loaded webgl texture\n\n  @method destroyTexture\n  @param texture {Texture} The texture to update\n  @private\n  ###\n  @destroyTexture: (texture) ->\n    gl = @gl\n    if texture._glTexture\n      texture._glTexture = gl.createTexture()\n      gl.deleteTexture gl.TEXTURE_2D, texture._glTexture\n      idx = BaseTexture.allTextures.indexOf texture\n      return  if idx < 0\n      BaseTexture.allTextures.splice idx, 1\n\n  ###\n  resizes the webGL view to the specified width and height\n\n  @method resize\n  @param width {Number} the new width of the webGL view\n  @param height {Number} the new height of the webGL view\n  ###\n  resize: (width, height, viewportWidth, viewportHeight, viewportX, viewportY) ->\n    @width = width\n    @height = height\n    \n    @viewportX = viewportX ? 0\n    @viewportY = viewportY ? 0\n\n    @viewportWidth = viewportWidth ? @width\n    @viewportHeight = viewportHeight ? @height\n    @gl.viewport @viewportX, @viewportY, @viewportWidth, @viewportHeight\n    \n    GLESRenderer.projection.x = @width / 2\n    GLESRenderer.projection.y = @height / 2\n\nmodule.exports = GLESRenderer",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nGLESShaders = {}\n\n# the default super fast shader!\nGLESShaders.shaderFragmentSrc = [\n  \"#ifdef GL_ES\",\n  \"precision lowp float;\",\n  \"#endif\",\n  \"varying vec2 vTextureCoord;\",\n  \"varying float vColor;\",\n  \"uniform sampler2D uSampler;\",\n  \"void main(void) {\",\n    \"gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\",\n  \"}\"\n]\n\nGLESShaders.shaderVertexSrc = [\n  \"attribute vec2 aVertexPosition;\",\n  \"attribute vec2 aTextureCoord;\",\n  \"attribute float aColor;\",\n\n  \"uniform vec2 projectionVector;\",\n  \"varying vec2 vTextureCoord;\",\n  \n  \"varying float vColor;\",\n\n  \"void main(void) {\",\n    \"gl_Position = vec4( aVertexPosition.x / projectionVector.x -1.0, aVertexPosition.y / -projectionVector.y + 1.0 , 0.0, 1.0);\",\n    \"vTextureCoord = aTextureCoord;\",\n    \"vColor = aColor;\",\n  \"}\"\n]\n\n# the triangle strip shader..\nGLESShaders.stripShaderFragmentSrc = [\n  \"#ifdef GL_ES\",\n  \"precision mediump float;\",\n  \"#endif\",\n  \"varying vec2 vTextureCoord;\",\n  \"varying float vColor;\",\n  \"uniform float alpha;\",\n  \"uniform sampler2D uSampler;\",\n  \"void main(void) {\",\n    \"gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y));\",\n    \"gl_FragColor = gl_FragColor * alpha;\",\n  \"}\"\n]\n\nGLESShaders.stripShaderVertexSrc = [\n  \"attribute vec2 aVertexPosition;\",\n  \"attribute vec2 aTextureCoord;\",\n  \"attribute float aColor;\",\n  \"uniform mat3 translationMatrix;\",\n  \"uniform vec2 projectionVector;\",\n  \"varying vec2 vTextureCoord;\",\n  \"varying float vColor;\",\n  \"void main(void) {\",\n    \"vec3 v = translationMatrix * vec3(aVertexPosition, 1.0);\",\n    \"gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);\",\n    \"vTextureCoord = aTextureCoord;\",\n    \"vColor = aColor;\",\n  \"}\"\n]\n\n# primitive shader..\nGLESShaders.primitiveShaderFragmentSrc = [\n  \"#ifdef GL_ES\",\n  \"precision mediump float;\",\n  \"#endif\",\n  \"varying vec4 vColor;\",\n  \"void main(void) {\",\n    \"gl_FragColor = vColor;\",\n  \"}\"\n]\n\nGLESShaders.primitiveShaderVertexSrc = [\n  \"attribute vec2 aVertexPosition;\",\n  \"attribute vec4 aColor;\",\n  \"uniform mat3 translationMatrix;\",\n  \"uniform vec2 projectionVector;\",\n  \"uniform float alpha;\",\n  \"varying vec4 vColor;\",\n  \"void main(void) {\",\n    \"vec3 v = translationMatrix * vec3(aVertexPosition, 1.0);\",\n    \"gl_Position = vec4( v.x / projectionVector.x -1.0, v.y / -projectionVector.y + 1.0 , 0.0, 1.0);\",\n    \"vColor = aColor  * alpha;\",\n  \"}\"\n]\n\nGLESShaders.initPrimitiveShader = (gl) ->\n  shader = {}\n  shader.program = GLESShaders.compileProgram(gl, GLESShaders.primitiveShaderVertexSrc, GLESShaders.primitiveShaderFragmentSrc)\n  gl.useProgram shader.program\n  shader.vertexPositionAttribute = gl.getAttribLocation(shader.program, \"aVertexPosition\")\n  shader.colorAttribute = gl.getAttribLocation(shader.program, \"aColor\")\n  shader.projectionVector = gl.getUniformLocation(shader.program, \"projectionVector\")\n  shader.translationMatrix = gl.getUniformLocation(shader.program, \"translationMatrix\")\n  shader.alpha = gl.getUniformLocation(shader.program, \"alpha\")\n  GLESShaders.primitiveShader = shader\n\nGLESShaders.initDefaultShader = (gl) ->\n  shader = {}\n  shader.program = GLESShaders.compileProgram(gl, GLESShaders.shaderVertexSrc, GLESShaders.shaderFragmentSrc)\n  gl.useProgram shader.program\n  shader.vertexPositionAttribute = gl.getAttribLocation(shader.program, \"aVertexPosition\")\n  shader.projectionVector = gl.getUniformLocation(shader.program, \"projectionVector\")\n  shader.textureCoordAttribute = gl.getAttribLocation(shader.program, \"aTextureCoord\")\n  shader.colorAttribute = gl.getAttribLocation(shader.program, \"aColor\")\n\n  # shader.mvMatrixUniform = gl.getUniformLocation(shader.program, \"uMVMatrix\");\n  shader.samplerUniform = gl.getUniformLocation(shader.program, \"uSampler\")\n  GLESShaders.defaultShader = shader\n\nGLESShaders.initDefaultStripShader = (gl) ->\n  shader = {}\n  shader.program = GLESShaders.compileProgram(gl, GLESShaders.stripShaderVertexSrc, GLESShaders.stripShaderFragmentSrc)\n  gl.useProgram shader.program\n  shader.vertexPositionAttribute = gl.getAttribLocation(shader.program, \"aVertexPosition\")\n  shader.projectionVector = gl.getUniformLocation(shader.program, \"projectionVector\")\n  shader.textureCoordAttribute = gl.getAttribLocation(shader.program, \"aTextureCoord\")\n  shader.translationMatrix = gl.getUniformLocation(shader.program, \"translationMatrix\")\n  shader.alpha = gl.getUniformLocation(shader.program, \"alpha\")\n  shader.colorAttribute = gl.getAttribLocation(shader.program, \"aColor\")\n  shader.projectionVector = gl.getUniformLocation(shader.program, \"projectionVector\")\n  shader.samplerUniform = gl.getUniformLocation(shader.program, \"uSampler\")\n  GLESShaders.stripShader = shader\n\nGLESShaders.CompileVertexShader = (gl, shaderSrc) ->\n  GLESShaders._CompileShader gl, shaderSrc, gl.VERTEX_SHADER\n\nGLESShaders.CompileFragmentShader = (gl, shaderSrc) ->\n  GLESShaders._CompileShader gl, shaderSrc, gl.FRAGMENT_SHADER\n\nGLESShaders._CompileShader = (gl, shaderSrc, shaderType) ->\n  src = shaderSrc.join(\"\\n\")\n  shader = gl.createShader(shaderType)\n  gl.shaderSource shader, src\n  gl.compileShader shader\n  unless gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n    alert gl.getShaderInfoLog(shader)\n    return null\n  shader\n\nGLESShaders.compileProgram = (gl, vertexSrc, fragmentSrc) ->\n  fragmentShader = GLESShaders.CompileFragmentShader(gl, fragmentSrc)\n  vertexShader = GLESShaders.CompileVertexShader(gl, vertexSrc)\n  program = gl.createProgram()\n  gl.attachShader program, vertexShader\n  gl.attachShader program, fragmentShader\n  gl.linkProgram program\n  alert \"Could not initialise shaders\"  unless gl.getProgramParameter(program, gl.LINK_STATUS)\n  program\n\nGLESShaders.activateDefaultShader = (gl) ->\n  shader = GLESShaders.defaultShader\n  gl.useProgram shader.program\n  gl.enableVertexAttribArray shader.vertexPositionAttribute\n  gl.enableVertexAttribArray shader.textureCoordAttribute\n  gl.enableVertexAttribArray shader.colorAttribute\n\nGLESShaders.activatePrimitiveShader = (gl) ->\n  gl.disableVertexAttribArray GLESShaders.defaultShader.textureCoordAttribute\n  gl.disableVertexAttribArray GLESShaders.defaultShader.colorAttribute\n  gl.useProgram GLESShaders.primitiveShader.program\n  gl.enableVertexAttribArray GLESShaders.primitiveShader.vertexPositionAttribute\n  gl.enableVertexAttribArray GLESShaders.primitiveShader.colorAttribute\n\nmodule.exports = GLESShaders",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\ncg = require 'cg'\nSprite = require 'rendering/Sprite'\nGLESShaders = require 'rendering/renderers/webgl/GLESShaders'\nRenderTypes = require 'rendering/core/RenderTypes'\n\n###\nA WebGLBatch Enables a group of sprites to be drawn using the same settings.\nif a group of sprites all have the same baseTexture and blendMode then they can be grouped into a batch.\nAll the sprites in a batch can then be drawn in one go by the GPU which is hugely efficient. ALL sprites\nin the webGL renderer are added to a batch even if the batch only contains one sprite. Batching is handled\nautomatically by the webGL renderer. A good tip is: the smaller the number of batchs there are, the faster\nthe webGL renderer will run.\n\n@class WebGLBatch\n@constructor\n@param gl {WebGLContext} an instance of the webGL context\n###\nclass WebGLBatch\n  __renderType: RenderTypes.BATCH\n  @_batchs: []\n\n  ###\n  @private\n  ###\n  @_getBatch: (gl) ->\n    if WebGLBatch.length is 0\n      new WebGLBatch(gl)\n    else\n      WebGLBatch.pop()\n\n  ###\n  @private\n  ###\n  @_returnBatch: (batch) ->\n    batch.clean()\n    WebGLBatch.push batch\n\n  ###\n  @private\n  ###\n  @_restoreBatchs: (gl) ->\n    i = 0\n\n    while i < WebGLBatch.length\n      WebGLBatch[i].restoreLostContext gl\n      i++\n    return\n\n  constructor: (gl) ->\n    @gl = gl\n    @size = 0\n    @vertexBuffer = gl.createBuffer()\n    @indexBuffer = gl.createBuffer()\n    @uvBuffer = gl.createBuffer()\n    @colorBuffer = gl.createBuffer()\n    @blendMode = Sprite.blendModes.NORMAL\n    @dynamicSize = 1\n\n  ###\n  Cleans the batch so that is can be returned to an object pool and reused\n\n  @method clean\n  ###\n  clean: ->\n    @verticies = []\n    @uvs = []\n    @indices = []\n    @colors = []\n    \n    #this.sprites = [];\n    @dynamicSize = 1\n    @texture = null\n    @last = null\n    @size = 0\n    @head\n    @tail\n\n  ###\n  Recreates the buffers in the event of a context loss\n\n  @method restoreLostContext\n  @param gl {WebGLContext}\n  ###\n  restoreLostContext: (gl) ->\n    @gl = gl\n    @vertexBuffer = gl.createBuffer()\n    @indexBuffer = gl.createBuffer()\n    @uvBuffer = gl.createBuffer()\n    @colorBuffer = gl.createBuffer()\n\n  ###\n  inits the batch's texture and blend mode based if the supplied sprite\n\n  @method init\n  @param sprite {Sprite} the first sprite to be added to the batch. Only sprites with\n  the same base texture and blend mode will be allowed to be added to this batch\n  ###\n  init: (sprite) ->\n    sprite.batch = this\n    @dirty = true\n    @blendMode = sprite.blendMode\n    @texture = sprite.texture?.baseTexture\n    \n    #\tthis.sprites.push(sprite);\n    @head = sprite\n    @tail = sprite\n    @size = 1\n    @growBatch()\n\n  ###\n  inserts a sprite before the specified sprite\n\n  @method insertBefore\n  @param sprite {Sprite} the sprite to be added\n  @param nextSprite {nextSprite} the first sprite will be inserted before this sprite\n  ###\n  insertBefore: (sprite, nextSprite) ->\n    @size++\n    sprite.batch = this\n    @dirty = true\n    tempPrev = nextSprite.__prev\n    nextSprite.__prev = sprite\n    sprite.__next = nextSprite\n    if tempPrev\n      sprite.__prev = tempPrev\n      tempPrev.__next = sprite\n    else\n      @head = sprite\n\n  #this.head.__prev = null\n\n  ###\n  inserts a sprite after the specified sprite\n\n  @method insertAfter\n  @param sprite {Sprite} the sprite to be added\n  @param  previousSprite {Sprite} the first sprite will be inserted after this sprite\n  ###\n  insertAfter: (sprite, previousSprite) ->\n    @size++\n    sprite.batch = this\n    @dirty = true\n    tempNext = previousSprite.__next\n    previousSprite.__next = sprite\n    sprite.__prev = previousSprite\n    if tempNext\n      sprite.__next = tempNext\n      tempNext.__prev = sprite\n    else\n      @tail = sprite\n\n  ###\n  removes a sprite from the batch\n\n  @method remove\n  @param sprite {Sprite} the sprite to be removed\n  ###\n  remove: (sprite) ->\n    @size--\n    if @size is 0\n      sprite.batch = null\n      sprite.__prev = null\n      sprite.__next = null\n      return\n    if sprite.__prev\n      sprite.__prev.__next = sprite.__next\n    else\n      @head = sprite.__next\n      @head.__prev = null\n    if sprite.__next\n      sprite.__next.__prev = sprite.__prev\n    else\n      @tail = sprite.__prev\n      @tail.__next = null\n    sprite.batch = null\n    sprite.__next = null\n    sprite.__prev = null\n    @dirty = true\n\n  ###\n  Splits the batch into two with the specified sprite being the start of the new batch.\n\n  @method split\n  @param sprite {Sprite} the sprite that indicates where the batch should be split\n  @return {WebGLBatch} the new batch\n  ###\n  split: (sprite) ->\n    @dirty = true\n    batch = new WebGLBatch(@gl) #WebGLBatch._getBatch(this.gl);\n    batch.init sprite\n    batch.texture = @texture\n    batch.tail = @tail\n    @tail = sprite.__prev\n    @tail.__next = null\n    sprite.__prev = null\n    \n    # return a splite batch!\n    #sprite.__prev.__next = null;\n    #sprite.__prev = null;\n    \n    # TODO this size is wrong!\n    # need to recalculate :/ problem with a linked list!\n    # unless it gets calculated in the \"clean\"?\n    \n    # need to loop through items as there is no way to know the length on a linked list :/\n    tempSize = 0\n    while sprite\n      tempSize++\n      sprite.batch = batch\n      sprite = sprite.__next\n    batch.size = tempSize\n    @size -= tempSize\n    batch\n\n  ###\n  Merges two batchs together\n\n  @method merge\n  @param batch {WebGLBatch} the batch that will be merged\n  ###\n  merge: (batch) ->\n    @dirty = true\n    @tail.__next = batch.head\n    batch.head.__prev = @tail\n    @size += batch.size\n    @tail = batch.tail\n    sprite = batch.head\n    while sprite\n      sprite.batch = this\n      sprite = sprite.__next\n    return\n\n  ###\n  Grows the size of the batch. As the elements in the batch cannot have a dynamic size this\n  function is used to increase the size of the batch. It also creates a little extra room so\n  that the batch does not need to be resized every time a sprite is added\n\n  @method growBatch\n  ###\n  growBatch: ->\n    gl = @gl\n    if @size is 1\n      @dynamicSize = 1\n    else\n      @dynamicSize = @size * 1.5\n    \n    # grow verts\n    @verticies = new cg.util.Float32Array(@dynamicSize * 8)\n    gl.bindBuffer gl.ARRAY_BUFFER, @vertexBuffer\n    gl.bufferData gl.ARRAY_BUFFER, @verticies, gl.DYNAMIC_DRAW\n    @uvs = new cg.util.Float32Array(@dynamicSize * 8)\n    gl.bindBuffer gl.ARRAY_BUFFER, @uvBuffer\n    gl.bufferData gl.ARRAY_BUFFER, @uvs, gl.DYNAMIC_DRAW\n    @__dirtyUVs = true\n    @colors = new cg.util.Float32Array(@dynamicSize * 4)\n    gl.bindBuffer gl.ARRAY_BUFFER, @colorBuffer\n    gl.bufferData gl.ARRAY_BUFFER, @colors, gl.DYNAMIC_DRAW\n    @__dirtyColors = true\n    @indices = new cg.util.Uint16Array(@dynamicSize * 6)\n    length = @indices.length / 6\n    i = 0\n\n    while i < length\n      index2 = i * 6\n      index3 = i * 4\n      @indices[index2 + 0] = index3 + 0\n      @indices[index2 + 1] = index3 + 1\n      @indices[index2 + 2] = index3 + 2\n      @indices[index2 + 3] = index3 + 0\n      @indices[index2 + 4] = index3 + 2\n      @indices[index2 + 5] = index3 + 3\n      i++\n    gl.bindBuffer gl.ELEMENT_ARRAY_BUFFER, @indexBuffer\n    gl.bufferData gl.ELEMENT_ARRAY_BUFFER, @indices, gl.STATIC_DRAW\n\n  ###\n  Refresh's all the data in the batch and sync's it with the webGL buffers\n\n  @method refresh\n  ###\n  refresh: ->\n    gl = @gl\n    @growBatch()  if @dynamicSize < @size\n    indexRun = 0\n    worldTransform = undefined\n    width = undefined\n    height = undefined\n    aX = undefined\n    aY = undefined\n    w0 = undefined\n    w1 = undefined\n    h0 = undefined\n    h1 = undefined\n    index = undefined\n    a = undefined\n    b = undefined\n    c = undefined\n    d = undefined\n    tx = undefined\n    ty = undefined\n    displayObject = @head\n    while displayObject\n      index = indexRun * 8\n      texture = displayObject.texture\n      frame = texture.frame\n      tw = texture.baseTexture.width\n      th = texture.baseTexture.height\n      fx = frame.x\n      fy = frame.y\n      @uvs[index + 0] = fx / tw\n      @uvs[index + 1] = fy / th\n      @uvs[index + 2] = (fx + frame.width) / tw\n      @uvs[index + 3] = fy / th\n      @uvs[index + 4] = (fx + frame.width) / tw\n      @uvs[index + 5] = (fy + frame.height) / th\n      @uvs[index + 6] = fx / tw\n      @uvs[index + 7] = (fy + frame.height) / th\n      displayObject._updateFrame = false\n      colorIndex = indexRun * 4\n      @colors[colorIndex] = @colors[colorIndex + 1] = @colors[colorIndex + 2] = @colors[colorIndex + 3] = displayObject.worldAlpha\n      displayObject = displayObject.__next\n      indexRun++\n    @__dirtyUVs = true\n    @__dirtyColors = true\n\n  ###\n  Updates all the relevant geometry and uploads the data to the GPU\n\n  @method update\n  ###\n  update: ->\n    gl = @gl\n    worldTransform = undefined\n    width = undefined\n    height = undefined\n    aX = undefined\n    aY = undefined\n    w0 = undefined\n    w1 = undefined\n    h0 = undefined\n    h1 = undefined\n    index = undefined\n    index2 = undefined\n    index3 = undefined\n    a = undefined\n    b = undefined\n    c = undefined\n    d = undefined\n    tx = undefined\n    ty = undefined\n    indexRun = 0\n    displayObject = @head\n    while displayObject\n      if displayObject.worldVisible\n        width = displayObject.texture?.frame.width ? displayObject.width\n        height = displayObject.texture?.frame.height ? displayObject.height\n        \n        # TODO trim??\n        aX = displayObject.anchorX # - displayObject.texture.trim.x\n        aY = displayObject.anchorY #- displayObject.texture.trim.y\n        w0 = width * (1 - aX)\n        w1 = width * -aX\n        h0 = height * (1 - aY)\n        h1 = height * -aY\n        index = indexRun * 8\n        worldTransform = displayObject.worldTransform\n        a = worldTransform[0]\n        b = worldTransform[3]\n        c = worldTransform[1]\n        d = worldTransform[4]\n        tx = worldTransform[2]\n        ty = worldTransform[5]\n        @verticies[index + 0] = a * w1 + c * h1 + tx\n        @verticies[index + 1] = d * h1 + b * w1 + ty\n        @verticies[index + 2] = a * w0 + c * h1 + tx\n        @verticies[index + 3] = d * h1 + b * w0 + ty\n        @verticies[index + 4] = a * w0 + c * h0 + tx\n        @verticies[index + 5] = d * h0 + b * w0 + ty\n        @verticies[index + 6] = a * w1 + c * h0 + tx\n        @verticies[index + 7] = d * h0 + b * w1 + ty\n        if displayObject._updateFrame or displayObject.texture?._updateFrame\n          @__dirtyUVs = true\n          texture = displayObject.texture\n          frame = texture.frame\n          tw = texture.baseTexture.width\n          th = texture.baseTexture.height\n          @uvs[index + 0] = frame.x / tw\n          @uvs[index + 1] = frame.y / th\n          @uvs[index + 2] = (frame.x + frame.width) / tw\n          @uvs[index + 3] = frame.y / th\n          @uvs[index + 4] = (frame.x + frame.width) / tw\n          @uvs[index + 5] = (frame.y + frame.height) / th\n          @uvs[index + 6] = frame.x / tw\n          @uvs[index + 7] = (frame.y + frame.height) / th\n          displayObject._updateFrame = false\n        \n        # TODO this probably could do with some optimisation....\n        unless displayObject.cacheAlpha is displayObject.worldAlpha\n          displayObject.cacheAlpha = displayObject.worldAlpha\n          colorIndex = indexRun * 4\n          @colors[colorIndex] = @colors[colorIndex + 1] = @colors[colorIndex + 2] = @colors[colorIndex + 3] = displayObject.worldAlpha\n          @__dirtyColors = true\n      else\n        index = indexRun * 8\n        @verticies[index + 0] = 0\n        @verticies[index + 1] = 0\n        @verticies[index + 2] = 0\n        @verticies[index + 3] = 0\n        @verticies[index + 4] = 0\n        @verticies[index + 5] = 0\n        @verticies[index + 6] = 0\n        @verticies[index + 7] = 0\n      indexRun++\n      displayObject = displayObject.__next\n    return\n\n  ###\n  Draws the batch to the frame buffer\n\n  @method render\n  ###\n  render: (start, end) ->\n    start = start or 0\n    \n    #end = end || this.size;\n    end = @size  if end is `undefined`\n    if @dirty\n      @refresh()\n      @dirty = false\n    return  if @size is 0\n    @update()\n    gl = @gl\n    \n    #TODO optimize this!\n    defaultShader = GLESShaders.defaultShader\n    gl.useProgram defaultShader.program\n    \n    # update the verts..\n    gl.bindBuffer gl.ARRAY_BUFFER, @vertexBuffer\n\n    # ok..\n    gl.bufferSubData gl.ARRAY_BUFFER, 0, @verticies\n    gl.vertexAttribPointer defaultShader.vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0\n    \n    # update the uvs\n    gl.bindBuffer gl.ARRAY_BUFFER, @uvBuffer\n    if @__dirtyUVs\n      @__dirtyUVs = false\n      gl.bufferSubData gl.ARRAY_BUFFER, 0, @uvs\n    gl.vertexAttribPointer defaultShader.textureCoordAttribute, 2, gl.FLOAT, false, 0, 0\n    gl.activeTexture gl.TEXTURE0\n    gl.bindTexture gl.TEXTURE_2D, @texture._glTexture\n    \n    # update color!\n    gl.bindBuffer gl.ARRAY_BUFFER, @colorBuffer\n    if @__dirtyColors\n      @__dirtyColors = false\n      gl.bufferSubData gl.ARRAY_BUFFER, 0, @colors\n    gl.vertexAttribPointer defaultShader.colorAttribute, 1, gl.FLOAT, false, 0, 0\n    \n    # dont need to upload!\n    gl.bindBuffer gl.ELEMENT_ARRAY_BUFFER, @indexBuffer\n    \n    #var startIndex = 0//1;\n    len = end - start\n    \n    # console.log(this.size)\n    # DRAW THAT this!\n    gl.drawElements gl.TRIANGLES, len * 6, gl.UNSIGNED_SHORT, start * 2 * 6\n\nmodule.exports = WebGLBatch",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\nGLESRenderer = require 'rendering/renderers/webgl/GLESRenderer'\nWebGLBatch = require 'rendering/renderers/webgl/WebGLBatch'\n\n# LOU TODO: Update docs for this\n\n###\nthe WebGLRenderer is draws the stage and all its content onto a webGL enabled canvas. This renderer should be used for browsers support webGL. This Render works by automatically managing webGLBatchs. So no need for Sprite Batch's or Sprite Cloud's\nDont forget to add the view to your DOM or you will not see anything :)\n@class WebGLRenderer\n@constructor\n@param width {Number} the width of the canvas view\n@default 0\n@param height {Number} the height of the canvas view\n@default 0\n@param view {Canvas} the canvas to use as a view, optional\n@param transparent {Boolean} the transparency of the render view, default false\n@default false\n###\nclass WebGLRenderer extends GLESRenderer\n  constructor: (width, height, view, @transparent, textureFilter='linear') ->\n    @view = view or document.createElement 'canvas'\n    @view.width = @width\n    @view.height = @height\n    \n    # deal with losing context..  \n    scope = this\n    @view.addEventListener 'webglcontextlost', ((event) ->\n      scope.handleContextLost event\n    ), false\n    @view.addEventListener 'webglcontextrestored', ((event) ->\n      scope.handleContextRestored event\n    ), false\n\n    @batchs = []\n\n    options =\n      alpha: @transparent\n      antialias: false\n      premultipliedAlpha: true\n      stencil: true\n    \n    for contextName in ['experimental-webgl', 'webgl']\n      try\n        webGL = @view.getContext contextName, options\n        break\n      catch e\n        console.log 'WebGLRenderer: '\n        console.log e\n        webGL = null\n\n    if not webGL?\n      throw new Error('This browser does not support WebGL. Try using the canvas renderer ' + this)\n\n    GLESRenderer.setBatchClass WebGLBatch\n\n    super webGL, width, height, transparent, textureFilter\n  ###\n  @private\n  ###\n  handleContextLost: (event) ->\n    event.preventDefault()\n    @contextLost = true\n\n  ###\n  @private\n  ###\n  handleContextRestored: (event) ->\n    @gl = @view.getContext('experimental-webgl',\n      alpha: true\n    )\n    @initShaders()\n    i = 0\n\n    while i < Texture.cache.length\n      @updateTexture Texture.cache[i], @textureFilter\n      i++\n    i = 0\n\n    while i < @batchs.length\n      @batchs[i].restoreLostContext @gl #\n      @batchs[i].dirty = true\n      i++\n    Batch._restoreBatchs @gl\n    @contextLost = false\n  resize: (width, height) ->\n    @view.width = width\n    @view.height = height\n    @view.style.width = width + 'px'\n    @view.style.height = height + 'px'\n    super\n      \n  getView: -> @view\n  getContainerWidth: -> @view.width\n  getContainerHeight: -> @view.height\n\nmodule.exports = WebGLRenderer",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\n\n###*\nA texture stores the information that represents an image. All textures have a base texture\n\n@class cg.BaseTexture\n@extends cg.Module\n@uses cg.util.HasSignals\n@constructor\n@param source {String} the source object (image or canvas)\n###\nclass BaseTexture extends Module\n  @mixin HasSignals\n  @cache: {}\n  @allTextures: []\n  @texturesToUpdate: []\n  @texturesToDestroy: []\n  \n  constructor: (source) ->\n    super\n    \n    ###*\n    The width of the base texture set when the image has loaded\n    \n    @property width\n    @type Number\n    @final\n    ###\n    @width = 100\n    \n    ###*\n    The height of the base texture set when the image has loaded\n    \n    @property height\n    @type Number\n    @final\n    ###\n    @height = 100\n    \n    ###*\n    Describes if the base texture has loaded or not\n    \n    @property hasLoaded\n    @type Boolean\n    @final\n    ###\n    @hasLoaded = false\n    \n    ###*\n    The source that is loaded to create the texture\n    \n    @property source\n    @type Image\n    ###\n    @source = source\n    \n    return  unless source\n\n    if not ((@source instanceof Image) or (@source instanceof HTMLImageElement))\n      @hasLoaded = true\n      @width = @source.width\n      @height = @source.height\n\n      @createCanvas @source\n    else\n      if @source.complete\n        @hasLoaded = true\n        @width = @source.width\n        @height = @source.height\n        @createCanvas @source\n        @emit 'loaded', @\n      else\n        @source.onerror = =>\n          @emit 'error', @\n\n        @source.onload = =>\n          @hasLoaded = true\n          @width = @source.width\n          @height = @source.height\n          \n          # add it to somewhere...\n          @createCanvas @source\n          @emit 'loaded', @\n\n    @_powerOf2 = false\n\n    @filterMode = undefined # Use renderer's default filter mode.\n\n    BaseTexture.allTextures.push @\n\n  Object.defineProperty @::, 'filterMode',\n    get: -> @__filterMode ? cg.textureFilter\n    set: (val) ->\n      @__filterMode = val\n      BaseTexture.texturesToUpdate.push @\n\n  beginRead: ->\n    @_imageData ?= @_ctx.getImageData(0,0, @_ctx.canvas.width,@_ctx.canvas.height)\n\n  getPixel: (x, y) ->\n    idx = (x + y * @_imageData.width) * 4\n\n    return {\n      r: @_imageData.data[idx + 0]\n      g: @_imageData.data[idx + 1]\n      b: @_imageData.data[idx + 2]\n      a: @_imageData.data[idx + 3]\n    }\n\n  setPixel: (x, y, rgba) ->\n    idx = (x + y * @_imageData.width) * 4\n    @_imageData.data[idx + 0] = rgba.r\n    @_imageData.data[idx + 1] = rgba.g\n    @_imageData.data[idx + 2] = rgba.b\n    @_imageData.data[idx + 3] = rgba.a\n  \n  endRead: ->\n    @_ctx.putImageData @_imageData, 0,0\n    BaseTexture.texturesToUpdate.push @\n  \n  # Converts a loaded image to a canvas element and \n  #  sets it as our source for easy pixel access.\n  createCanvas: (loadedImage) ->\n    if typeof loadedImage.getContext isnt 'function'\n      @source = document.createElement 'canvas'\n      @source.width = loadedImage.width\n      @source.height = loadedImage.height\n    @_ctx = @source.getContext '2d'\n    @_ctx.drawImage loadedImage, 0,0\n\n    @beginRead()\n    @endRead()\n\n  ###*\n  Destroys this base texture\n\n  @method destroy\n  ###\n  destroy: ->\n    @source.src = null  if @source instanceof Image\n    @source = null\n    BaseTexture.texturesToDestroy.push this\n\n  ###*\n  Helper function that returns a base texture based on an image url\n  If the image is not in the base texture cache it will be  created and loaded\n\n  @static\n  @method fromImage\n  @param imageUrl {String} The image url of the texture\n  @return BaseTexture\n  ###\n  @fromImage: (imageUrl, crossorigin) ->\n    baseTexture = BaseTexture.cache[imageUrl]\n    unless baseTexture\n      \n      # new Image() breaks tex loading in some versions of Chrome.\n      # See https://code.google.com/p/chromium/issues/detail?id=238071\n      image = new Image() #document.createElement('img');\n      image.crossOrigin = \"\"  if crossorigin\n      image.src = imageUrl\n      baseTexture = new BaseTexture(image)\n      BaseTexture.cache[imageUrl] = baseTexture\n    baseTexture\n\nmodule.exports = BaseTexture\n",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nRectangle = require 'rendering/core/Rectangle'\nPoint = require 'rendering/core/Point'\nMatrix = require 'rendering/core/Matrix'\nCanvasRenderer = require 'rendering/renderers/canvas/CanvasRenderer'\nGLESRenderer = require 'rendering/renderers/webgl/GLESRenderer'\nBaseTexture = require 'rendering/textures/BaseTexture'\nTexture = require 'rendering/textures/Texture'\n\nGLESRenderGroup = GLESRenderer.GLESRenderGroup\n\n###*\nA RenderTexture is a special texture that allows any pixi displayObject to be rendered to it.\n\n__Hint__: All DisplayObjects (exmpl. Sprites) that renders on RenderTexture should be preloaded.\nOtherwise black rectangles will be drawn instead.\n\nRenderTexture takes snapshot of DisplayObject passed to render method. If DisplayObject is passed to render method, position and rotation of it will be ignored. For example:\n\nvar renderTexture = new RenderTexture(800, 600);\nvar sprite = Sprite.fromImage(\"spinObj_01.png\");\nsprite.x = 800/2;\nsprite.y = 600/2;\nsprite.anchorX = 0.5;\nsprite.anchorY = 0.5;\nrenderTexture.render(sprite);\n\nSprite in this case will be rendered to 0,0 position. To render this sprite at center DisplayObjectContainer should be used:\n\nvar doc = new DisplayObjectContainer();\ndoc.addChild(sprite);\nrenderTexture.render(doc);  // Renders to center of renderTexture\n\n@class cg.RenderTexture\n@extends cg.Texture\n@constructor\n@param width {Number} The width of the render texture\n@param height {Number} The height of the render texture\n###\nclass RenderTexture extends BaseTexture\n  constructor: (width, height, @textureFilter='linear', @filterMode='linear') ->\n    @width = width or 100\n    @height = height or 100\n    @identityMatrix = Matrix.mat3.create()\n    @frame = new Rectangle(0, 0, @width, @height)\n    if GLESRenderer.gl\n      @initGLES()\n    else\n      @initCanvas()\n\n  ###*\n  Initializes the webgl data for this texture\n\n  @method initGLES\n  @private\n  ###\n  initGLES: ->\n    gl = GLESRenderer.gl\n    @glFramebuffer = gl.createFramebuffer()\n    gl.bindFramebuffer gl.FRAMEBUFFER, @glFramebuffer\n    # LOU TODO: Do we need this?\n    # @glFramebuffer.width = @width\n    # @glFramebuffer.height = @height\n    @baseTexture = new BaseTexture()\n    @baseTexture.width = @width\n    @baseTexture.height = @height\n    @baseTexture._glTexture = gl.createTexture()\n    gl.bindTexture gl.TEXTURE_2D, @baseTexture._glTexture\n    gl.texImage2D gl.TEXTURE_2D, 0, gl.RGBA, @width, @height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null\n    glFilterMode = GLESRenderer.getGLFilterMode @filterMode\n    gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, glFilterMode\n    gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, glFilterMode\n    gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE\n    gl.texParameteri gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE\n    @baseTexture.isRender = true\n    # gl.bindTexture gl.TEXTURE_2D, null\n    # gl.bindFramebuffer gl.FRAMEBUFFER, @glFramebuffer\n    gl.framebufferTexture2D gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, @baseTexture._glTexture, 0\n    \n    # create a projection matrix..\n    @projection = new Point(@width / 2, @height / 2)\n    @projectionMatrix = Matrix.mat4.create()\n    @projectionMatrix[5] = 2 / @height # * 0.5;\n    @projectionMatrix[13] = -1\n    @projectionMatrix[0] = 2 / @width\n    @projectionMatrix[12] = -1\n    \n    # set the correct render function..\n    @render = @renderGLES\n\n  resize: (width, height) ->\n    @width = width\n    @height = height\n    @projection = new Point(@width / 2, @height / 2)\n    if GLESRenderer.gl\n      gl = GLESRenderer.gl\n      gl.bindTexture gl.TEXTURE_2D, @baseTexture._glTexture\n      gl.texImage2D gl.TEXTURE_2D, 0, gl.RGBA, @width, @height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null\n    else\n      @frame.width = @width\n      @frame.height = @height\n      @renderer.resize @width, @height\n\n\n  ###*\n  Initializes the canvas data for this texture\n\n  @method initCanvas\n  @private\n  ###\n  initCanvas: ->\n    @renderer = new CanvasRenderer @width, @height, null, false, @textureFilter\n    @baseTexture = new BaseTexture @renderer.view\n    @frame = new Rectangle(0, 0, @width, @height)\n    @render = @renderCanvas\n\n\n  ###*\n  This function will draw the display object to the texture.\n\n  @method renderGLES\n  @param displayObject {DisplayObject} The display object to render this texture on\n  @param clear {Boolean} If true the texture will be cleared before the displayObject is drawn\n  @private\n  ###\n  renderGLES: (displayObject, position, clear) ->\n    gl = GLESRenderer.gl\n    \n    # enable the alpha color mask..\n    gl.colorMask true, true, true, true\n    gl.viewport 0, 0, @width, @height\n    gl.bindFramebuffer gl.FRAMEBUFFER, @glFramebuffer\n    if clear\n      gl.clearColor 0, 0, 0, 0\n      gl.clear gl.COLOR_BUFFER_BIT\n    \n    # THIS WILL MESS WITH HIT TESTING!\n    children = displayObject.children\n    \n    #TODO -? create a new one??? dont think so!\n    displayObject.worldTransform = Matrix.mat3.create() #sthis.identityMatrix;\n    # modify to flip...\n    # LOU TODO: Don't think we really need this.      \n    # displayObject.worldTransform[4] = -1\n    # displayObject.worldTransform[5] = @projection.y * 2\n    # if position\n    #   displayObject.worldTransform[2] = position.x\n    #   displayObject.worldTransform[5] -= position.y\n    i = 0\n    j = children.length\n    while i < j\n      children[i].__updateTransform()\n      i++\n    renderGroup = displayObject.__renderGroup\n    if renderGroup\n      if displayObject is renderGroup.root\n        renderGroup.render @projection\n      else\n        renderGroup.renderSpecific displayObject, @projection\n    else\n      @renderGroup = new GLESRenderGroup(gl, @textureFilter)  unless @renderGroup\n      @renderGroup.setRenderable displayObject\n      @renderGroup.render @projection\n\n\n  ###*\n  This function will draw the display object to the texture.\n\n  @method renderCanvas\n  @param displayObject {DisplayObject} The display object to render this texture on\n  @param clear {Boolean} If true the texture will be cleared before the displayObject is drawn\n  @private\n  ###\n  renderCanvas: (displayObject, position, clear) ->\n    children = displayObject.children\n    displayObject.worldTransform = Matrix.mat3.create()\n    if position\n      displayObject.worldTransform[2] = position.x\n      displayObject.worldTransform[5] = position.y\n\n    i = 0\n    j = children.length\n    while i < j\n      children[i].__updateTransform()\n      i++\n    \n    imageSmoothingEnabled = @textureFilter is 'nearest'\n    @renderer.context.imageSmoothingEnabled = imageSmoothingEnabled\n    @renderer.context.webkitImageSmoothingEnabled = imageSmoothingEnabled\n    @renderer.context.mozImageSmoothingEnabled = imageSmoothingEnabled\n\n    @renderer.context.clearRect 0, 0, @width, @height  if clear\n    @renderer.renderDisplayObject displayObject\n    @renderer.context.setTransform 1, 0, 0, 1, 0, 0\n\nmodule.exports = RenderTexture",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\nBaseTexture = require 'rendering/textures/BaseTexture'\nRectangle = require 'rendering/core/Rectangle'\nPoint = require 'rendering/core/Point'\n\n###*\nA texture stores the information that represents an image or part of an image. It cannot be added\nto the display list directly. To do this use Sprite. If no frame is provided then the whole image is used\n\n@class cg.Texture\n@extends cg.Module\n@uses cg.util.HasSignals\n@constructor\n@param baseTexture {BaseTexture} The base texture source to create the texture from\n@param frmae {Rectangle} The rectangle frame of the texture to show\n###\nclass Texture extends Module\n  @mixin HasSignals\n  \n  @cache: {}\n  @frameUpdates: []\n\n  Object.defineProperty @::, 'filterMode',\n    get: -> @baseTexture.filterMode\n    set: (val) ->\n      @baseTexture.filterMode = val\n  constructor: (baseTexture, frame) ->\n    super\n\n    if not frame\n      @noFrame = true\n      frame = new Rectangle(0, 0, 1, 1)\n\n    if baseTexture instanceof Texture\n      baseTexture = baseTexture.baseTexture\n    \n    ###*\n    The base texture of this texture\n    \n    @property baseTexture\n    @type BaseTexture\n    ###\n    @baseTexture = baseTexture\n    \n    ###*\n    The frame specifies the region of the base texture that this texture uses\n    \n    @property frame\n    @type Rectangle\n    ###\n    @frame = frame\n    \n    ###*\n    The trim point\n    \n    @property trim\n    @type Point\n    ###\n    @trim = new Point()\n    if baseTexture.hasLoaded\n      frame = new Rectangle(0, 0, baseTexture.width, baseTexture.height)  if @noFrame\n      \n      #console.log(frame)\n      @setFrame frame\n    else\n      baseTexture.on 'loaded', => @onBaseTextureLoaded()\n\n  ###*\n  Called when the base texture is loaded\n\n  @method onBaseTextureLoaded\n  @param event\n  @private\n  ###\n  onBaseTextureLoaded: (event) ->\n    baseTexture = @baseTexture\n    # baseTexture.off 'loaded', @onLoaded\n    @frame = new Rectangle(0, 0, baseTexture.width, baseTexture.height)  if @noFrame\n    @noFrame = false\n    @width = @frame.width\n    @height = @frame.height\n    @emit 'update', @\n\n  ###*\n  Destroys this texture\n\n  @method destroy\n  @param destroyBase {Boolean} Whether to destroy the base texture as well\n  ###\n  destroy: (destroyBase) ->\n    @baseTexture.destroy()  if destroyBase\n\n  ###*\n  Specifies the rectangle region of the baseTexture\n\n  @method setFrame\n  @param frame {Rectangle} The frame of the texture to set it to\n  ###\n  setFrame: (frame) ->\n    @frame = frame\n    @width = frame.width\n    @height = frame.height\n    if frame.x + frame.width > @baseTexture.width or frame.y + frame.height > @baseTexture.height\n      throw new Error('Texture Error: frame does not fit inside the base Texture dimensions ' + this)\n    @_updateFrame = true\n    Texture.frameUpdates.push this\n\n  getPixel: (x, y) -> @baseTexture.getPixel @frame.x + x, @frame.y + y\n  setPixel: (x, y, rgba) -> @baseTexture.setPixel @frame.x + x, @frame.y + y, rgba\n  beginRead: -> @baseTexture.beginRead()\n  endRead: -> @baseTexture.endRead()\n  \n  ###*\n  Helper function that returns a texture based on an image url\n  If the image is not in the texture cache it will be  created and loaded\n\n  @static\n  @method fromImage\n  @param imageUrl {String} The image url of the texture\n  @param crossorigin {Boolean} Whether requests should be treated as crossorigin\n  @return Texture\n  ###\n  @fromImage: (imageUrl, crossorigin) ->\n    texture = Texture.cache[imageUrl]\n    unless texture\n      texture = new Texture(BaseTexture.fromImage(imageUrl, crossorigin))\n      Texture.cache[imageUrl] = texture\n    texture\n\n  ###*\n  Helper function that returns a texture based on a frame id\n  If the frame id is not in the texture cache an error will be thrown\n\n  @static\n  @method fromFrame\n  @param frameId {String} The frame id of the texture\n  @return Texture\n  ###\n  @fromFrame: (frameId) ->\n    texture = Texture.cache[frameId]\n    throw new Error(\"The frameId '\" + frameId + \"' does not exist in the texture cache \" + this)  unless texture\n    texture\n\n  ###*\n  Helper function that returns a texture based on a canvas element\n  If the canvas is not in the texture cache it will be  created and loaded\n\n  @static\n  @method fromCanvas\n  @param canvas {Canvas} The canvas element source of the texture\n  @return Texture\n  ###\n  @fromCanvas: (canvas) ->\n    baseTexture = new BaseTexture(canvas)\n    new Texture(baseTexture)\n\n  ###*\n  Adds a texture to the textureCache.\n\n  @static\n  @method addTextureToCache\n  @param texture {Texture}\n  @param id {String} the id that the texture will be stored against.\n  ###\n  @addTextureToCache: (texture, id) ->\n    Texture.cache[id] = texture\n\n  ###*\n  Remove a texture from the textureCache.\n\n  @static\n  @method removeTextureFromCache\n  @param id {String} the id of the texture to be removed\n  @return {cg.Texture} the texture that was removed\n  ###\n  @removeTextureFromCache: (id) ->\n    texture = Texture.cache[id]\n    Texture.cache[id] = null\n    texture\n\nmodule.exports = Texture",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n#\n#\tPolyK library\n#\turl: http://polyk.ivank.net\n#\tReleased under MIT licence.\n#\t\n#\tCopyright (c) 2012 Ivan Kuckir\n#\n#\tPermission is hereby granted, free of charge, to any person\n#\tobtaining a copy of this software and associated documentation\n#\tfiles (the \"Software\"), to deal in the Software without\n#\trestriction, including without limitation the rights to use,\n#\tcopy, modify, merge, publish, distribute, sublicense, and/or sell\n#\tcopies of the Software, and to permit persons to whom the\n#\tSoftware is furnished to do so, subject to the following\n#\tconditions:\n#\n#\tThe above copyright notice and this permission notice shall be\n#\tincluded in all copies or substantial portions of the Software.\n#\n#\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n#\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n#\tOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n#\tNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n#\tHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n#\tWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n#\tFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n#\tOTHER DEALINGS IN THE SOFTWARE.\n#\n#\tThis is an amazing lib! \n#\t\n#\tslightly modified by mat groves (matgroves.com);\n#\n\nPolyK = {}\n\n###\nTriangulates shapes for webGL graphic fills\n\n@method Triangulate\n@namespace PolyK\n@constructor\n###\nPolyK.Triangulate = (p) ->\n  sign = true\n  n = p.length >> 1\n  return []  if n < 3\n  tgs = []\n  avl = []\n  i = 0\n\n  while i < n\n    avl.push i\n    i++\n  i = 0\n  al = n\n  while al > 3\n    i0 = avl[(i + 0) % al]\n    i1 = avl[(i + 1) % al]\n    i2 = avl[(i + 2) % al]\n    ax = p[2 * i0]\n    ay = p[2 * i0 + 1]\n    bx = p[2 * i1]\n    _by = p[2 * i1 + 1]\n    cx = p[2 * i2]\n    cy = p[2 * i2 + 1]\n    earFound = false\n    if PolyK._convex(ax, ay, bx, _by, cx, cy, sign)\n      earFound = true\n      j = 0\n\n      while j < al\n        vi = avl[j]\n        j++\n        continue  if vi is i0 or vi is i1 or vi is i2\n        if PolyK._PointInTriangle(p[2 * vi], p[2 * vi + 1], ax, ay, bx, _by, cx, cy)\n          earFound = false\n          break\n    if earFound\n      tgs.push i0, i1, i2\n      avl.splice (i + 1) % al, 1\n      al--\n      i = 0\n    else if i++ > 3 * al\n      \n      # need to flip flip reverse it!\n      # reset!\n      if sign\n        tgs = []\n        avl = []\n        i = 0\n\n        while i < n\n          avl.push i\n          i++\n        i = 0\n        al = n\n        sign = false\n      else\n        console.warn \"Warning: shape too complex to fill\"\n        return []\n  tgs.push avl[0], avl[1], avl[2]\n  tgs\n\n\n###\nChecks if a point is within a triangle\n\n@class _PointInTriangle\n@namespace PolyK\n@private\n###\nPolyK._PointInTriangle = (px, py, ax, ay, bx, _by, cx, cy) ->\n  v0x = cx - ax\n  v0y = cy - ay\n  v1x = bx - ax\n  v1y = _by - ay\n  v2x = px - ax\n  v2y = py - ay\n  dot00 = v0x * v0x + v0y * v0y\n  dot01 = v0x * v1x + v0y * v1y\n  dot02 = v0x * v2x + v0y * v2y\n  dot11 = v1x * v1x + v1y * v1y\n  dot12 = v1x * v2x + v1y * v2y\n  invDenom = 1 / (dot00 * dot11 - dot01 * dot01)\n  u = (dot11 * dot02 - dot01 * dot12) * invDenom\n  v = (dot00 * dot12 - dot01 * dot02) * invDenom\n  \n  # Check if point is in triangle\n  (u >= 0) and (v >= 0) and (u + v < 1)\n\n\n###\nChecks if a shape is convex\n\n@class _convex\n@namespace PolyK\n@private\n###\nPolyK._convex = (ax, ay, bx, _by, cx, cy, sign) ->\n  ((ay - _by) * (cx - bx) + (bx - ax) * (cy - _by) >= 0) is sign\n\nmodule.exports = PolyK",
    "cg = require 'cg'\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\n\n###*\nA long sound that typically will only play one at a time.\n\nIdeal for -- you guessed it -- background music.\n\n@class cg.sound.Music\n@extends cg.Module\n@constructor\n@param paths {String|Array<String>} A path or list of paths to attempt to load.\n@param [volume=0.8] {Number} Value between 0 and 1 representing how loudly the music should play.\n###\nclass Music extends Module\n  __setupBindings: ->\n    @manager.on 'musicVolumeChange', =>\n      @_setVolume @_getVolume() # Trigger volume change\n\n    @onMusicStopBinding = @manager.on 'musicStop', =>\n      @stop()\n  constructor: (@paths, volume=0.8, @manager=cg.sound) ->\n    if (typeof @paths) is 'string'\n      @paths = [@paths]\n    @volume = volume\n    @looping = true\n\n  ###*\n  Value between 0 and 1 representing how loudly the music is playing/will play.\n  @property volume\n  @type Number\n  ###\n  Object.defineProperty @::, 'volume',\n    get: -> @_getVolume()\n    set: (val) -> @_setVolume val\n\n  ###*\n  `true` if the music will repeat indefinitely while playing, `false` otherwise.\n\n  @property looping\n  @type Boolean\n  ###\n  Object.defineProperty @::, 'looping',\n    get: -> @_getLooping()\n    set: (val) -> @_setLooping val\n\n  ###*\n  Specify the current volume of the music.\n\n  @protected\n  @method _setVolume\n  @param volume {Number} Value between 0 and 1 representing how loudly to play the music.\n  @chainable\n  ###\n  _setVolume: (@__volume) -> return @\n\n  ###*\n  Retrieve the current volume of the music.\n\n  @protected\n  @method _getVolume\n  @return {Number} Value between 0 and 1 representing how loudly the music is playing/will play.\n  ###\n  _getVolume: -> @__volume\n\n  ###*\n  Specify whether this should repeat after it finishes playing.\n\n  @protected\n  @method _setLooping\n  @param looping {Boolean} `true` if you wish for the music to repeat indefinitely while playing, `false` otherwise.\n  @chainable\n  ###\n  _setLooping: (@__looping) -> return @\n\n  ###*\n  Retrieve whether this should repeat after it finishes playing.\n\n  @protected\n  @method _getLooping\n  @return {Boolean} `true` if the music will repeat indefinitely while playing, `false` otherwise.\n  ###\n  _getLooping: -> @__looping\n\n  ###*\n  Calculate the final volume the music will be played at; this is the same as multiplying\n  this music's volume (or the parameter passed in) by its manager's [`musicVolume`](cg.sound.SoundManager.html#property_musicVolume)\n\n  @method getEffectiveVolume\n  @param [volume=this.volume] {Number} Value between 0 and 1 representing how loudly to play the music.\n  ###\n  getEffectiveVolume: (volume=@volume) ->\n    cg.math.clamp @manager.musicVolume * volume, 0,1\n\n  ###*\n  Attempt to load this music from the specified [`paths`](#property_paths).\n\n  @method load\n  @return {Promise} A promise that resolves once loading finishes, and rejects if the loading fails.\n  ###\n  load: ->\n\n  # TODO: unload\n\n  _play: -> throw new Error 'Unimplemented version of Music::_play!'\n  _stop: -> throw new Error 'Unimplemented version of Music::_stop!'\n\n  ###*\n  Play the music.\n\n  If the music is not yet loaded, it will attempt to load it, and if successful, begin playing.\n\n  If it fails to load, a warning will be printed.\n  @method play\n  @param [volume] {Number} Value between 0 and 1 representing how loudly to play the music.\n  @param [looping] {Boolean} `true` if you wish for the music to repeat indefinitely while playing, `false` otherwise.\n  @chainable\n  ###\n  play: (volume=@volume, looping=@looping) ->\n    @__playing = true\n    @volume = volume\n    @looping = looping\n    @load().then =>\n      return  unless @__playing\n      @_play @volume, @looping\n    , =>\n      cg.warn 'Music::play: Failed to load any of ' + (@paths.join(', ')) + '; aborting playback.'\n    return @\n\n  ###*\n  Convenience method; like calling [`play`](#method_play) with the `looping` parameter set to true.\n  @method loop\n  @param [volume] {Number} Value between 0 and 1 representing how loudly to play the music.\n  @chainable\n  ###\n  loop: (volume=@volume) -> @play volume, true\n\n  ###*\n  Stop playback of this music.\n\n  If `stop` is invoked after `play`, but before the music is loaded, playback will be cancelled,\n  but the music will continue to load.\n\n  @method stop\n  @chainable\n  ###\n  stop: ->\n    @__playing = false\n    @_stop()\n    return @\n\n  ###*\n  Slide the volume to a specified level.\n\n  @method fadeTo\n  @param level {Number} The value to slide [`volume`](#property_volume) to.\n  @param [duration=2000] {Number(milliseconds)} The length of time the slide will take.\n  @param [easeFunc='quad.in'|'quad.out'] {String|Function} The ease function to use with\n  the [`Tween`](cg.Tween.html) that alters [`volume`](#property_volume)\n\n  By default, if `level` is greater than [`volume`](#property_volume), 'quaratic.in' is used,\n  otherwise 'quad.out' is used.\n\n  If the music is not already playing, it will begin playing from the beginning.\n\n  @return {Promise} A promise that resolves as soon as the slide completes.\n  ###\n  fadeTo: (level, duration=2000, easeFunc) ->\n    @play()  if not @__playing\n    easeFunc ?= if level > @volume then 'quad.in' else 'quad.out'\n    @__fade?.stop()\n    @__fade = cg.tween @,\n      values: volume: level\n      duration: duration\n      easeFunc: easeFunc\n\n  ###*\n  Slide the volume level down to a given level.\n\n  If the `level` argument is zero, playback will automatically stop once the slide completes.\n\n  @method fadeOut\n  @param [duration=2000] {Number(milliseconds)} The length of time it should take to fade out before stopping.\n  @param [level=0] {Number} The value to slide [`volume`](#property_volume) down to from its current level.\n  @param [easeFunc='quad.out'] {String|Function} The ease function to use with\n  the [`Tween`](cg.Tween.html) that alters [`volume`](#property_volume)\n  @return {Promise} A promise that resolves as soon as the slide completes.\n  ###\n  fadeOut: (duration=2000, level=0, easeFunc='quad.out') ->\n    @__fade?.stop()\n    @__fade = cg.tween @,\n      values: volume: level\n      duration: duration\n      easeFunc: easeFunc\n    .then =>\n      @stop()  if @volume is 0\n\n  ###*\n  Slide the volume level up to a given level.\n\n  If the music is not yet loaded, it will attempt to load it, and if successful, begin playing.\n  If it fails to load, a warning will be printed.\n\n  If the music is not already playing, [`volume`](#property_volume) will be set to zero, and it will begin\n  playing from the beginning.\n\n  @method fadeIn\n  @param [duration=2000] {Number(milliseconds)} The length of time it should take to fade out before stopping.\n  @param [level=0.8] {Number} The value to slide [`volume`](#property_volume) up to from zero.\n  @param [easeFunc='quad.in'] {String|Function} The ease function to use with\n  the [`Tween`](cg.Tween.html) that alters [`volume`](#property_volume)\n  @return {Promise} A promise that resolves as soon as the fade in completes.\n  ###\n  fadeIn: (duration=2000, level=0.8, easeFunc='quad.in') ->\n    @load().then =>\n      if not @__playing\n        @volume = 0\n        @play()\n\n      @__fade?.stop()\n      @__fade = cg.tween @,\n        values: volume: level\n        duration: duration\n        easeFunc: easeFunc\n\nmodule.exports = Music\n",
    "cg  = require 'cg'\nModule  = require 'Module'\n\n# TODO Better API idea: play() returns a SoundChannel which has fadeIn/fadeOut/stop/etc instead\n# of using this `channel` number nonsense. Screw that noise (ha!)\n\n###*\nA (relatively) short sound that is capable of being played multiple times simultaneously; a sound effect.\n\n@class cg.sound.Sound\n@extends cg.Module\n@constructor\n@param paths {String|Array<String>} A path or list of paths to attempt to load.\n@param [volume=0.8] {Number} Value between 0 and 1 representing how loudly the sound should play.\n@param [numChannels=4] {Number} Sets the value of [`numChannels`](#property_numChannels))\n###\nclass Sound extends Module\n  __setupBindings: ->\n    @onSfxVolumeChangeBinding = @manager.on 'sfxVolumeChange', =>\n      @_setVolume @_getVolume() # Trigger effective volume changes through channels\n    @onSfxStopBinding = @manager.on 'sfxStop', =>\n      @stop() # Stop all channels\n\n  constructor: (@paths, volume, numChannels=cg.sound.defaultSfxChannelCount, @manager=cg.sound) ->\n    if (typeof @paths) is 'string'\n      if @paths.length > 0 and (@paths[@paths.length-1] is '*')\n        path = @paths.substr 0, @paths.length-1\n        @paths = ((path + format) for format in cg.sound.formats)\n      else\n        @paths = [@paths]\n\n    @volume = volume\n\n    ###*\n    The number of instances of this sound that may be played simultaneously. Originally set in the constructor; cannot be altered.\n    @property numChannels\n    @type Number\n    @final\n    ###\n    Object.defineProperty @, 'numChannels',\n      value: numChannels\n\n  ###*\n  Value between 0 and 1 representing how loudly the sound is playing/will play.\n  @property volume\n  @type Number\n  ###\n  Object.defineProperty @::, 'volume',\n    get: -> @_getVolume()\n    set: (val) -> @_setVolume val\n\n  ###*\n  `true` if the sound will repeat indefinitely while playing, `false` otherwise.\n\n  @property looping\n  @type Boolean\n  ###\n  Object.defineProperty @::, 'looping',\n    get: -> @_getLooping()\n    set: (val) -> @_setLooping val\n\n  ###*\n  Specify the current volume of the sound.\n\n  @protected\n  @method _setVolume\n  @param volume {Number} Value between 0 and 1 representing how loudly to play the sound.\n  @chainable\n  ###\n  _setVolume: (@__volume) -> return @\n\n  ###*\n  Retrieve the current volume of the sound.\n\n  @protected\n  @method _getVolume\n  @return {Number} Value between 0 and 1 representing how loudly the sound is playing/will play.\n  ###\n  _getVolume: -> @__volume\n\n  ###*\n  Specify whether this should repeat after it finishes playing.\n\n  @protected\n  @method _setLooping\n  @param looping {Boolean} `true` if you wish for the sound to repeat indefinitely while playing, `false` otherwise.\n  @chainable\n  ###\n  _setLooping: (@__looping) -> return @\n\n  ###*\n  Retrieve whether this should repeat after it finishes playing.\n\n  @protected\n  @method _getLooping\n  @return {Boolean} `true` if the sound will repeat indefinitely while playing, `false` otherwise.\n  ###\n  _getLooping: -> @__looping\n\n  ###*\n  Calculate the final volume the sound will be played at; this is the same as multiplying\n  this sound's volume (or the parameter passed in) by its manager's [`sfxVolume`](cg.sound.SoundManager.html#property_sfxVolume)\n\n  @method getEffectiveVolume\n  @param [volume=this.volume] {Number} Value between 0 and 1 representing how loudly to play the sound.\n  ###\n  getEffectiveVolume: (volume=@__volume) ->\n    cg.math.clamp @manager.sfxVolume * volume, 0,1\n\n  ###*\n  Attempt to load this sound from the specified [`paths`](#property_paths).\n\n  @method load\n  @return {Promise} A promise that resolves once loading finishes, and rejects if the loading fails.\n  ###\n  load: ->\n\n  # TODO: unload\n\n  _play: -> throw new Error 'Unimplemented version of Sound::_play!'\n  _stop: -> throw new Error 'Unimplemented version of Sound::_stop!'\n\n  ###*\n  The channel number that was used the last time [`play`](#method_play) or [`loop`](#method_loop) was invoked.\n\n  @property channel\n  @type Number\n  ###\n  Object.defineProperty @::, 'channel',\n    get: -> @__channel\n\n  ###*\n  Play the sound.\n\n  If all channels are busy, the least-recently-active channel will be interrupted, otherwise\n  the first available is used.\n\n  **NOTE:** Unlike [`Music::play`](cg.sound.Music.html#method_play), if `Sound::play` is called before a `Sound` is loaded, it will simply\n  fail to play, and print a warning.\n\n  @method play\n  @param [volume=[`this.volume`](#property_volume)] {Number} Value between 0 and 1 representing how loudly to play the sound.\n  @param [looping] {Boolean} `true` if you wish for the sound to repeat indefinitely while playing, `false` otherwise.\n  @chainable\n  ###\n  play: (volume=@volume, looping=@looping) ->\n    @__channel = @_play volume, looping\n    return @\n\n  ###*\n  Convenience method; like calling [`play`](#method_play) with the `looping` parameter set to true.\n  @method loop\n  @param [volume] {Number} Value between 0 and 1 representing how loudly to play the sound.\n  @chainable\n  ###\n  loop: (volume=@volume) ->\n    @play volume, true\n    return @\n\n  ###*\n  Stop playback of this sound.\n\n  @method stop\n  @param [channel] {Number}\n  The channel number to stop; if unspecified, playback on all channels will be stopped.\n  @chainable\n  ###\n  stop: (channel) ->\n    @_stop channel\n    return @\n\n  ###*\n  Slide the volume (of all channels) to a specified level.\n\n  @method fadeTo\n  @param level {Number} The value to slide [`volume`](#property_volume) to.\n  @param [duration=2000] {Number(milliseconds)} The length of time the slide will take.\n  @param [easeFunc='quad.in'|'quad.out'] {String|Function} The ease function to use with\n  the [`Tween`](cg.Tween.html) that alters [`volume`](#property_volume)\n\n  By default, if `level` is greater than [`volume`](#property_volume), 'quaratic.in' is used,\n  otherwise 'quad.out' is used.\n  @return {Promise} A promise that resolves as soon as the slide completes.\n  ###\n  fadeTo: (level, duration=2000, easeFunc) ->\n    easeFunc ?= if level > @volume then 'quad.in' else 'quad.out'\n\n    @__fade?.stop()\n    @__fade = cg.tween @,\n      values: volume: level\n      duration: duration\n      easeFunc: easeFunc\n\n  ###*\n  Slide the volume level (of all channels) down to a given level.\n\n  If the `level` argument is zero, playback will automatically stop once the slide completes.\n\n  @method fadeOut\n  @param [duration=2000] {Number(milliseconds)} The length of time it should take to fade out before stopping.\n  @param [level=0] {Number} The value to slide [`volume`](#property_volume) down to from its current level.\n  @param [easeFunc='quad.out'] {String|Function} The ease function to use with\n  the [`Tween`](cg.Tween.html) that alters [`volume`](#property_volume)\n  @return {Promise} A promise that resolves as soon as the slide completes.\n  ###\n  fadeOut: (duration=2000, level=0, easeFunc='quad.out') ->\n    @__fade?.stop()\n    @__fade = cg.tween @,\n      values: volume: level\n      duration: duration\n      easeFunc: easeFunc\n    .then =>\n      @stop()  if @volume is 0\n\n  ###*\n  Slide the volume level (of all channels) up to a given level.\n\n  @method fadeIn\n  @param [duration=2000] {Number(milliseconds)} The length of time it should take to fade out before stopping.\n  @param [level=0.8] {Number} The value to slide [`volume`](#property_volume) up to from zero.\n  @param [easeFunc='quad.in'] {String|Function} The ease function to use with\n  the [`Tween`](cg.Tween.html) that alters [`volume`](#property_volume)\n  @return {Promise} A promise that resolves as soon as the fade in completes.\n  ###\n  fadeIn: (duration=2000, level=0.8, easeFunc='quad.in') ->\n    @__fade?.stop()\n    @__fade = cg.tween @,\n      values: volume: level\n      duration: duration\n      easeFunc: easeFunc\n\nmodule.exports = Sound\n",
    "cg = require 'cg'\nModule = require 'Module'\nHasSignals = require 'util/HasSignals'\n\n###*\nControl playback of all music and sound effects.\n\n@class cg.sound.SoundManager\n@extends cg.Module\n###\nclass SoundManager extends Module\n  @mixin HasSignals\n  formats: ['ogg', 'mp3', 'm4a', 'wav']\n  constructor: ->\n    @defaultSfxChannelCount = 4\n    @sfxVolume = 1\n    @musicVolume = 1\n  \n  ###*\n  Emitted whenever [`musicVolume`](#property_musicVolume) changes.\n\n  @event musicVolumeChange\n  @param level {Number} The new value of `musicVolume`\n  ###\n  ###*\n  Volume multiplier applied to all music playback.\n\n  @property musicVolume\n  @type Number\n  @default 1.0\n  ###  \n  Object.defineProperty @::, 'musicVolume',\n    get: -> @_musicVolume\n    set: (level) ->\n      @_musicVolume = level\n      @emit 'musicVolumeChange', level\n\n  ###*\n  Emitted whenever [`sfxVolume`](#property_sfxVolume) changes.\n\n  @event sfxVolumeChange\n  @param level {Number} The new value of `sfxVolume`\n  ###\n  ###*\n  Volume multiplier applied to all sound effect playback.\n  \n  @property sfxVolume\n  @type Number\n  @default 1.0\n  ###  \n  Object.defineProperty @::, 'sfxVolume',\n    get: -> @_sfxVolume\n    set: (level) ->\n      @_sfxVolume = level\n      @emit 'sfxVolumeChange', level\n\n  ###*\n  Stop playback of all music.\n\n  @method stopAllMusic\n  @chainable\n  ###\n  stopAllMusic: ->\n    @emit 'musicStop', @\n    return @\n\n  ###*\n  Stop playback of all sound effects.\n\n  @method stopAllSfx\n  @chainable\n  ###\n  stopAllSfx: ->\n    @emit 'sfxStop', @\n    return @\n\n  ###*\n  Stop playback of all music and sound effects.\n\n  @method stopAll\n  @chainable\n  ###\n  stopAll: ->\n    @stopAllSfx()\n    @stopAllMusic()\n    return @\n\n  ###*\n  Slide [`sfxVolume`](#property_sfxVolume) to a specified level.\n\n  @method fadeSfxTo\n  @param level {Number} The value to slide [`sfxVolume`](#property_sfxVolume) to.\n  @param [duration=2000] {Number(milliseconds)} The length of time the slide will take.\n  @param [easeFunc='quad.in'|'quad.out'] {String|Function} The ease function to use with \n  the [`Tween`](cg.Tween.html) that alters [`sfxVolume`](#property_sfxVolume)\n\n  By default, if `level` is greater than [`sfxVolume`](#property_sfxVolume), 'quad.in' is used,\n  otherwise 'quad.out' is used.\n  @return {Promise} A promise that resolves as soon as the slide completes.\n  ###\n  fadeSfxTo: (level, duration=2000, easeFunc) ->\n    easeFunc ?= if level > @sfxVolume then 'quad.in' else 'quad.out'\n    \n    return cg.tween @,\n      values: sfxVolume: level\n      duration: duration\n      easeFunc: easeFunc\n\n  ###*\n  Slide the [`sfxVolume`](#property_sfxVolume) level down to a given level.\n\n  If the `level` argument is zero, all sound effects playing will be stopped.\n\n  @method fadeSfxOut\n  @param [duration=2000] {Number(milliseconds)} The length of time it should take to fade out before stopping.\n  @param [level=0] {Number} The value to slide [`sfxVolume`](#property_sfxVolume) down to from its current level.\n  @param [easeFunc='quad.out'] {String|Function} The ease function to use with \n  the [`Tween`](cg.Tween.html) that alters [`sfxVolume`](#property_volume)\n  @return {Promise} A promise that resolves as soon as the slide completes.\n  ###\n  fadeSfxOut: (duration=2000, level=0, easeFunc='quad.out') ->\n    return cg.tween @,\n      values: sfxVolume: level\n      duration: duration\n      easeFunc: easeFunc\n    .then =>\n      @stopAllSfx()  if @sfxVolume is 0\n\n  ###*\n  Set [`sfxVolume`](#property_sfxVolume) to zero then slide it up to a given level.\n\n  @method fadeSfxIn\n  @param [duration=2000] {Number(milliseconds)} The length of time it should take to fade out before stopping.\n  @param [level=0.8] {Number} The value to slide [`sfxVolume`](#property_sfxVolume) up to from zero.\n  @param [easeFunc='quad.in'] {String|Function} The ease function to use with \n  the [`Tween`](cg.Tween.html) that alters [`sfxVolume`](#property_sfxVolume)\n  @return {Promise} A promise that resolves as soon as the fade in completes.\n  ###\n  fadeSfxIn: (duration=2000, level=0.8, easeFunc='quad.in') ->\n    @sfxVolume = 0\n\n    cg.tween @,\n      values: volume: level\n      duration: duration\n      easeFunc: easeFunc\n\n  ###*\n  Slide [`musicVolume`](#property_musicVolume) to a specified level.\n\n  @method fadeMusicTo\n  @param level {Number} The value to slide [`musicVolume`](#property_musicVolume) to.\n  @param [duration=2000] {Number(milliseconds)} The length of time the slide will take.\n  @param [easeFunc='quad.in'|'quad.out'] {String|Function} The ease function to use with \n  the [`Tween`](cg.Tween.html) that alters [`musicVolume`](#property_musicVolume)\n\n  By default, if `level` is greater than [`musicVolume`](#property_musicVolume), 'quad.in' is used,\n  otherwise 'quad.out' is used.\n  @return {Promise} A promise that resolves as soon as the slide completes.\n  ###\n  fadeMusicTo: (level, duration=2000, easeFunc) ->\n    easeFunc ?= if level > @musicVolume then 'quad.in' else 'quad.out'\n    \n    return cg.tween @,\n      values: musicVolume: level\n      duration: duration\n      easeFunc: easeFunc\n\n  ###*\n  Slide [`musicVolume`](#property_musicVolume) level down to a given level.\n\n  If the `level` argument is zero, all sound effects playing will be stopped.\n\n  @method fadeMusicOut\n  @param [duration=2000] {Number(milliseconds)} The length of time it should take to fade out before stopping.\n  @param [level=0] {Number} The value to slide [`musicVolume`](#property_musicVolume) down to from its current level.\n  @param [easeFunc='quad.out'] {String|Function} The ease function to use with \n  the [`Tween`](cg.Tween.html) that alters [`musicVolume`](#property_volume)\n  @return {Promise} A promise that resolves as soon as the slide completes.\n  ###\n  fadeMusicOut: (duration=2000, level=0, easeFunc='quad.out') ->\n    return cg.tween @,\n      values: musicVolume: level\n      duration: duration\n      easeFunc: easeFunc\n    .then =>\n      @stopAllSfx()  if @musicVolume is 0\n\n  ###*\n  Set [`musicVolume`](#property_musicVolume) to zero then slide it up to a given level.\n\n  @method fadeMusicIn\n  @param [duration=2000] {Number(milliseconds)} The length of time it should take to fade out before stopping.\n  @param [level=0.8] {Number} The value to slide [`musicVolume`](#property_musicVolume) up to from zero.\n  @param [easeFunc='quad.in'] {String|Function} The ease function to use with \n  the [`Tween`](cg.Tween.html) that alters [`musicVolume`](#property_musicVolume)\n  @return {Promise} A promise that resolves as soon as the fade in completes.\n  ###\n  fadeMusicIn: (duration=2000, level=0.8, easeFunc='quad.in') ->\n    @musicVolume = 0\n\n    cg.tween @,\n      values: musicVolume: level\n      duration: duration\n      easeFunc: easeFunc\n\nmodule.exports = SoundManager",
    "cg = require 'cg'\nRectangle = require 'rendering/core/Rectangle'\nTexture = require 'rendering/textures/Texture'\n\n###*\n**NOTE**: This API is expected to change dramatically or even be replaced; use at your own risk!\n@class cg.text.BitmapFont\n###\nclass BitmapFont\n  constructor: (@texture, @spacing=1.0, @lineHeight=1.0, startChar=' ') ->\n    if typeof @texture is 'string'\n      @texture = cg.assets.textures[@texture]\n    \n    texWidth = @texture.width\n    texHeight = @texture.height\n    @textures = {}\n\n    x = 0\n    y = texHeight - 1\n\n    char = startChar\n    \n    charWidth = 0\n    @charHeight = charHeight = texHeight - 1\n\n    @texture.beginRead()\n\n    while x < texWidth\n      pixel = @texture.getPixel(x, y)\n      alpha = pixel?.a\n      \n      # \"Erase\" the line as we go:\n      pixel.a = 0\n      @texture.setPixel x,y, pixel\n\n      if not alpha?\n        throw new Error 'Unexpected issue loading BitmapFont; could not retrieve pixel at (' + x + ', ' + y + ')'\n\n      ++charWidth\n      ++x\n\n      if alpha <= 0\n        @textures[char] = new Texture @texture.baseTexture, new Rectangle x-charWidth, 0, charWidth, charHeight\n        charWidth = 0\n        char = String.fromCharCode(char.charCodeAt(0) + 1)\n\n    @texture.endRead()\n\n  widthOf: (str, spacing=@spacing) ->\n    width = 0\n    i = 0\n    while i < str.length\n      ch = str[i]\n      width += (@textures[ch]?.frame?.width or 0) * spacing\n      ++i\n\n    return width\n\nmodule.exports = BitmapFont",
    "###\ncombo.js - Copyright 2012-2013 Louis Acresti - All Rights Reserved\n###\n\ncg = require 'cg'\nBitmapFont = require 'text/BitmapFont'\nActor = require 'Actor'\nSprite = require 'rendering/Sprite'\n\n###*\n**NOTE**: This API is expected to change dramatically or even be replaced; use at your own risk!\n\n@class cg.text.BitmapText\n@extends cg.Actor\n###\nclass BitmapText extends Actor\n  constructor: (@font, @string='', params) ->\n    super params\n    @lineHeight ?= @font.lineHeight\n    @spacing ?= @font.spacing\n\n    @width = 0\n    @height = 0\n\n    @updateText()\n\n  updateText: ->\n    @clearChildren()\n\n\n    th = @font.charHeight * @lineHeight\n    # TODO: Word wrapping!\n    lines = @string.split '\\n'\n    @height = th * lines.length\n\n    # Determine widest line ahead of time; this is later\n    #  used to offset lines when alignment is 'center'.\n    widths = []\n    for str in lines\n      width = @font.widthOf str, @spacing\n      @width = Math.max @width, width\n      widths.push width\n\n    switch @alignment\n      when 'center'\n        @pivotX = @width / 2\n        @pivotY = @height / 2\n      when 'left'\n        @pivotX = 0\n        @pivotY = 0\n      when 'right'\n        @pivotX = @width\n        @pivotY = 0\n    \n    top = 0\n    for str,i in lines\n      width = widths[i]\n\n      if @alignment is 'center'\n        left = (@width - width)/2\n      else\n        left = 0\n\n      i=0\n      while i < str.length\n        ch = str[i]\n        tw = @font.widthOf ch\n        if tw > 0\n          charSprite = @addChild new Sprite @font.textures[ch]\n          charSprite.x = left\n          charSprite.y = top\n        left += tw * @spacing\n        ++i\n      top += th\n\n\nmodule.exports = BitmapText",
    "###\nThe MIT License\n\nCopyright (c) 2013-2014 Mathew Groves\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n###\n###*\n@author Mat Groves http://matgroves.com/ @Doormat23\n###\n\nSprite = require 'rendering/Sprite'\nTexture = require 'rendering/textures/Texture'\nBaseTexture = require 'rendering/textures/BaseTexture'\nPoint = require 'rendering/core/Point'\n\n# LOU TODO: Abstract out all the canvas rendering stuff. Native implementation will use SDL_ttf.\n\n###*\nA PixiText Object will create a line(s) of text to split a line you can use \"\\n\"\n\n**NOTE**: This API is expected to change dramatically or even be replaced; use at your own risk!\n\n@class cg.text.PixiText\n@extends cg.rendering.Sprite\n@constructor\n@param text {String} The copy that you would like the text to display\n@param [style] {Object} The style parameters\n@param [style.font] {String} default \"bold 20pt Arial\" The style and size of the font\n@param [style.fill=\"black\"] {Object} A canvas fillstyle that will be used on the text eg \"red\", \"#00FF00\"\n@param [style.align=\"left\"] {String} An alignment of the multiline text (\"left\", \"center\" or \"right\")\n@param [style.stroke] {String} A canvas fillstyle that will be used on the text stroke eg \"blue\", \"#FCFF00\"\n@param [style.strokeThickness=0] {Number} A number that represents the thickness of the stroke. Default is 0 (no stroke)\n@param [style.wordWrap=false] {Boolean} Indicates if word wrap should be used\n@param [style.wordWrapWidth=100] {Number} The width at which text will wrap\n###\nclass PixiText extends Sprite\n  @heightCache: {}\n  \n  constructor: (text, style) ->\n    canvas = document.createElement(\"canvas\")\n    super Texture.fromCanvas(canvas)\n    @canvas = @texture.baseTexture.source\n    @context = @texture.baseTexture._ctx\n    @setText text\n    @setStyle style\n    @updateText()\n    @dirty = false\n\n  ###*\n  Set the style of the text\n\n  @method setStyle\n  @param [style] {Object} The style parameters\n  @param [style.font=\"bold 20pt Arial\"] {String} The style and size of the font\n  @param [style.fill=\"black\"] {Object} A canvas fillstyle that will be used on the text eg \"red\", \"#00FF00\"\n  @param [style.align=\"left\"] {String} An alignment of the multiline text (\"left\", \"center\" or \"right\")\n  @param [style.stroke=\"black\"] {String} A canvas fillstyle that will be used on the text stroke eg \"blue\", \"#FCFF00\"\n  @param [style.strokeThickness=0] {Number} A number that represents the thickness of the stroke. Default is 0 (no stroke)\n  @param [style.wordWrap=false] {Boolean} Indicates if word wrap should be used\n  @param [style.wordWrapWidth=100] {Number} The width at which text will wrap\n  ###\n  setStyle: (style) ->\n    style = style or {}\n    style.font = style.font or \"bold 20pt Arial\"\n    style.fill = style.fill or \"black\"\n    style.align = style.align or \"left\"\n    style.stroke = style.stroke or \"black\" #provide a default, see: https://github.com/GoodBoyDigital/pixi.js/issues/136\n    style.strokeThickness = style.strokeThickness or 0\n    style.wordWrap = style.wordWrap or false\n    style.wordWrapWidth = style.wordWrapWidth or 100\n    @style = style\n    @dirty = true\n\n  ###*\n  Set the copy for the text object. To split a line you can use \"\\n\"\n\n  @methos setText\n  @param {String} text The copy that you would like the text to display\n  ###\n  setText: (text) ->\n    @text = text.toString() or \" \"\n    @dirty = true\n\n  ###*\n  Renders text\n\n  @method updateText\n  @private\n  ###\n  updateText: ->\n    @context.font = @style.font\n    outputText = @text\n    \n    # word wrap\n    # preserve original text\n    outputText = @wordWrap(@text)  if @style.wordWrap\n    \n    #split text into lines\n    lines = outputText.split(/(?:\\r\\n|\\r|\\n)/)\n    \n    #calculate text width\n    lineWidths = []\n    maxLineWidth = 0\n    i = 0\n\n    while i < lines.length\n      lineWidth = @context.measureText(lines[i]).width\n      lineWidths[i] = lineWidth\n      maxLineWidth = Math.max(maxLineWidth, lineWidth)\n      i++\n    @width = @canvas.width = maxLineWidth + @style.strokeThickness\n    \n    #calculate text height\n    lineHeight = @determineFontHeight(\"font: \" + @style.font + \";\") + @style.strokeThickness\n    @height = @canvas.height = lineHeight * lines.length\n    \n    #set canvas text styles\n    @context.fillStyle = @style.fill\n    @context.font = @style.font\n    @context.strokeStyle = @style.stroke\n    @context.lineWidth = @style.strokeThickness\n    @context.textBaseline = \"top\"\n    \n    #draw lines line by line\n    i = 0\n    while i < lines.length\n      linePosition = new Point(@style.strokeThickness / 2, @style.strokeThickness / 2 + i * lineHeight)\n      if @style.align is \"right\"\n        linePosition.x += maxLineWidth - lineWidths[i]\n      else linePosition.x += (maxLineWidth - lineWidths[i]) / 2  if @style.align is \"center\"\n      @context.strokeText lines[i], linePosition.x, linePosition.y  if @style.stroke and @style.strokeThickness\n      @context.fillText lines[i], linePosition.x, linePosition.y  if @style.fill\n      i++\n    @updateTexture()\n\n  ###*\n  Updates texture size based on canvas size\n\n  @method updateTexture\n  @private\n  ###\n  updateTexture: ->\n    @texture.baseTexture.width = @canvas.width\n    @texture.baseTexture.height = @canvas.height\n    @texture.frame.width = @canvas.width\n    @texture.frame.height = @canvas.height\n    @width = @canvas.width\n    @height = @canvas.height\n    BaseTexture.texturesToUpdate.push @texture.baseTexture\n\n  ###*\n  Updates the transfor of this object\n\n  @method __updateTransform\n  @private\n  ###\n  __updateTransform: ->\n    if @dirty\n      @updateText()\n      @dirty = false\n    super\n\n  ###*\n  http://stackoverflow.com/users/34441/ellisbben\n  great solution to the problem!\n\n  @method determineFontHeight\n  @param fontStyle {Object}\n  @private\n  ###    \n  determineFontHeight: (fontStyle) ->\n    \n    # build a little reference dictionary so if the font style has been used return a\n    # cached version...\n    result = PixiText.heightCache[fontStyle]\n    unless result\n      body = document.getElementsByTagName(\"body\")[0]\n      dummy = document.createElement(\"div\")\n      dummyText = document.createTextNode(\"M\")\n      dummy.appendChild dummyText\n      dummy.setAttribute \"style\", fontStyle + \";position:absolute;top:0;left:0\"\n      body.appendChild dummy\n      result = dummy.offsetHeight\n      PixiText.heightCache[fontStyle] = result\n      body.removeChild dummy\n    result\n\n  ###*\n  A PixiText Object will apply wordwrap\n\n  @method wordWrap\n  @param text {String}\n  @private\n  ###\n  wordWrap: (text) ->\n    \n    # search good wrap position\n    searchWrapPos = (ctx, text, start, end, wrapWidth) ->\n      p = Math.floor((end - start) / 2) + start\n      return 1  if p is start\n      if ctx.measureText(text.substring(0, p)).width <= wrapWidth\n        if ctx.measureText(text.substring(0, p + 1)).width > wrapWidth\n          p\n        else\n          arguments.callee ctx, text, p, end, wrapWidth\n      else\n        arguments.callee ctx, text, start, p, wrapWidth\n\n    lineWrap = (ctx, text, wrapWidth) ->\n      return text  if ctx.measureText(text).width <= wrapWidth or text.length < 1\n      pos = searchWrapPos(ctx, text, 0, text.length, wrapWidth)\n      text.substring(0, pos) + \"\\n\" + arguments.callee(ctx, text.substring(pos), wrapWidth)\n\n    result = \"\"\n    lines = text.split(\"\\n\")\n    i = 0\n\n    while i < lines.length\n      result += lineWrap(@context, lines[i], @style.wordWrapWidth) + \"\\n\"\n      i++\n    result\n\n\n  ###*\n  Destroys this text object\n\n  @method destroy\n  @param destroyTexture {Boolean}\n  ###\n  destroy: (destroyTexture) ->\n    @texture.destroy()  if destroyTexture\n\nmodule.exports = PixiText",
    "PixiText = require 'text/PixiText'\nBitmapFont = require 'text/BitmapFont'\nBitmapText = require 'text/BitmapText'\n\nmodule.exports = {\n  PixiText: PixiText\n  BitmapFont: BitmapFont\n  BitmapText: BitmapText\n}",
    "###\ncombo.js - Copyright 2012-2013 Louis Acresti - All Rights Reserved\n###\n\nTileSheet = require 'TileSheet'\nTileMap = require 'tile/TileMap'\n\nNEIGHBOR =\n  TOP: 1\n  RIGHT: 2\n  BOTTOM: 4\n  LEFT: 8\n\n###*\nA special [`TileMap`](cg.tile.TileMap.html) that automatically chooses appropriate tile images based on the tiles around it.\n\nThe sheet that gets used with this must follow the rules outlined here:\nhttp://www.saltgames.com/2010/a-bitwise-method-for-applying-tilemaps/\n\n@class cg.tile.BitwiseTileMap\n@extends cg.tile.TileMap\n###\nclass BitwiseTileMap extends TileMap\n  constructor: ->\n    super\n    @_bitwiseMap = new Array @mapWidth*@mapHeight, 0\n\n  _totFor: (x, y) ->\n    if x < 0 or y < 0 or x >= @mapWidth or y >= @mapHeight or (!@_bitwiseMap[y * @mapWidth + x])\n      return -1\n\n    if y > 0\n      top = @_bitwiseMap[(y-1) * @mapWidth + x]\n    if x < @mapWidth-1\n      right = @_bitwiseMap[y * @mapWidth + x+1]\n    if y < @mapHeight-1\n      bottom = @_bitwiseMap[(y+1) * @mapWidth + x]\n    if x > 0\n      left = @_bitwiseMap[y * @mapWidth + x-1]\n\n    tot = 0\n\n    if top\n      tot += NEIGHBOR.TOP\n    if right\n      tot += NEIGHBOR.RIGHT\n    if bottom\n      tot += NEIGHBOR.BOTTOM\n    if left\n      tot += NEIGHBOR.LEFT\n\n    return tot\n\n  ###*\n  Build a 2D array representing the current map.\n\n  @method getMapData\n  @return {2D Array of Booleans} A 2D array containing booleans; `true` values are solid tiles, others are not solid.\n  ###\n  getMapData: ->\n    data = new Array @mapWidth\n    x = 0\n    while x < @mapWidth\n      col = new Array @mapHeight\n      y = 0\n      while y < @mapHeight\n        col[y] = if @_bitwiseMap[y * @mapWidth + x] then 1 else 0\n        ++y\n      data[x] = col\n      ++x\n    return data\n\n  ###*\n  Mark the tile at a specified coordinate as \"solid\".\n\n  A \"solid\" tile is just the opposite of an empty space.\n\n  @method setSolid\n  @param x {Number} The x coordinate into the tile map.\n  @param y {Number} The y coordinate into the tile map.\n  @param solid {Boolean} `true` if you want the tile to be solid.\n  ###\n  setSolid: (x, y, solid) ->\n    return if x < 0 or y < 0 or x >= @mapWidth or y >= @mapHeight\n    return if !!solid is !!@_bitwiseMap[y * @mapWidth + x]\n    @_bitwiseMap[y * @mapWidth + x] = solid\n    \n    if y > 0\n      @set x, y-1, @_totFor x, y-1\n    if x < @mapWidth-1\n      @set x+1,y, @_totFor x+1, y\n    if y < @mapHeight-1\n      @set x,y+1, @_totFor x, y+1\n    if x > 0\n      @set x-1,y, @_totFor x-1, y\n\n    @set x,y, @_totFor x,y\n\nmodule.exports = BitwiseTileMap\n",
    "cg = require 'cg'\n\nEPSILON = 0.001\n\n# TODO Should hotspots take into account the anchor of their actor?\n\n###*\nTODOC\n\n@class cg.tile.HasHotspots\n###\nclass HasHotspots\n  init: ->\n    @grounded = false\n    @hotspots = {}\n\n  update: (dt) ->\n    for map in @collisionMaps\n     for own k, hs of @hotspots\n       dist = hs.update map\n       if hs.solid\n         if dist?\n           hs.handleCollision dist\n    return\n\n###*\nTODOC\n\n@class cg.tile.Hotspot\n###\nclass Hotspot\n  constructor: (@actor, @offset) ->\n  update: ->\n    @didCollide = false\n\n###*\nTODOC\n\n@class cg.tile.Hotspot.Top\n###\nclass Top extends Hotspot\n  constructor: (@actor, @offset, @solid=true) ->\n    super arguments...\n    o=@offset\n    @offset =\n      x: o.x - @actor.anchorX*@actor.width\n      y: o.y - @actor.anchorY*@actor.height\n  update: (map) ->\n    super arguments...\n  \n    pos =\n      x: @actor.x + @offset.x\n      y: @actor.y + @offset.y\n\n    {x:tileX, y:tileY} = map.tileCoordsAt pos.x, pos.y\n\n    if map.get(tileX, tileY)?\n      tileBottom = (tileY+1) * map.tileHeight\n\n      if map.bottomEdge(tileX, tileY) and (tileBottom - pos.y) <= (map.tileHeight / 2)\n        @didCollide = true\n        return if @actor.v.y > 0\n        return tileBottom - pos.y\n    return\n\n  handleCollision: (dy) ->\n    pos =\n      x: @actor.x + @offset.x\n      y: @actor.y + @offset.y\n    pos.y += dy\n    @actor.y = pos.y - @offset.y + EPSILON\n    @actor.v.y *= -@actor.bounce\n\n###*\nTODOC\n\n@class cg.tile.Hotspot.Bottom\n###\nclass Bottom extends Hotspot\n  constructor: (@actor, @offset, @solid=true) ->\n    super arguments...\n    o=@offset\n    @offset =\n      x: o.x - @actor.anchorX*@actor.width\n      y: o.y - @actor.anchorY*@actor.height\n  update: (map) ->\n    super arguments...\n\n    pos =\n      x: @actor.x + @offset.x\n      y: @actor.y + @offset.y\n\n    {x:tileX, y:tileY} = map.tileCoordsAt pos.x, pos.y\n\n    if map.get(tileX, tileY)?\n      tileTop = tileY * map.tileHeight\n\n      if map.topEdge(tileX, tileY) and (pos.y - tileTop) <= (map.tileHeight / 2)\n        @didCollide = true\n        return if @actor.v.y < 0\n        return tileTop - pos.y\n    return\n\n  handleCollision: (dy) ->\n    pos =\n      x: @actor.x + @offset.x\n      y: @actor.y + @offset.y\n    pos.y += dy\n    if @actor.v.y > 0\n      @actor.y = pos.y - @offset.y + EPSILON\n      @actor.v.y *= -@actor.bounce\n\n###*\nTODOC\n\n@class cg.tile.Hotspot.Left\n###\nclass Left extends Hotspot\n  constructor: (@actor, @offset, @solid=true) ->\n    super arguments...\n    o=@offset\n    @offset =\n      x: o.x - @actor.anchorX*@actor.width\n      y: o.y - @actor.anchorY*@actor.height\n  update: (map) ->\n    super arguments...\n\n    pos =\n      x: @actor.x + @offset.x\n      y: @actor.y + @offset.y\n\n    {x:tileX, y:tileY} = map.tileCoordsAt pos.x, pos.y\n\n    if map.get(tileX, tileY)?\n      tileRight = (tileX+1) * map.tileWidth\n\n      if map.rightEdge(tileX, tileY) and (tileRight - pos.x) <= (map.tileWidth / 2)\n        @didCollide = true\n        return if @actor.v.x > 0\n        return tileRight - pos.x\n    return\n\n  handleCollision: (dx) ->\n    pos =\n      x: @actor.x + @offset.x\n      y: @actor.y + @offset.y\n    pos.x += dx\n    @actor.x = pos.x - @offset.x + EPSILON\n    @actor.v.x *= -@actor.bounce\n\n###*\nTODOC\n\n@class cg.tile.Hotspot.Right\n###\nclass Right extends Hotspot\n  constructor: (@actor, @offset, @solid=true) ->\n    super arguments...\n    o=@offset\n    @offset =\n      x: o.x - @actor.anchorX*@actor.width\n      y: o.y - @actor.anchorY*@actor.height\n  update: (map) ->\n    super arguments...\n\n    pos =\n      x: @actor.x + @offset.x\n      y: @actor.y + @offset.y\n\n    {x:tileX, y:tileY} = map.tileCoordsAt pos.x, pos.y\n\n    if map.get(tileX, tileY)?\n      tileLeft = tileX * map.tileWidth\n\n      if map.leftEdge(tileX, tileY) and (pos.x - tileLeft) <= (map.tileWidth / 2)\n        @didCollide = true\n        return if @actor.v.x < 0\n        return tileLeft - pos.x\n    return\n\n  handleCollision: (dx) ->\n    pos =\n      x: @actor.x + @offset.x\n      y: @actor.y + @offset.y\n    pos.x += dx\n    @actor.x = pos.x - @offset.x + EPSILON\n    @actor.v.x *= -@actor.bounce\n\nHotspot.Left = Left\nHotspot.Right = Right\nHotspot.Bottom = Bottom\nHotspot.Top = Top\nHotspot.HasHotspots = HasHotspots\n\nmodule.exports = Hotspot",
    "###\ncombo.js - Copyright 2012-2013 Louis Acresti - All Rights Reserved\n###\n\ncg = require 'cg'\nActor = require 'Actor'\nTileSheet = require 'TileSheet'\nSprite = require 'rendering/Sprite'\n\n# TODO Specify a display area (relative to screen)\n# TODO TileMap pre-rendering with dynamic tiles (use a `RenderTexture` and `this.dirty`)\n# TODO TileMap resizing\n\n###*\nFixed-size grid of square textures in the fashion of oldschool console games.\n\n@class cg.tile.TileMap\n@extends cg.Actor\n\n@constructor\n\n@example\n    // Create a 100x100 TileMap that uses a 20x20 grid-based tilesheet named \"tiles\"\n    var map = new TileMap({\n      mapWidth: 100,\n      mapHeight: 100,\n      tileWidth: 20,\n      tileHeight: 20,\n      texture: 'tiles' Shorthand for cg.assets.textures.tiles\n    });\n\n@param [properties] {Object} This object is passed to the inherited `Actor` constructor.\n\nAny additional name/value pairs in `properties` will be copied into the resulting `TileMap` object.\n@param [properties.mapWidth=32] {Number} The number of tiles this map spans horizontally.\n@param [properties.mapHeight=32] {Number} The number of tiles this map spans vertically.\n@param [properties.tileWidth=16] {Number} The width of each tile (in pixels).\n@param [properties.tileHeight=16] {Number} The height of each tile (in pixels).\n@param [properties.sheets]* {String|Texture|TileSheet | Array(String|Texture|TileSheet)}\nAny `Texture` supplied is converted to a `TileSheet` with a grid size that matches this map.\n\nYou may also supply pre-existing `TileSheet`s as well, in which case no new `TileSheet` is created.\n\nThe resulting array of `TileSheet`s is stored as `this.sheets`.\n###\nclass TileMap extends Actor\n  _createSheetFor: (prop) ->\n    if typeof prop is 'object' and prop instanceof TileSheet\n      sheet = prop\n    else if cg.assets.sheets[prop]?.isTileSheet\n      sheet = cg.assets.sheets[prop]\n    else\n      sheet = TileSheet.create prop, @tileWidth, @tileHeight\n    return sheet\n\n  constructor: ->\n    super\n    @mapWidth ?= 32\n    @mapHeight ?= 32\n    @tileWidth ?= 16\n    @tileHeight ?= 16\n    \n    @sheets ?= []\n\n    if not cg.util.isArray @sheets\n      @sheets = [@sheets]\n    \n    for sheet,i in @sheets\n      @sheets[i] = @_createSheetFor sheet\n\n    @_map = new Array @mapWidth * @mapHeight\n    @_resizeDisplayMap cg.width, cg.height\n\n  _resizeDisplayMap: (scrWidth, srcHeight) ->\n    @displayMap = []\n    @displayMap.width = Math.min @mapWidth, Math.ceil(scrWidth / @tileWidth)+1\n    @displayMap.height = Math.min @mapHeight, Math.ceil(srcHeight / @tileHeight)+1\n    @removeChild @displayContainer  if @displayContainer?\n    @displayContainer = new Actor\n    y=0\n    while y < @displayMap.height\n      x=0\n      while x < @displayMap.width\n        tile = new Sprite @sheets[0][0]\n        tex = null\n        t = @get x,y\n        if t?\n          [sheetNum, tileNum] = t\n          tex = @sheets[sheetNum]?[tileNum]\n        if not tex?\n          tile.visible = false\n        else\n          tile.texture = tex\n          tile.visible = true\n        tile.x = x * @tileWidth\n        tile.y = y * @tileHeight\n        @displayContainer.addChild tile\n        @displayMap[y * @displayMap.width + x] = tile\n        ++x\n      ++y\n    @addChild @displayContainer\n\n  ###*\n  Replace one of this map's `TileSheet`s.\n\n  @method setSheet\n  @param sheet {String|Texture|TileSheet}\n  The new sheet.\n\n  If a `String` or `Texture` is supplied, it is converted to a `TileSheet` with a grid size that matches this map.\n  @param number=0 {Number} The index into `this.sheets` to replace.\n  @return The `TileSheet` that was replaced, if any.\n\n  @example\n      // Typical use case; changing to a new world\n      map.setSheet('world_02_tiles');\n\n  @example\n      // Using multiple sheets at once:\n      var map = new TileMap({\n        mapWidth: 100,\n        mapHeight: 100,\n        tileWidth: 20,\n        tileHeight: 20,\n        texture: ['lightTiles', 'darkTiles']\n      });\n\n      generateMap(map); // Some method that populates our map with tiles\n      \n      var lightSheet = map.sheets[0];\n      var darkSheet  = map.sheets[1];\n\n      map.setSheet(map.sheets[1], 0);\n      map.setSheet(lightSheet, 1);\n  ###\n  setSheet: (sheet, number=0) ->\n    sheet = @_createSheetFor sheet\n    oldSheet = @sheets[number]\n    @sheets[number] = sheet\n    @_resizeDisplayMap cg.width, cg.height\n    return oldSheet\n\n  ###*\n  Add a new `TileSheet` to `this.sheets`\n\n  @method addSheet\n  @param sheet {String|Texture|TileSheet}\n  The sheet to add.\n\n  If a `String` or `Texture` is supplied, it is converted to a `TileSheet` with a grid size that matches this map.\n\n  @return The sheet that was added.\n\n  @example\n      var map = new TileMap({\n        mapWidth: 100,\n        mapHeight: 100,\n        tileWidth: 20,\n        tileHeight: 20,\n        texture: ['tiles', 'moreTiles']\n      });\n\n      cg.log(map.sheets.length); // \"2\"\n\n      map.addSheet('evenMoreTiles');\n\n      cg.log(map.sheets.length); // \"3\"\n  ###\n  addSheet: (sheet) ->\n    sheet = @_createSheetFor sheet\n    @sheets.push(sheet)\n    return sheet\n\n  ###*\n  Set the tile index at a given grid coordinate.\n\n  @method set\n  @param x {Number} Integer x-coordinate into this map (ignored when x < 0 or x >= `this.mapWidth`)\n  @param y {Number} Integer y-coordinate into this map (ignored when y < 0 or y >= `this.mapHeight`)\n  @param tileNumber {Number} The integer index into the `TileSheet` that represents this tile.\n  @param [sheetNumber=0] {Number} The integer index into `this.sheets` that represents the `TileSheet` associated with this tile.\n  ###\n  set: (x, y, tileNumber, sheetNum=0) ->\n    return  if x < 0 or y < 0 or x >= @mapWidth or y >= @mapHeight\n    if sheetNum < 0 or tileNumber < 0\n      val = null\n    else\n      val = [sheetNum, tileNumber]\n    @_map[y * @mapWidth + x] = val\n    @dirty = true  if not @dirty\n\n  ###*\n  Get the tile index and sheet number at a given grid coordinate.\n\n  @method get\n  @param x {Number} Integer x-coordinate into this map \n  @param y {Number} Integer y-coordinate into this map\n  @return {Array}\n  A two-element `Array` that contains first the sheet number, then the tile number of the tile at the\n  specified coordinate.\n\n      var sheetNumber, tileNumber, tileData;\n      tileData = this.get(0,0);\n\n      sheetNumber = tileData[0];\n      tileNumber = tileData[1];\n\n  `undefined` when the coordinate is outside the bounds of this map.\n  ###\n  get: (x, y) ->\n    return undefined  if x < 0 or y < 0 or x >= @mapWidth or y >= @mapHeight\n    @_map[y * @mapWidth + x]\n\n  ###*\n  Get the sprite used to display the tile at a specified coordinate.\n\n  @protected\n  @method getTileSprite\n  @param x {Number} Integer x-coordinate into this map\n  @param y {Number} Integer y-coordinate into this map\n  @return {cg.rendering.Sprite}\n  The sprite used to display the tile at the specified coordinate.\n\n  `null` when the tile at the specified coordinate is not in the visible bounds\n  of this tile map.\n  ###\n  getTileSprite: (x, y) ->\n    dx = x - @startx\n    dy = y - @starty\n    map = @displayMap\n    unless dx >= 0 and dy >= 0 and dx < map.width and dy < map.height\n      return null\n    map[dy * map.width + dx]\n\n  ###*\n  Get the coordinates of the tile that contains a given screen coordinate.\n\n  **NOTE**: This \n\n  @method tileCoordsAt\n  @param x {Number} x-component of the screen coordinate\n  @param y {Number} y-component of the screen coordinate\n  ###\n  tileCoordsAt: (x, y) ->\n    x: Math.floor((x - @x) / @tileWidth)\n    y: Math.floor((y - @y) / @tileHeight)\n\n  update: ->\n    if cg.resized\n      renderer = cg.renderer\n      @_resizeDisplayMap cg.width, cg.height\n\n    super\n\n    prevStartx = @startx\n    prevStarty = @starty\n    prevEndx = @endx\n    prevEndy = @endy\n\n    # TODO: Properly get screen coordinates...\n    startx = Math.max 0, Math.floor @x / @tileWidth\n    starty = Math.max 0, Math.floor @y / @tileHeight\n    endx = startx + @displayMap.width\n    endy = starty + @displayMap.height\n\n    if not (@dirty or (prevStartx != startx) or (prevStarty != starty) or (prevEndx != endx) or (prevEndy != endy))\n      return\n    x = startx\n    dx = 0\n    while x < endx\n      y = starty\n      dy = 0\n      while y < endy\n        tile = @displayMap[dy * @displayMap.width + dx]\n        if tile?\n          tex = null\n          t = @get x,y\n          if t?\n            [sheetNum, tileNum] = t\n            tex = @sheets[sheetNum]?[tileNum]\n          if not tex?\n            tile.visible = false\n          else\n            tile.texture = tex\n            tile.visible = true\n        ++y\n        ++dy\n      ++x\n      ++dx\n    @displayContainer.x = startx * @tileWidth\n    @displayContainer.y = starty * @tileHeight\n\n    @startx = startx\n    @starty = starty\n    @endx = endx\n    @endy = endy\n\n    @dirty = false\n\n  ###*\n  @protected\n  @method topEdge\n  @param x {Number} integer x-component of a tile coordinate\n  @param y {Number} integer x-component of a tile coordinate\n  @return {Boolean} `true` if the top of the tile isn't directly adjacent to another tile\n  ###\n  topEdge: (x, y) -> !@get(x, y-1)?\n\n  ###*\n  @protected\n  @method leftEdge\n  @param x {Number} integer x-component of a tile coordinate\n  @param y {Number} integer x-component of a tile coordinate\n  @return {Boolean} `true` if the left of the tile isn't directly adjacent to another tile\n  ###\n  leftEdge: (x, y) -> !@get(x-1, y)?\n\n  ###*\n  @protected\n  @method bottomEdge\n  @param x {Number} integer x-component of a tile coordinate\n  @param y {Number} integer x-component of a tile coordinate\n  @return {Boolean} `true` if the bottom of the tile isn't directly adjacent to another tile\n  ###\n  bottomEdge: (x, y) -> !@get(x, y+1)?\n\n  ###*\n  @protected\n  @method rightEdge\n  @param x {Number} integer x-component of a tile coordinate\n  @param y {Number} integer x-component of a tile coordinate\n  @return {Boolean} `true` if the right of the tile isn't directly adjacent to another tile\n  ###\n  rightEdge: (x, y) -> !@get(x+1, y)?\n\nmodule.exports = TileMap",
    "BitwiseTileMap = require 'tile/BitwiseTileMap'\nHotspot = require 'tile/Hotspot'\nTileMap = require 'tile/TileMap'\n\nmodule.exports = {\n  BitwiseTileMap: BitwiseTileMap\n  Hotspot: Hotspot\n  TileMap: TileMap\n}\n",
    "class DeferredProxy\n  @create: (obj, promise) ->\n    proxy = {}\n    queue = []\n    \n    enqueue = (func, args...) ->\n      queue.push [func, args]\n      return proxy\n\n    for func, val of obj when (typeof val is 'function')\n      proxy[func] = enqueue.bind null, func\n\n    promise = promise.then ->\n      for job in queue\n        obj[job[0]] job[1]\n\n      return\n\n    proxy.then = ->\n      promise = promise.then arguments...\n      return proxy\n\n    return proxy\n\nmodule.exports = DeferredProxy",
    "###\nPlugin example concept:\n\nHasFavoriteNumber =\n  preInit: (klass) ->\n    # Add a property called \"favoriteNumber\" to our object.\n    @favoriteNumber = 42\n    ++klass.favoriteNumberCount\n    cg.log 'There are ' + klass.favoriteNumberCount + ' objects that have a favorite number.'\n    \n  mixin:\n    sayHello: -> cg.log 'HELLO; MY FAVORITE NUMBER IS ' + @favoriteNumber + '!'\n\n  mixinStatic:\n    onMixinStatic: ->\n      @favoriteNumberCount = 0\n###\n\nNOOP = ->\n\nNOOPFor = (methodName) ->\n  switch methodName\n    when 'preInit', 'postInit'\n      methodRanName = methodRanNameFor methodName\n      return -> @[methodRanName] = true\n    else\n      return NOOP\n\nmethodNames = [\n  'preInit'\n  'postInit'\n  'preReset'\n  'postReset'\n  'preUpdate'\n  'postUpdate'\n  'preDispose'\n  'postDispose'\n]\n\nmethodListNameFor = (methodName) -> '__plugins_' + methodName + '_callbacks'\nmethodRanNameFor = (methodName) -> '__plugins_' + methodName + '_ran'\n\nbuildMethodListInvoker = (methodName) ->\n  methodListName = methodListNameFor methodName\n  if methodName in ['preInit', 'postInit']\n    methodRanName = methodRanNameFor methodName\n    return ->\n      for method in @[methodListName]\n        method.call @\n      @[methodRanName] = true\n      return\n  else\n    return ->\n      for method in @[methodListName]\n        method.call @\n      return\n\ninvokers = {}\nfor name in methodNames\n  invokers[name] = buildMethodListInvoker name\n\nHasPlugins = (__plugins...) ->\n  __plugins ?= []\n\n  do (__plugins) ->\n    plugin: (_plugins...) ->\n      for plugin in _plugins\n        @mixin plugin.mixin  if plugin.mixin?\n\n        for methodName in methodNames\n          continue  unless plugin[methodName]? \n          methodListName = methodListNameFor methodName\n          # Ensure we don't impact objects that share our prototype:\n          @[methodListName] = @[methodListName]?.slice() or []\n          @[methodListName].push plugin[methodName]\n          @['__plugins_' + methodName] = invokers[methodName]\n\n      # Ensure pre/post inits run only if their methods already ran.\n      for methodName in ['preInit', 'postInit']\n        if @[methodRanNameFor(methodName)]\n          for plugin in _plugins\n            plugin[methodName].call @  if plugin[methodName]?\n\n    onMixin: ->\n      for methodName in methodNames\n        @::['__plugins_' + methodName] = NOOPFor methodName\n\n      @mixinStatic\n        plugin: (_plugins...) ->\n          for plugin in _plugins\n            @mixin plugin.mixin  if plugin.mixin?\n            @mixinStatic plugin.mixinStatic  if plugin.mixinStatic?\n\n            for methodName in methodNames\n              continue  unless plugin[methodName]? \n              methodListName = methodListNameFor methodName\n              @::[methodListName] ?= []\n              @::[methodListName].push plugin[methodName]\n              @::['__plugins_' + methodName] = invokers[methodName]\n\n      @plugin __plugins\n\nfor own k,v of HasPlugins()\n  HasPlugins[k] = v\n\nmodule.exports = HasPlugins\n",
    "###*\nA pool of actors; useful for reducing periodic garbage collector hiccups when many actors are being created and destroyed \nat a high rate.\n\n@class cg.util.HasPooling.Pool\n@constructor\n@param ctor {Actor Constructor} The class reference/constructor of the actor class whose instances are to be spawned from this pool.\n###\nclass Pool\n  constructor: (@ctor) ->\n    @__objects = []\n    @__marker = 0\n    @__size = 0\n\n  ###*\n  Create a new instance of our class.\n\n  @method spawn\n  @param [arguments...] Arguments are passed *as-is* to the actor's [`reset`](cg.Actor.html#method_reset) method.\n  ###\n  spawn: ->\n    if @__marker >= @__size\n      @__expand Math.max 2, @__size*2\n  \n    obj = @__objects[@__marker++]\n    obj._poolIndex = @__marker - 1\n    obj.visible = true\n    obj.reset arguments...\n    return obj\n\n  __expand: (newSize) ->\n    i = 0\n    while i < newSize - @__size\n      @__objects.push new @ctor\n      ++i\n    @__size = newSize\n\n  # drain: ->\n  #   for obj in @__objects\n  #     obj._leavePool()\n  #   @__objects = []\n\n  _destroy: (obj) ->\n    --@__marker\n    end = @__objects[@__marker]\n    endIndex = end._poolIndex\n\n    @__objects[@__marker] = obj\n    @__objects[obj._poolIndex] = end\n\n    end._poolIndex = obj._poolIndex\n    obj._poolIndex = endIndex\n\n###*\n**plugin**\n\nAdd [pooling](TODOC guide:pooling) capabilities to an actor class.\n\n@static\n@class cg.util.HasPooling\n###\nHasPooling =\n  mixin:\n    _leavePool: ->\n      @_pool._destroy @\n    onMixin: ->\n      ###*\n      The pool that this class may spawn new/recycled actor instances from.\n\n      @static\n      @property pool\n      @type cg.util.HasPooling.Pool\n      ###\n      @pool = new Pool @\n      @::_pool = @pool\n  \n  postDispose: ->\n    @_leavePool()  if @_poolIndex?\n\nmodule.exports = HasPooling",
    "Signal = require 'util/Signal'\n\n__wrap = (listener, funcName, listenerData, listeners) ->\n  if funcName is 'addOnce'\n    return ->\n      unless @worldPaused\n        listener.apply(@, arguments)\n        listeners.splice(listeners.indexOf(listenerData), 1)\n  else\n    return ->\n      listener.apply(@, arguments)  unless @worldPaused\n\n###*\n**mixin**\n\nAdd event listening/emitting to any class.\n\n@static\n@class cg.util.HasSignals\n###\nHasSignals =\n  __signal: (name, create=false) ->\n    if not create\n      signal = @__signals?[name]\n    else\n      @__signals ?= {}\n      @__signals[name] ?= new Signal\n      signal = @__signals[name]\n\n    return signal\n\n  __on: (signaler, name, listener, funcName) ->\n    # This is overwhemlingly complex.\n    # What we really need is an \"event broker\" system that\n    #  tracks instances that can listen/emit signals, and\n    #  does all the reference cleanup when the instances are \n    #  removed from the list.\n\n    listenerData = [0,0,0,0]\n    @__listeners ?= []\n\n    if not (typeof listener is 'function')\n      err = new Error \"on/once expected a function for the listener, but got '#{typeof listener}'; aborting!\"\n      cg.warn err.stack\n      return\n\n    _listener = __wrap listener, funcName, listenerData, @__listeners\n\n    if not signaler? or signaler is @ # on('eventName', listener)\n      signaler = @\n    else # on(signaler, 'eventName', listener)\n      # There's a definite risk for a memory leak here; if the signaler gets\n      #  disposed there's still a reference to it here.\n      # One wacky solution: use the 'destroy' signal\n      #\n      # ACTUALLY, TODO: There will still be leaks if any of signaler's ancestors are destroyed.\n      #\n      # The way this should be handled is ambiguous.\n      #\n      # One approach would be to have a \"removed\" event that gets propagated to all children\n      #  whenever removeChild is called.\n      #\n      # However, you may, for instance, remove the signaler out from the ancestor that\n      #  gets destroyed *after* destruction (which triggers removal); if we use the \"removed\" event here,\n      #  any `on` calls that referenced the signaler have now been cleaned up, which is pretty confusing\n      #  since you're clearly still making explicit reference to the actor, and it was never destroyed.\n      #\n      # The other approach might be to simply propgate the \"__destroy__\" event to all children, instead.\n      #\n      # We would need to leave a clear note that if you want to retain events linked to any Actor, you must\n      #  first remove it from any parent that might need to be destroyed.\n      signaler.once '__destroy__', -> @__listeners.splice @__listeners.indexOf(listenerData), 1\n\n    listenerData[0] = signaler\n    listenerData[1] = name\n    listenerData[2] = _listener\n    listenerData[3] = listener\n\n    @__listeners.push listenerData\n\n    signaler.__signal(name, true)[funcName] _listener, @\n\n  ###*\n  Listen for a named event and execute a function when it is emitted.\n\n  @method on\n  @param [signaler=this] {cg.util.HasSignals}\n  The object that emits the event we wish to listen for.\n\n  If *not* specified, we only listen for events emitted on this `HasSignals` object.\n\n  @param name {String}\n  The name of the event to listen for, or a comma-separated string of multiple event names.\n\n\n  @param callback {Function}\n  A function that executes whenever the event is emitted, **unless `this.paused` is `true`**.\n\n  Callback Context (value of `this`):\n  Inside the `callback`, the value of `this` is the value of the object that `on` was\n  executed with.\n\n  Example:\n\n  ```javascript\n  signalerAAA.on(signalerBBB, 'event', function () {\n    assert(this === signalerAAA); // => true\n  });\n\n  signalerBBB.on('event', function () {\n    assert(this === signalerBBB); // => true\n  });\n\n  signalerBBB.emit('event');\n  ```\n\n  Callback Arguments:\n  The arguments in the function are derived from the arguments passed to the `signaler`'s `emit`\n  call that triggered the event.\n\n  @example\n      listener.on(signaler, 'alert', function (msg) {\n        cg.warn('Danger, Will Robinson: ' + msg);\n      });\n\n      signaler.emit('alert', 'This message will be logged!');\n\n      // If a listener is paused, its event callbacks will not fire.\n      listener.paused = true;\n      signaler.emit('alert', 'This message will NOT be logged!');\n  @example\n      announcer.on(player, 'kill', function (enemyType, weapon) {\n        cg.log('Player killed ' + enemyType + ' with ' + weapon + '.');\n      });\n\n      scoreBook.on(player, 'kill', function (enemyType) {\n        switch(enemyType) {\n        case 'rat':\n          this.score += 100;\n          break;\n        case 'goblin':\n          this.score += 200;\n          break;\n        case 'warlock':\n          this.score += 1000;\n          break;\n        }\n      });\n\n      player.emit('kill', 'rat', 'chainsaw');\n\n      // Result:\n      // logged => \"Player killed rat with chainsaw.\"\n      // scoreBook.score == 200\n  @example\n      logger.on(service, 'log,warn,error', function (msg) {\n        cg.log(msg);\n      });\n\n      service.emit('log', 'How are you gentlemen');\n      service.emit('warn', 'Someone set us up the bomb');\n      service.emit('error', 'All your base... eh, you know the drill.');\n\n      // Result:\n      // logged => \"How are you gentlemen\"\n      // logged => \"Someone set us up the bomb\"\n      // logged => \"All your base... eh, you know the drill.\"\n\n  ###\n  on: (signaler..., name, listener) ->\n    for _name in name.split ','\n      _name = _name.trim()\n      continue  if _name.length is 0\n      @__on(signaler[0] ? @, _name, listener, 'add')\n    return @\n\n  once: (signaler..., name, listener) ->\n    for _name in name.split ','\n      _name = _name.trim()\n      continue  if _name.length is 0\n      @__on(signaler[0] ? @, _name, listener, 'addOnce')\n    return @\n\n  off: (args...) ->\n    if args.length is 1\n      # Remove all signal listeners with this object as context of a specific name:\n      # eg. @off 'click'\n      signaler = @\n      name = args[0]\n    else if args.length is 2\n      if typeof args[0] is 'string'\n        # Remove all signal listeners with this object as context of a specific name:\n        # eg. @off 'click', specificClickListener\n        signaler = @\n        name = args[0]\n        listener = args[1]\n      else\n        # Remove all signal listeners with this object as context of a specific name:\n        # eg. @off signaler, 'click'\n        signaler = args[0]\n        name = args[1]\n    else\n      signaler = args[0]\n      name = args[1]\n      listener = args[2]\n\n    for _name in name.split ','\n      _name = _name.trim()\n      continue  if _name.length is 0\n\n      signal = signaler.__signal _name\n      continue  if not signal?\n\n      if listener?\n        for [_s, _n, wrapped, _l],i in @__listeners when (_s is signaler) and (_n is _name) and (_l is listener) by -1\n          signal.remove wrapped, @\n          @__listeners.splice i, 1\n      else\n        for [_s, _n, wrapped],i in @__listeners when (_s is signaler) and (_n is _name) by -1\n          signal.remove wrapped, @\n          @__listeners.splice i, 1\n\n    return @\n\n  halt: (name) ->\n    @__signal(name)?.halt()\n    return @\n\n  emit: (name, args...) ->\n    @__signal(name)?.dispatch args...\n    return @\n\n  broadcast: (name, args...) ->\n    @emit name, args...\n\n    return @  unless @children?\n\n    for child in @children\n      child.broadcast? name, args...\n\n    return @\n\n  _disposeListeners: ->\n    return  unless @__listeners?\n    for [signaler, name, wrappedListener, listener] in @__listeners by -1\n      @off signaler, name, listener\n    return\n\nmodule.exports = HasSignals\n",
    "# Adapted for combo.js:\n# [promise.coffee](http://github.com/CodeCatalyst/promise.coffee) v1.0.1\n# Copyright (c) 2012-2103 [CodeCatalyst, LLC](http://www.codecatalyst.com/).\n# Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).\n\nModule = require 'Module'\n\nnextTick = if process?.nextTick? then process.nextTick else if setImmediate? then setImmediate else (task) -> setTimeout(task, 0)\n\nisFunction = (value) -> typeof value is 'function'\n\nclass Resolver\n  constructor: (onResolved, onRejected, @context) ->\n    @promise = new Promise(@)\n    pendingResolvers = []\n    processed = false\n    completed = false\n    completionValue = null\n    completionAction = null\n\n    if not isFunction(onRejected)\n      onRejected = (error) -> throw error\n\n    propagate = ->\n      for pendingResolver in pendingResolvers\n        pendingResolver[ completionAction ](completionValue)\n      pendingResolvers = []\n      return\n    schedule = (pendingResolver) ->\n      pendingResolvers.push(pendingResolver)\n      propagate() if completed\n      return\n    complete = (action, value) ->\n      onResolved = onRejected = null\n      completionAction = action\n      completionValue = value\n      completed = true\n      propagate()\n      return\n    completeResolved = (result) ->\n      complete('resolve', result)\n      return\n    completeRejected = (reason) ->\n      complete('reject', reason)\n      return\n\n    process = (callback, value) =>\n      processed = true\n      try\n        value = callback.call(@context, value) if isFunction(callback)\n        if value and isFunction(value.then)\n          value.then(completeResolved, completeRejected, @context)\n        else\n          completeResolved(value)\n      catch error\n        stack = error.stack\n        console.error stack\n        completeRejected(error)\n      return\n\n    @resolve = (result) ->\n      process(onResolved, result) if not processed\n      return\n    @reject = (error) ->\n      process(onRejected, error) if not processed\n      return\n    @then = (onResolved, onRejected) =>\n      if isFunction(onResolved) or isFunction(onRejected)\n        pendingResolver = new Resolver(onResolved, onRejected, @context)\n        nextTick(-> schedule(pendingResolver))\n        return pendingResolver.promise\n      return @promise\n\nclass Promise\n  constructor: (resolver) ->\n    @then = (onFulfilled, onRejected) -> resolver.then(onFulfilled, onRejected)\n\nclass Deferred extends Module\n  constructor: (context) ->\n    resolver = new Resolver(null, null, context)\n\n    @promise = resolver.promise\n    @resolve = (result) -> resolver.resolve(result)\n    @reject = (error) -> resolver.reject(error)\n\nmodule.exports = {\n  Deferred: Deferred\n  defer: -> new Deferred arguments...\n}\n",
    "###\nSignal & SignalBinding adapted from https://raw.github.com/millermedeiros/js-signals/\n###\n\nSignalBinding = require 'util/SignalBinding'\n\n#global SignalBinding:false\n\n# Signal --------------------------------------------------------\n#================================================================\nvalidateListener = (listener, fnName) ->\n  throw new Error(\"listener is a required param of {fn}() and should be a Function.\".replace(\"{fn}\", fnName))  if typeof listener isnt \"function\"\n\n###\nCustom event broadcaster\n<br />- inspired by Robert Penner's AS3 Signals.\n@name cg.util.Signal\n@author Miller Medeiros\n@constructor\n###\nclass Signal\n  constructor: (@name) ->\n    ###\n    @type Array.<SignalBinding>\n    @private\n    ###\n    @_bindings = []\n    @_prevParams = null\n    \n    # enforce dispatch to aways work on same context (#47)\n    @dispatch = =>\n      Signal::dispatch.apply @, arguments\n\n  ###\n  If Signal should keep record of previously dispatched parameters and\n  automatically execute listener during `add()`/`addOnce()` if Signal was\n  already dispatched before.\n  @type boolean\n  ###\n  memorize: false\n  \n  ###\n  @type boolean\n  @private\n  ###\n  _shouldPropagate: true\n  \n  ###\n  If Signal is active and should broadcast events.\n  <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>\n  @type boolean\n  ###\n  active: true\n  \n  ###\n  @param {Function} listener\n  @param {boolean} isOnce\n  @param {Object} [listenerContext]\n  @param {Number} [priority]\n  @return {SignalBinding}\n  @private\n  ###\n  _registerListener: (listener, isOnce, listenerContext, priority) ->\n    prevIndex = @_indexOfListener(listener, listenerContext)\n    binding = undefined\n    if prevIndex isnt -1\n      binding = @_bindings[prevIndex]\n      throw new Error(\"You cannot add\" + ((if isOnce then \"\" else \"Once\")) + \"() then add\" + ((if not isOnce then \"\" else \"Once\")) + \"() the same listener without removing the relationship first.\")  if binding.isOnce() isnt isOnce\n    else\n      binding = new SignalBinding(this, listener, isOnce, listenerContext, priority)\n      @_addBinding binding\n    binding.execute @_prevParams  if @memorize and @_prevParams\n    binding\n\n  \n  ###\n  @param {SignalBinding} binding\n  @private\n  ###\n  _addBinding: (binding) ->\n    \n    #simplified insertion sort\n    n = @_bindings.length\n    loop\n      --n\n      break unless @_bindings[n] and binding._priority <= @_bindings[n]._priority\n    @_bindings.splice n + 1, 0, binding\n\n  \n  ###\n  @param {Function} listener\n  @return {number}\n  @private\n  ###\n  _indexOfListener: (listener, context) ->\n    n = @_bindings.length\n    cur = undefined\n    while n--\n      cur = @_bindings[n]\n      return n  if cur._listener is listener and cur.context is context\n    -1\n\n  \n  ###\n  Check if listener was attached to Signal.\n  @param {Function} listener\n  @param {Object} [context]\n  @return {boolean} if Signal has the specified listener.\n  ###\n  has: (listener, context) ->\n    @_indexOfListener(listener, context) isnt -1\n\n  \n  ###\n  Add a listener to the signal.\n  @param {Function} listener Signal handler function.\n  @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n  @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)\n  @return {SignalBinding} An Object representing the binding between the Signal and listener.\n  ###\n  add: (listener, listenerContext, priority) ->\n    validateListener listener, \"add\"\n    @_registerListener listener, false, listenerContext, priority\n\n  \n  ###\n  Add listener to the signal that should be removed after first execution (will be executed only once).\n  @param {Function} listener Signal handler function.\n  @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n  @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)\n  @return {SignalBinding} An Object representing the binding between the Signal and listener.\n  ###\n  addOnce: (listener, listenerContext, priority) ->\n    validateListener listener, \"addOnce\"\n    @_registerListener listener, true, listenerContext, priority\n\n  \n  ###\n  Remove a single listener from the dispatch queue.\n  @param {Function} listener Handler function that should be removed.\n  @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).\n  @return {Function} Listener handler function.\n  ###\n  remove: (listener, context) ->\n    validateListener listener, \"remove\"\n    i = @_indexOfListener(listener, context)\n    if i isnt -1\n      @_bindings[i]._destroy() #no reason to a SignalBinding exist if it isn't attached to a signal\n      @_bindings.splice i, 1\n    listener\n\n  \n  ###\n  Remove all listeners from the Signal.\n  ###\n  removeAll: ->\n    n = @_bindings.length\n    @_bindings[n]._destroy()  while n--\n    @_bindings.length = 0\n\n  \n  ###\n  @return {number} Number of listeners attached to the Signal.\n  ###\n  getNumListeners: ->\n    @_bindings.length\n\n  \n  ###\n  Stop propagation of the event, blocking the dispatch to next listeners on the queue.\n  <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>\n  @see Signal.prototype.disable\n  ###\n  halt: ->\n    @_shouldPropagate = false\n\n  \n  ###\n  Dispatch/Broadcast Signal to all listeners added to the queue.\n  @param {...*} [params] Parameters that should be passed to each handler.\n  ###\n  dispatch: (params...) ->\n    return  unless @active\n    n = @_bindings.length\n    bindings = undefined\n    @_prevParams = params  if @memorize\n    \n    #should come after memorize\n    return  unless n\n    bindings = @_bindings.slice() #clone array in case add/remove items during dispatch\n    @_shouldPropagate = true #in case `halt` was called before dispatch or during the previous dispatch.\n    \n    #execute all callbacks until end of the list or until a callback returns `false` or stops propagation\n    #reverse loop since listeners with higher priority will be added at the end of the list\n    loop\n      n--\n      break unless bindings[n] and @_shouldPropagate and bindings[n].execute(params) isnt false\n\n  \n  ###\n  Forget memorized arguments.\n  @see Signal.memorize\n  ###\n  forget: ->\n    @_prevParams = null\n\n  \n  ###\n  Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).\n  <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>\n  ###\n  dispose: ->\n    @removeAll()\n    delete @_bindings\n    delete @_prevParams\n\n  \n  ###\n  @return {string} String representation of the object.\n  ###\n  toString: ->\n    \"[Signal active:\" + @active + \" numListeners:\" + @getNumListeners() + \"]\"\n\nmodule.exports = Signal",
    "###\nSignal & SignalBinding adapted from https://raw.github.com/millermedeiros/js-signals/\n###\n\n# Adapted from https://raw.github.com/millermedeiros/js-signals/\n\n# SignalBinding -------------------------------------------------\n#================================================================\n\n###\nObject that represents a binding between a Signal and a listener function.\n<br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>\n<br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.\n@author Miller Medeiros\n@constructor\n@internal\n@name SignalBinding\n@param {Signal} signal Reference to Signal object that listener is currently bound to.\n@param {Function} listener Handler function bound to the signal.\n@param {boolean} isOnce If binding should be executed just once.\n@param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n@param {Number} [priority] The priority level of the event listener. (default = 0).\n###\nclass SignalBinding\n  constructor: (signal, listener, isOnce, listenerContext, priority) ->\n    ###\n    Handler function bound to the signal.\n    @type Function\n    @private\n    ###\n    @_listener = listener\n    \n    ###\n    If binding should be executed just once.\n    @type boolean\n    @private\n    ###\n    @_isOnce = isOnce\n    \n    ###\n    Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n    @memberOf SignalBinding.prototype\n    @name context\n    @type Object|undefined|null\n    ###\n    @context = listenerContext\n    \n    ###\n    Reference to Signal object that listener is currently bound to.\n    @type Signal\n    @private\n    ###\n    @_signal = signal\n    \n    ###\n    Listener priority\n    @type Number\n    @private\n    ###\n    @_priority = priority or 0\n\n  ###\n  If binding is active and should be executed.\n  @type boolean\n  ###\n  active: true\n  \n  ###\n  Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)\n  @type Array|null\n  ###\n  params: null\n  \n  ###\n  Call listener passing arbitrary parameters.\n  <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>\n  @param {Array} [paramsArr] Array of parameters that should be passed to the listener\n  @return {*} Value returned by the listener.\n  ###\n  execute: (paramsArr) ->\n    handlerReturn = undefined\n    params = undefined\n    if @active and !!@_listener\n      params = (if @params then @params.concat(paramsArr) else paramsArr)\n      handlerReturn = @_listener.apply(@context, params)\n      @detach()  if @_isOnce\n    handlerReturn\n  \n  ###\n  Detach binding from signal.\n  - alias to: mySignal.remove(myBinding.getListener());\n  @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.\n  ###\n  detach: ->\n    (if @isBound() then @_signal.remove(@_listener, @context) else null)\n\n  ###\n  @return {Boolean} `true` if binding is still bound to the signal and have a listener.\n  ###\n  isBound: ->\n    !!@_signal and !!@_listener\n  \n  ###\n  @return {boolean} If SignalBinding will only be executed once.\n  ###\n  isOnce: ->\n    @_isOnce\n  \n  ###\n  @return {Function} Handler function bound to the signal.\n  ###\n  getListener: ->\n    @_listener\n  \n  ###\n  @return {Signal} Signal that listener is currently bound to.\n  ###\n  getSignal: ->\n    @_signal\n  \n  ###\n  Delete instance properties\n  @private\n  ###\n  _destroy: ->\n    delete @_signal\n    delete @_listener\n    delete @context\n\n  ###\n  @return {string} String representation of the object.\n  ###\n  toString: ->\n    \"[SignalBinding isOnce:\" + @_isOnce + \", isBound:\" + @isBound() + \", active:\" + @active + \"]\"\n\nmodule.exports = SignalBinding",
    "(function (process){\n/*\nCopyright (c) 2010 Caolan McMahon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = setImmediate;\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback(null);\n                    }\n                }\n            }));\n        });\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback(null);\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (err, v) {\n                results[x.index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        if (!keys.length) {\n            return callback(null);\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (_keys(results).length === keys.length) {\n                callback(null, results);\n                callback = function () {};\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (tasks.constructor !== Array) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (tasks.constructor === Array) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (tasks.constructor === Array) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            if (test()) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            if (!test()) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if(data.constructor !== Array) {\n              data = [data];\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            }\n        };\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            push: function (data, callback) {\n                if(data.constructor !== Array) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain) cargo.drain();\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                callback.apply(null, memo[key]);\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.compose = function (/* functions... */) {\n        var fns = Array.prototype.reverse.call(arguments);\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // AMD / RequireJS\n    if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // Node.js\n    else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n}).call(this,require(\"/home/lyla/Documents/Programming/ComboGame1/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js\"))",
    "DeferredProxy = require 'util/DeferredProxy'\nHasPooling = require 'util/HasPooling'\nHasSignals = require 'util/HasSignals'\nPromises = require 'util/Promises'\nSignal = require 'util/Signal'\nSignalBinding = require 'util/SignalBinding'\n\nutil =\n  sizeOf: (obj) ->\n    s = 0\n    for own k,v of obj\n      ++s\n    s\n\n  isArray: (obj) ->\n    Object::toString.call(obj) is \"[object Array]\"\n\n  arrayRemove: (arr, from, to) ->\n    rest = arr.slice((to or from) + 1 or arr.length)\n    arr.length = (if from < 0 then arr.length + from else from)\n    arr.push.apply arr, rest\n\n  rgba: (str) ->\n    if str[0] == '#'\n      if str.length == 4\n        str = \"##{str[1]}#{str[1]}#{str[2]}#{str[2]}#{str[3]}#{str[3]}\"\n\n      return [\n        parseInt(str[1..2],16)/255 or 0\n        parseInt(str[3..4],16)/255 or 0\n        parseInt(str[5..6],16)/255 or 0\n        1.0\n      ]\n\n    if str[0..2] == 'rgb'\n      split = str[str.indexOf('(')+1..str.indexOf(')')-1].split ','\n      return [\n        parseInt(split[0])/255 or 0\n        parseInt(split[1])/255 or 0\n        parseInt(split[2])/255 or 0\n        parseInt(split[3]) or 1\n      ]\n\n    return [0,0,0,1]\n\n  isNaN: (obj) -> util.isNumber(obj) and obj isnt +obj\n\n  ###\n  Converts a hex color number to an [R, G, B] array\n\n  @method HEXtoRGB\n  @param hex {Number}\n  ###\n  hexToRGB: (hex) ->\n    [(hex >> 16 & 0xFF) / 255, (hex >> 8 & 0xFF) / 255, (hex & 0xFF) / 255]\n\n  Float32Array: Float32Array ? Array\n  Uint16Array: Uint16Array ? Array\n\n  DeferredProxy: DeferredProxy\n  HasPooling: HasPooling\n  HasSignals: HasSignals\n  Promises: Promises\n  Signal: Signal\n  SignalBinding: SignalBinding\n\nfor name in ['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp']\n  do (name) ->\n    util['is' + name] = (obj) -> toString.call(obj) is '[object ' + name + ']'\n\nmodule.exports = util\n",
    "cg = require 'cg'\nVillager = require 'Villager'\nTrogdor = require 'Trogdor'\n\nclass ComboGame extends cg.Scene\n  constructor: ->\n    super\n    Trogdor.initalizeControls()\n\n    @trogdor = @addChild new Trogdor\n      x: cg.width/3\n      y: cg.height/3\n      id: 'trogdor'\n\n    for i in [1..100]\n      @addChild new Villager\n        x: cg.rand(cg.width)\n        y: cg.rand(cg.height)\n\n    @trogdor.bringToFront()\n\n  update: ->\n    super\n\n\n    # @logo.rotation += 0.02\n\n\nmodule.exports = ComboGame\n",
    "cg = require 'cg'\nPhysical = require 'plugins/physics/Physical'\nInteractive = require 'plugins/ui/Interactive'\n\nclass Fire extends cg.SpriteActor\n  @plugin Interactive\n  constructor:(@trogdor) ->\n    super\n    @anims =\n      burn: cg.assets.sheets.fireright.anim([0,1,2,3,2,1], 100)\n    @anim = @anims.burn\n    @scale = 0.5\n    console.log(\"Trogdor is \" + @trogdor.x)\n\n  update: ->\n    super\n    @x += 1\n    console.log(@x)\n    ###console.log(\"Trogdor is \" + @trogdor.x)\n\n    if @trogdor.flipX\n      @x = (@trogdor.x)-40\n      @flipX = true\n    else\n      @x = (@trogdor.x)+40\n      @flipX = false\n\n    @y = (@trogdor.y)-10\n    console.log(\"Flame is \" + @x)\n###\nmodule.exports = Fire\n",
    "cg = require 'cg'\nPhysical = require 'plugins/physics/Physical'\nInteractive = require 'plugins/ui/Interactive'\nFire = require 'Fire'\nTROGDOR_SPEED = 10\n\n\nclass Trogdor extends cg.SpriteActor\n  @plugin Interactive\n\n\n\n  constructor: ->\n    super\n    @texture = 'trogdor'\n    @controls = cg.input.controls.trogdorControls\n    @velocity = new cg.math.Vector2\n    @fire = @addChild new Fire\n      x: cg.width/2\n      y: cg.height/2\n      id: 'fire'\n      trogdor: this\n\n    @on 'leftright', (val) ->\n      @velocity.x = (val)*TROGDOR_SPEED  \n      if val < 0 \n        @flipX = true\n      else if val > 0\n        @flipX = false\n\n    @on 'updown', (val) ->\n      @velocity.y = (val)*TROGDOR_SPEED\n\n    \n\n  update: ->\n    super\n\n    @x += @velocity.x\n    @y += @velocity.y\n\n    if @x > cg.width\n      @x = @x%cg.width\n    if @right < 0\n      @x = @right+cg.width\n\n    if @y > cg.height\n      @y = @y%cg.height\n    if @bottom < 0\n      @bottom = @bottom+cg.height\n\n  @initalizeControls: ->\n      cg.input.map 'trogdorControls',\n        leftright: ['left/right']\n        updown: ['up/down']\nmodule.exports = Trogdor\n",
    "cg = require 'cg'\nPhysical = require 'plugins/physics/Physical'\nInteractive = require 'plugins/ui/Interactive'\n\nPOPUP_TIMERANGE_MAX = 3000\nPOPUP_TIMERANGE_MIN = 500\n\nclass Villager extends cg.SpriteActor\n  @plugin Interactive\n  \n\n\n  constructor: ->\n    super\n    @anims =\n      idle: cg.assets.sheets.villager.anim([0]),\n      walk: cg.assets.sheets.villager.anim([1,2],200),\n      hide: cg.assets.sheets.villager.anim([0]),\n      show: cg.assets.sheets.villager.anim([0])\n    @popUp()      \n    @anim = @anims.walk\n\n  popUp: ->\n    @anim = @anims.show\n    @show 100, =>\n\n      @anim = @anims.walk\n    @delay(cg.rand(POPUP_TIMERANGE_MIN,POPUP_TIMERANGE_MAX),\n           @popDown)\n\n  popDown: ->\n    @anim = @anims.hide\n    @hide 100\n    @delay(cg.rand(POPUP_TIMERANGE_MIN,POPUP_TIMERANGE_MAX),\n           @popUp)\n  update: ->\n    super\n\n\n\n\nmodule.exports = Villager\n",
    "cg = require 'cg'\nrequire 'index'\n\nUI = require 'plugins/ui/UI'\nPhysics = require 'plugins/physics/Physics'\nComboGame = require 'ComboGame'\n\nmodule.exports = ->\n  # App-wide plugins need to be loaded before `cg.init` is called:\n  cg.plugin UI\n  cg.plugin Physics\n\n  # This will set up graphics, sound, input, data, plugins, and start our game loop:\n  cg.init\n    name: 'Combo Game'\n    width: 400\n    height: 270\n    backgroundColor: 0x222222\n    displayMode: 'pixel'\n\n  loadingScreen = cg.stage.addChild new cg.extras.LoadingScreen\n  loadingScreen.begin()\n\n  cg.assets.loadJSON('assets.json').then (pack) ->\n    cg.assets.preload pack,\n      error: (src) ->\n        cg.error 'Failed to load asset ' + src\n      progress: (src, data, loaded, count) ->\n        cg.log \"Loaded '#{src}'\"\n        loadingScreen.setProgress loaded/count\n      complete: ->\n        loadingScreen.complete().then ->\n          loadingScreen.destroy()\n          cg.stage.addChild new ComboGame\n            id: 'main'\n  , (err) ->\n    throw new Error 'Failed to load assets.json: ' + err.message\n\n  # Hide the pre-pre loading \"Please Wait...\" message:\n  document.getElementById('pleasewait').style.display = 'none'\n\n  # Show our game container:\n  document.getElementById('combo-game').style.display = 'inherit'\n\nmodule.exports()\n"
  ],
  "sourceRoot": ""
}